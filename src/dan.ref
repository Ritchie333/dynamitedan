[Game]
Game=Dynamite Dan
Copyright=Copyright Rod Bowkett / Mirrorsoft 1985. This dissassembly by Ritchie Swann 2019.

[Page:DataStructures]
SectionPrefix=DataStructures

[Page:UDGs]
SectionPrefix=UDGs

[Page:Sprites]
SectionPrefix=Sprites

[Page:Food]
SectionPrefix=Food


[Page:Pokes]
SectionType=ListItems

[Poke:Pokes]
.

Infinite lives
 CD6C, 0

Immunity
 CD8A, C9

No moving objects
 E592, C9

Blow up the safe without 8 dynamite sticks
 CFA4, 0

Launch the blimp without the plans
 E60A, 0

Always survive drowning
 DC27, 0

Walk through walls
 D97E, 0

[Fact:Duplicate rooms]
The two blocks at each edge of every room are duplicated in the
adjoining one, with the obvious exception of those at the top
(not accessible) and the bottom (which is the river). 

[Fact:Character names]
The villans names of Dr Blitzen and Donna are taken from
two of the' reindeer in Clement Clarke Moore's famous Christmas poem
"A Visit from St. Nicholas", written in 1823. However, Blitzen
is also German for "flash" or gramatically incorrect German for
"lightning (bolts)", which appropriately describes the planned
super ray gun in the game. The name is possibly also a reference
to Dr Blofeld, a recurring villain in the James Bond series.

[Fact:Theme tunes]
The main theme tune is an excerpt from the third movement
"Alla turca - Allegretto" of Mozart's Piano Sonata No. 11,
composed c. 1783 and published the following year. The original
piece, however, is played in A minor / C major, whereas
the game's version is in D minor / F major, and played at
a slower tempo.

The music that plays when Dan drowns in the river is a few bars
of "The Sailor's Hornpipe", as heard annually in the Last Night
at the Proms, at the end of Mike Oldfield's "Tubular Bells", or on the
contemporary computer game, Booty.

[Fact:Winning message]
The message on completing the game says
"UNRAVEL THIS CODED MESSAGE: - NRIILIHLUG IFOVH LP THEN PHONE ...
TO CLAIM YOUR PRIZE". The code simply swaps A <-> Z, B <-> Y etc,
which decodes to "MIRROSOFT RULES OK".

The phone number given was Mirrorsoft's office number starting 01-377,
which in 1985 was in Bishopsgate, City of London. In May 1990, this would have become
071-377, and since PhONEDay on 16 April 1995, 01377 has become the
area code for Driffield, East Riding of Yorkshire. So if you try and
ring the number now, nothing will happen as you will not have entered
a number long enough; although that's probably better than annoying
some random Yorkshireman.

[DataStructures:Rooms]
The game has 48 rooms, from 00 to 2F. There are six levels, each with
eight rooms that wrap around each other. The bottom rooms with the river
are 00-07; the top ones are 28-2F. Room 2B is the starting room;
room 1B is the room with the safe.

There is therefore no need for a "next room" array as it can be
automatically calculated. However, if you try to use a "large jump"
cheat on one of the top rooms and jump above the screen, the game
will crash!

Each room contains 12 bytes of basic information in an array starting
at #R$69E6. This is referenced when a new room is entered at the
routine in #R$CBBD. The structure is :

#TABLE(map)
{ 00 - 01 | Pointer to list of static UDGs }
{ 02 - 03 | Location of a test tube in the room, if any }
{ 04 | Bits 0-2 contain an index (from 0-7) of a food item.
Bits 6-7 are an index (0-3) into an array at #R$6C26 containing
two custom attribute bytes that represent floors (in addition to a
hard-coded six more) ie: can be stood on,
followed by 6 bytes of attributes that represent
walls ie: cannot be walked through. }
{ 05 - 06 | The x and y co-ordinates to draw the food item }
{ 07 - 08 | Pointer to list of moving objects }
{ 09 - 0A | Location of dynamite in the room, if any }
{ 0B | If bits 0, 1 or 2 are set, this prints a bank card of UDG
CB CC or CD in the room }
TABLE#

[DataStructures:UDG format]
UDGs are referenced in the game by ID. This is translated by a lookup
buffer at #R$6C46, where the ID is an index into an array of pointers
to the actual data. This lookup is done in the routines at #R$F3D3
and #R$ED00 / #R$ED06

The UDG data then contains two bytes containing the width (in bytes)
and length (in 8 line blocks). Where a UDG's length is greater than 1
block, the graphic data appears in reverse order ie: the bottom width x 8
block comes first.

The graphic data contains all the pixel data, followed by all the attribute
data. The attributes are either set individually for each 8x8 square,
or contains a sequence of 00, nn where nn is the attribute to set for
all squares.

[DataStructures:UDG lists]
Each room contains a list of several UDGs.
These are pointed to by the first two bytes in each room data,
and printed by the routine at #R$ED00 / #R$ED06.

The first two bytes are the co-ordinates of a UDG, followed by one byte
for its ID. There is then an optional sequence of :

#LIST(default)
{ FE, a, b - copy 'a' x 'b' times and move right }
{ FD, a, b - copy 'a' x 'b' times and move left }
{ FC, a, b - copy 'a' x 'b' times and move up }
{ FB, a, b - copy 'a' x 'b' times and move down }
{ FF - end of the list }
LIST#

The structure then repeats.

[DataStructures:Food]
There are 8 types of food. The graphics are stored in an array at #R$65DA.
The entry there points to UDG data of the food.

The array at #R$65EA contains the attribute of the food.

[DataStructures:Sprites]
Each room's sprite buffer is pointed to by offsets 7+8 in the room data.
A room can have up to two different types of horizontal and veritical
moving sprites each. A sprite is assigned an ID, which is an index into
an array of pointers at #R$AE60. The lookup is done at the routine
in #R$D669.

The first byte of sprite data holds two values. Bits 0 - 1 contain the
sprite's width in bytes; bits 2 - 7 hold the number of lines for one frame.
Multiplied together, this gives a size of a frame, which is temporarily
stored in #R$D675.

The sprite buffer starts with a 5-byte header. The format is:
#TABLE(map)
{ 00 | ID of first vertical sprite }
{ 01 | ID of second vertical sprite }
{ 02 | ID of first horizontal sprite }
{ 03 | ID of second horizontal sprite }
{ 04 - 05 | Four 4-bit numbers containing the number of
objects each of the four types defined above }
TABLE#

The number of objects are copied as four bytes starting from #R$E540.
If any of the bytes are 0, the sprite is not drawn.

Following the header are a series of 8-byte structures, each dealing
with animation and movement for each of the sprites defined. The total
number of records is the sum of the item count from E540 - E543.
The fields are:
#TABLE(map)
{ 00 | Current x co-ordinate (horizontal) or y co-ordinate (vertical) }
{ 01 | Fixed y co-ordinate (horizontal) or x co-ordinate (veritcal) }
{ 02 | Minimum x (horizontal) or y (vertical) co-ordinate }
{ 03 | Maximum x (horizontal) or y (vertical) co-ordinate }
{ 04 | Bitfield of flags }
{ 05 | Attribute to colour the sprite in }
{ 06 | Current frame number }
{ 07 | Total number of frames }
TABLE#

Make sure that field 2 is always lower than field 3, otherwise undefined
behaviour will result!

[Food:00 - Egg]
#UDGTABLE
{ #UDG$65FC,$78,2 }
{ #UDG$65F4,$70,2 }
UDGTABLE#

[Food:01 - Martini]
#UDGTABLE
{ #UDG$6769,$45,2,2#UDG$676A,$50,2,2 }
{ #UDG$6759,$78,2,2#UDG$675A,$78,2,2 }
{ #UDG$6749,$78,2,2#UDG$674A,$78,2,2 }
UDGTABLE#

[Food:02 - Fruit bowl]
#UDGTABLE
{ #UDG$6729,$30,2,3#UDG$672A,$58,2,2#UDG$672B,$50,2,3 }
{ #UDG$6711,$20,2,3#UDG$6712,$20,2,3#UDG$6713,$20,2,3 }
UDGTABLE#

[Food:03 - Cheese]
#UDGTABLE
{ #UDG$665E,$70,2,3#UDG$665F,$70,2,3#UDG$6660,$30,2,3 }
{ #UDG$6646,$70,2,3#UDG$6647,$70,2,3#UDG$6648,$30,2,3 }
{ #UDG$662E,$70,2,3#UDG$662F,$70,2,3#UDG$6630,$30,2,3 }
UDGTABLE#

[Food:04 - Cake]
#UDGTABLE
{ #UDG$6618,$78,2,2#UDG$6619,$78,2,2 }
{ #UDG$6608,$32,2,2#UDG$6609,$32,2,2 }
UDGTABLE#

[Food:05 - Ice cream]
#UDGTABLE
{ #UDG$66A1,$70,2,2#UDG$66A2,$58,2,2 }
{ #UDG$6691,$78,2,2#UDG$6692,$70,2,2 }
{ #UDG$6681,$50,2,2#UDG$6682,$50,2,2 }
UDGTABLE#

[Food:06 - Cup of tea]
#UDGTABLE
{ #UDG$66FD,$20,2,2#UDG$66FE,$20,2,2 }
{ #UDG$66ED,$20,2,2#UDG$66EE,$20,2,2 }
UDGTABLE#

[Food:07 - Soup]
#UDGTABLE
{ #UDG$66D1,$28,2,3#UDG$66D2,$28,2,3#UDG$66D3,$28,2,3 }
{ #UDG$66B9,$28,2,3#UDG$66BA,$28,2,3#UDG$66BB,$28,2,3 }
UDGTABLE#

[Sprites:Dan]
#UDGTABLE
{ #UDG$633A,5,2,3#UDG$633B,5,2,3#UDG$633C,5,2,3
| #UDG$638E,5,2,3#UDG$638F,5,2,3#UDG$6390,5,2,3 
| #UDG$63E2,5,2,3#UDG$63E3,5,2,3#UDG$63E4,5,2,3
| #UDG$6436,5,2,3#UDG$6437,5,2,3#UDG$6438,5,2,3
}
{ #UDG$6352,5,2,3#UDG$6353,5,2,3#UDG$6354,5,2,3 
| #UDG$63A6,5,2,3#UDG$63A7,5,2,3#UDG$63A8,5,2,3
| #UDG$63FA,5,2,3#UDG$63FB,5,2,3#UDG$63FC,5,2,3
| #UDG$644E,5,2,3#UDG$644F,5,2,3#UDG$6450,5,2,3
}
{ #UDG$636A,5,2,3#UDG$636B,5,2,3#UDG$636C,5,2,3 
| #UDG$63BE,5,2,3#UDG$63BF,5,2,3#UDG$63C0,5,2,3
| #UDG$6412,5,2,3#UDG$6413,5,2,3#UDG$6414,5,2,3
| #UDG$6466,5,2,3#UDG$6467,5,2,3#UDG$6468,5,2,3
}
{ #UDG$6382,5,2,3{,,,4}#UDG$6383,5,2,3{,,,4}#UDG$6384,5,2,3{,,,4}
| #UDG$63D6,5,2,3{,,,4}#UDG$63D7,5,2,3{,,,4}#UDG$63D8,5,2,3{,,,4}
| #UDG$642A,5,2,3{,,,4}#UDG$642B,5,2,3{,,,4}#UDG$642C,5,2,3{,,,4}
| #UDG$647E,5,2,3{,,,4}#UDG$647F,5,2,3{,,,4}#UDG$6480,5,2,3{,,,4}
}
UDGTABLE#

#UDGTABLE
{ #UDG$648A,5,2,3#UDG$648B,5,2,3#UDG$648C,5,2,3
| #UDG$64DE,5,2,3#UDG$64DF,5,2,3#UDG$64E0,5,2,3 
| #UDG$6532,5,2,3#UDG$6533,5,2,3#UDG$6534,5,2,3
| #UDG$6586,5,2,3#UDG$6587,5,2,3#UDG$6588,5,2,3
}
{ #UDG$64A2,5,2,3#UDG$64A3,5,2,3#UDG$64A4,5,2,3 
| #UDG$64F6,5,2,3#UDG$64F7,5,2,3#UDG$64F8,5,2,3
| #UDG$654A,5,2,3#UDG$654B,5,2,3#UDG$654C,5,2,3
| #UDG$659E,5,2,3#UDG$659F,5,2,3#UDG$65A0,5,2,3
}
{ #UDG$64BA,5,2,3#UDG$64BB,5,2,3#UDG$64BC,5,2,3 
| #UDG$650E,5,2,3#UDG$650F,5,2,3#UDG$6510,5,2,3
| #UDG$6562,5,2,3#UDG$6563,5,2,3#UDG$6564,5,2,3
| #UDG$65B6,5,2,3#UDG$65B7,5,2,3#UDG$65B8,5,2,3
}
{ #UDG$64D2,5,2,3{,,,4}#UDG$64D3,5,2,3{,,,4}#UDG$64D4,5,2,3{,,,4}
| #UDG$6526,5,2,3{,,,4}#UDG$6527,5,2,3{,,,4}#UDG$6528,5,2,3{,,,4}
| #UDG$657A,5,2,3{,,,4}#UDG$657B,5,2,3{,,,4}#UDG$657C,5,2,3{,,,4}
| #UDG$65CE,5,2,3{,,,4}#UDG$65CF,5,2,3{,,,4}#UDG$65D0,5,2,3{,,,4}
}
UDGTABLE#

[UDGs:Dan being shot]
#UDGTABLE
{ #UDG$F086,5,2,2#UDG$F087,5,2,2 
| #UDG$F0B8,5,2,2#UDG$F0B9,5,2,2
| #UDG$F0CC,5,2,2#UDG$F0EB,5,2,2
| #UDG$F11A,5,2,2#UDG$F11B,5,2,2
| #UDG$F15E,5,2,3#UDG$F15F,5,2,3#UDG$F160,5,2,3
| #UDG$F1A8,5,2,3#UDG$F1A9,5,2,3#UDG$F1AA,5,2,3
| #UDG$F1F2,5,2,3#UDG$F1F3,5,2,3#UDG$F1F4,5,2,3
}
{ #UDG$F076,5,2,2#UDG$F077,5,2,2 
| #UDG$F0A8,5,2,2#UDG$F0A9,5,2,2
| #UDG$F0DA,5,2,2#UDG$F0DB,5,2,2
| #UDG$F10A,5,2,2#UDG$F10B,5,2,2
| #UDG$F146,5,2,3#UDG$F147,5,2,3#UDG$F148,5,2,3 
| #UDG$F190,5,2,3#UDG$F191,5,2,3#UDG$F192,5,2,3
| #UDG$F1DA,5,2,3#UDG$F1DB,5,2,3#UDG$F1DC,5,2,3
| #UDG$F224,5,2,3#UDG$F225,5,2,3#UDG$F226,5,2,3
| #UDG$F256,5,2,3#UDG$F257,5,2,3#UDG$F258,5,2,3
}
{ #UDG$F066,5,2,2#UDG$F067,5,2,2 
| #UDG$F098,5,2,2#UDG$F099,5,2,2
| #UDG$F0CA,5,2,2#UDG$F0CB,5,2,2
| #UDG$F0FA,5,2,2#UDG$F0FB,5,2,2
| #UDG$F12E,5,2,3#UDG$F12F,5,2,3#UDG$F130,5,2,3
| #UDG$F178,5,2,3#UDG$F179,5,2,3#UDG$F17A,5,2,3 
| #UDG$F1C2,5,2,3#UDG$F1C3,5,2,3#UDG$F1C4,5,2,3  
| #UDG$F20C,5,2,3#UDG$F20D,5,2,3#UDG$F20E,5,2,3
| #UDG$F23E,5,2,3#UDG$F23F,5,2,3#UDG$F240,5,2,3
}
UDGTABLE#

[Sprites:Dr. Blitzen]
#UDGTABLE
{ #UDG$AFDD,$43,2,2#UDG$AFDE,$43,2,2
| #UDG$B00D,$43,2,2#UDG$B00E,$43,2,2
}
{ #UDG$AFED,$43,2,2#UDG$AFEE,$43,2,2 
| #UDG$B01D,$43,2,2#UDG$B01E,$43,2,2
}
{ #UDG$AFFD,$43,2,2#UDG$AFFE,$43,2,2 
| #UDG$B02D,$43,2,2#UDG$B02E,$43,2,2
}
UDGTABLE#

[Sprites:Donna]
#UDGTABLE
{ #UDG$C736,$46,2
| #UDG$C74E,$46,2 
| #UDG$C766,$46,2
| #UDG$C77E,$46,2
}
{ #UDG$C73E,$46,2 
| #UDG$C756,$46,2 
| #UDG$C76E,$46,2
| #UDG$C786,$46,2
}
{ #UDG$C746,$46,2 
| #UDG$C75E,$46,2
| #UDG$C776,$46,2
| #UDG$C78E,$46,2
}
UDGTABLE#

[Index:DataTables:Data tables and buffers]
GameStatusBuffer
DataStructures
[Index:Graphics:Graphics]
UDGs
Sprites
Food
[Links]
DataStructures=Data structures