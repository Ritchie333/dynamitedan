; UDG DE - Blown up safe 1
;
; #CALL:print_udg(#PC,UDG_DE)
b$6000 DEFB $03,$04,$02,$54,$00,$08,$24,$00
 $6008 DEFB $00,$64,$00,$12,$5A,$00,$04,$F1
 $6010 DEFB $00,$00,$8A,$00,$00,$02,$00,$00
 $6018 DEFB $00,$00,$10,$31,$6C,$08,$21,$20
 $6020 DEFB $02,$52,$08,$04,$AA,$10,$10,$12
 $6028 DEFB $10,$00,$69,$00,$04,$51,$00,$00
 $6030 DEFB $AA,$00,$00,$62,$00,$02,$4A,$00
 $6038 DEFB $10,$84,$00,$00,$D4,$02,$08,$B2
 $6040 DEFB $02,$01,$6A,$04,$0A,$B2,$50,$00
 $6048 DEFB $4A,$8A,$00,$00,$00,$00,$02,$00
 $6050 DEFB $00,$02,$00,$00,$AA,$00,$00,$51
 $6058 DEFB $00,$04,$41,$00,$00,$B0,$00,$08
 $6060 DEFB $DA,$00,$06,$03,$03,$02,$05,$05
 $6068 DEFB $02,$07,$06,$02,$05,$05

; UDG DF - Blown up safe 2
;
; #CALL:print_udg(#PC,UDG_DF)
b$606E DEFB $03,$04,$00,$00,$A0,$02,$31,$00
 $6076 DEFB $00,$58,$00,$10,$2C,$00,$04,$14
 $607E DEFB $80,$00,$8A,$00,$00,$02,$00,$00
 $6086 DEFB $00,$00,$10,$58,$48,$02,$01,$20
 $608E DEFB $00,$11,$08,$00,$31,$00,$11,$00
 $6096 DEFB $10,$00,$02,$80,$04,$00,$40,$00
 $609E DEFB $01,$00,$00,$24,$00,$00,$04,$00
 $60A6 DEFB $11,$00,$00,$00,$04,$02,$08,$42
 $60AE DEFB $00,$00,$22,$04,$00,$80,$40,$00
 $60B6 DEFB $4A,$8A,$00,$00,$00,$00,$00,$40
 $60BE DEFB $00,$06,$80,$00,$A6,$80,$00,$4D
 $60C6 DEFB $00,$04,$4D,$00,$00,$8A,$00,$08
 $60CE DEFB $82,$00,$01,$07,$02,$02,$06,$06
 $60D6 DEFB $01,$07,$02,$02,$07,$07

; UDG E0 - Blown up safe 3
;
; #CALL:print_udg(#PC,UDG_E0)
b$60DC DEFB $03,$04,$00,$68,$00,$40,$30,$00
 $60E4 DEFB $00,$00,$00,$02,$12,$00,$20,$B1
 $60EC DEFB $00,$00,$0A,$00,$00,$02,$00,$00
 $60F4 DEFB $00,$00,$00,$20,$02,$00,$41,$2C
 $60FC DEFB $02,$00,$00,$04,$00,$00,$40,$02
 $6104 DEFB $10,$00,$40,$00,$04,$A1,$00,$00
 $610C DEFB $D0,$00,$06,$10,$20,$00,$24,$80
 $6114 DEFB $10,$4C,$00,$98,$40,$00,$30,$82
 $611C DEFB $00,$60,$22,$02,$40,$04,$00,$02
 $6124 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $612C DEFB $02,$00,$00,$09,$00,$14,$02,$00
 $6134 DEFB $02,$40,$00,$09,$00,$00,$0C,$82
 $613C DEFB $00,$04,$04,$05,$02,$04,$06,$04
 $6144 DEFB $07,$07,$02,$05,$05

; UDG E1 - Blown up safe 4
;
; #CALL:print_udg(#PC,UDG_E1)
b$6149 DEFB $03,$04,$04,$60,$90,$00,$C4,$40
 $6151 DEFB $01,$90,$20,$03,$00,$00,$02,$0A
 $6159 DEFB $40,$00,$41,$00,$00,$05,$00,$00
 $6161 DEFB $00,$00,$02,$34,$00,$00,$00,$90
 $6169 DEFB $00,$00,$00,$00,$11,$20,$00,$41
 $6171 DEFB $88,$00,$80,$C0,$01,$02,$60,$02
 $6179 DEFB $31,$30,$03,$43,$00,$A1,$80,$01
 $6181 DEFB $A0,$90,$00,$D0,$20,$00,$D2,$10
 $6189 DEFB $00,$68,$42,$00,$68,$00,$00,$34
 $6191 DEFB $04,$00,$00,$00,$00,$00,$00,$00
 $6199 DEFB $00,$00,$00,$10,$00,$00,$82,$00
 $61A1 DEFB $00,$00,$80,$00,$04,$00,$03,$46
 $61A9 DEFB $40,$02,$05,$05,$07,$04,$05,$05
 $61B1 DEFB $05,$05,$02,$02,$06

; UDG E2 - Blown up safe 5
;
; #CALL:print_udg(#PC,UDG_E2)
b$61B6 DEFB $03,$04,$00,$04,$00,$00,$22,$00
 $61BE DEFB $00,$89,$00,$00,$1C,$80,$00,$0E
 $61C6 DEFB $00,$00,$07,$00,$00,$03,$00,$00
 $61CE DEFB $01,$00,$04,$80,$40,$1A,$20,$30
 $61D6 DEFB $1D,$00,$A0,$0E,$0A,$00,$04,$50
 $61DE DEFB $20,$00,$85,$20,$00,$08,$10,$01
 $61E6 DEFB $00,$00,$00,$02,$C0,$00,$25,$80
 $61EE DEFB $00,$25,$80,$00,$35,$80,$00,$33
 $61F6 DEFB $00,$00,$51,$10,$00,$44,$10,$00
 $61FE DEFB $11,$20,$00,$00,$00,$00,$00,$00
 $6206 DEFB $00,$00,$80,$00,$01,$60,$00,$01
 $620E DEFB $60,$00,$01,$60,$00,$02,$C0,$00
 $6216 DEFB $02,$C0,$07,$07,$07,$05,$02,$07
 $621E DEFB $05,$03,$06,$05,$05,$07

; UDG E3 - Blown up safe 6
;
; ##CALL:print_udg(#PC,UDG_E3)
b$6224 DEFB $03,$04,$00,$00,$00,$00,$00,$10
 $622C DEFB $00,$20,$80,$04,$04,$00,$00,$00
 $6234 DEFB $08,$20,$41,$00,$00,$00,$00,$00
 $623C DEFB $00,$00,$04,$00,$00,$00,$08,$10
 $6244 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $624C DEFB $00,$04,$22,$08,$10,$00,$20,$00
 $6254 DEFB $00,$00,$08,$02,$00,$00,$00,$20
 $625C DEFB $00,$20,$04,$02,$00,$00,$00,$00
 $6264 DEFB $00,$10,$04,$08,$00,$00,$00,$00
 $626C DEFB $40,$00,$00,$00,$00,$00,$00,$00
 $6274 DEFB $00,$02,$00,$20,$00,$00,$01,$04
 $627C DEFB $40,$00,$20,$00,$00,$00,$10,$00
 $6284 DEFB $00,$00,$02,$01,$07,$03,$07,$07
 $628C DEFB $07,$04,$07,$02,$02,$07

; Graphic IDs for the safe blowing graphics
b$6292 DEFB $DE,$DF,$DE,$DF,$E2,$E0,$E2,$E1
 $629A DEFB $E0,$DF,$E2,$E1,$E3,$E0,$E2,$E3

; Frames until the safe door should be removed
b$62A2 DEFB $50

; Blow the safe up
;
; Used by the routine at #R$CF77.
c$62A3 LD BC,$0304   ; Size of the safe (3x4).
 $62A6 LD DE,$130A   ; Position of the safe (#N$13, #N$0A).
 $62A9 LD HL,$62A2   ; { Get the frame count. (#R$62A2)
 $62AC LD A,(HL)     ; }
 $62AD CP $50        ; It it 50 yet?
 $62AF RET Z         ; Return if so.
 $62B0 INC (HL)      ; Increase the frame count.
 $62B1 LD A,(HL)     ; { Is it 50 now?
 $62B2 CP $50        ; }
 $62B4 JP Z,$E897    ; If so, remove the safe from screen.
 $62B7 CP $40        ; Is the frame count less than #N40?
 $62B9 JR NC,$62C4   ; Jump forward if not.
; Flash the safe colours.
 $62BB AND $02       ; { Otherwise take the last two bits,
 $62BD SRL A         ; double them and add 6 to get an
 $62BF ADD A,$06     ; attribute colour. }
 $62C1 JP $E8BA      ; Fill with this attribute.
; Draw the exploding safe.
*$62C4 SUB $40       ; Decrease #REGa by #N$40.
 $62C6 PUSH BC       ; Remember #REGbc.
 $62C7 LD C,A        ; { Put this in #REGbc.
 $62C8 LD B,$00      ; }
 $62CA LD HL,$6292   ; { Add the offset to the graphic table. (#R$6292)
 $62CD ADD HL,BC     ; }
 $62CE LD A,(HL)     ; Get the graphic ID.
 $62CF CALL $F3D3    ; Get the address of the UDG.
 $62D2 POP BC        ; Restore #REGbc.
 $62D3 JP $E84E      ; Draw the UDG.

; Dan's current working graphic
g$62D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6306 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $630E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6316 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $631E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6326 DEFB $00,$00,$00,$00

; Dan's graphic addresses
;
; Used by the routine at #R$D1CE. Each sprite is 3 pixels wide and 28 lines
; long.
w$632A DEFW $633A
 $632C DEFW $638E
 $632E DEFW $63E2
 $6330 DEFW $6436
 $6332 DEFW $648A
 $6334 DEFW $64DE
 $6336 DEFW $6532
 $6338 DEFW $6586

; Dan right
;
; #CALL:print_dan(#PC,false,DanRight)
b$633A DEFB $00,$00,$00,$00,$00,$00,$00,$E0
 $6342 DEFB $00,$07,$88,$00,$0E,$F4,$00,$09
 $634A DEFB $F0,$00,$05,$A0,$00,$07,$F0,$00
 $6352 DEFB $03,$E0,$00,$03,$C0,$00,$06,$E0
 $635A DEFB $00,$0F,$00,$00,$0F,$80,$00,$0D
 $6362 DEFB $C0,$00,$0D,$C0,$00,$0C,$E0,$00
 $636A DEFB $0C,$E0,$00,$0C,$00,$00,$0D,$E0
 $6372 DEFB $00,$01,$E0,$00,$0D,$C0,$00,$03
 $637A DEFB $80,$00,$03,$00,$00,$03,$00,$00
 $6382 DEFB $03,$00,$00,$03,$C0,$00,$00,$00
 $638A DEFB $00,$00,$00,$00
; Dan right 2
@$638E DEFB $00,$00,$00,$00,$00,$00,$00,$38
 $6396 DEFB $00,$01,$E2,$00,$03,$BD,$00,$02
 $639E DEFB $7C,$00,$01,$68,$00,$01,$FC,$00
 $63A6 DEFB $00,$F8,$00,$00,$F0,$00,$01,$B8
 $63AE DEFB $00,$03,$C0,$00,$03,$E0,$00,$03
 $63B6 DEFB $70,$00,$03,$B0,$00,$03,$98,$00
 $63BE DEFB $01,$98,$00,$01,$C0,$00,$00,$18
 $63C6 DEFB $00,$00,$D0,$00,$01,$20,$00,$01
 $63CE DEFB $D0,$00,$01,$B8,$00,$03,$1D,$00
 $63D6 DEFB $03,$0E,$00,$03,$C4,$00,$00,$00
 $63DE DEFB $00,$00,$00,$00
; Dan right 3
@$63E2 DEFB $00,$00,$00,$00,$00,$00,$00,$0E
 $63EA DEFB $00,$00,$78,$80,$00,$EF,$40,$00
 $63F2 DEFB $9F,$00,$00,$5A,$00,$00,$7F,$00
 $63FA DEFB $00,$3E,$00,$00,$3C,$00,$00,$6E
 $6402 DEFB $00,$00,$F0,$00,$00,$98,$00,$00
 $640A DEFB $DC,$00,$00,$EC,$00,$00,$6E,$00
 $6412 DEFB $00,$76,$00,$00,$30,$00,$00,$4C
 $641A DEFB $00,$00,$E4,$00,$00,$F0,$00,$00
 $6422 DEFB $E8,$00,$01,$DC,$00,$01,$8E,$80
 $642A DEFB $03,$07,$00,$01,$82,$00,$00,$00
 $6432 DEFB $00,$00,$00,$00
; Dan right 4
@$6436 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $643E DEFB $80,$00,$1E,$20,$00,$3B,$D0,$00
 $6446 DEFB $27,$C0,$00,$16,$80,$00,$1F,$C0
 $644E DEFB $00,$0F,$80,$00,$0F,$00,$00,$1B
 $6456 DEFB $80,$00,$3C,$00,$00,$3E,$00,$00
 $645E DEFB $37,$00,$00,$3B,$00,$00,$39,$80
 $6466 DEFB $00,$19,$80,$00,$1C,$00,$00,$01
 $646E DEFB $80,$00,$0D,$80,$00,$11,$00,$00
 $6476 DEFB $3B,$00,$00,$73,$00,$00,$E3,$00
 $647E DEFB $00,$43,$00,$00,$23,$C0,$00,$00
 $6486 DEFB $00,$00,$00,$00

; Dan left
;
; #CALL:print_dan(#PC,true,DanLeft)
b$648A DEFB $00,$00,$00,$00,$00,$00,$01,$C0
 $6492 DEFB $00,$04,$78,$00,$0B,$DC,$00,$03
 $649A DEFB $E4,$00,$01,$68,$00,$03,$F8,$00
 $64A2 DEFB $01,$F0,$00,$00,$F0,$00,$01,$D8
 $64AA DEFB $00,$00,$3C,$00,$00,$7C,$00,$00
 $64B2 DEFB $EC,$00,$00,$DC,$00,$01,$9C,$00
 $64BA DEFB $01,$98,$00,$00,$38,$00,$01,$80
 $64C2 DEFB $00,$01,$B0,$00,$00,$88,$00,$00
 $64CA DEFB $DC,$00,$00,$CE,$00,$00,$C6,$00
 $64D2 DEFB $00,$C2,$00,$03,$C4,$00,$00,$00
 $64DA DEFB $00,$00,$00,$00
; Dan left 2
@$64DE DEFB $00,$00,$00,$00,$00,$00,$00,$70
 $64E6 DEFB $00,$01,$1E,$00,$02,$F7,$00,$00
 $64EE DEFB $F9,$00,$00,$5A,$00,$00,$FE,$00
 $64F6 DEFB $00,$7C,$00,$00,$3C,$00,$00,$76
 $64FE DEFB $00,$00,$0F,$00,$00,$19,$00,$00
 $6506 DEFB $3B,$00,$00,$37,$00,$00,$76,$00
 $650E DEFB $00,$6E,$00,$00,$0C,$00,$00,$32
 $6516 DEFB $00,$00,$27,$00,$00,$0F,$00,$00
 $651E DEFB $17,$00,$00,$3B,$80,$01,$71,$80
 $6526 DEFB $00,$E0,$C0,$00,$41,$80,$00,$00
 $652E DEFB $00,$00,$00,$00
; Dan left 3
@$6532 DEFB $00,$00,$00,$00,$00,$00,$00,$1C
 $653A DEFB $00,$00,$47,$80,$00,$BD,$C0,$00
 $6542 DEFB $3E,$40,$00,$16,$80,$00,$3F,$80
 $654A DEFB $00,$1F,$00,$00,$0F,$00,$00,$1D
 $6552 DEFB $80,$00,$03,$C0,$00,$07,$C0,$00
 $655A DEFB $0E,$C0,$00,$0D,$C0,$00,$19,$C0
 $6562 DEFB $00,$19,$80,$00,$03,$80,$00,$18
 $656A DEFB $00,$00,$0B,$00,$00,$04,$80,$00
 $6572 DEFB $0B,$80,$00,$1D,$80,$00,$B8,$C0
 $657A DEFB $00,$70,$C0,$00,$23,$C0,$00,$00
 $6582 DEFB $00,$00,$00,$00
; Dan left 4
@$6586 DEFB $00,$00,$00,$00,$00,$00,$00,$07
 $658E DEFB $00,$00,$11,$E0,$00,$2F,$70,$00
 $6596 DEFB $0F,$90,$00,$05,$A0,$00,$0F,$E0
 $659E DEFB $00,$07,$C0,$00,$03,$C0,$00,$07
 $65A6 DEFB $60,$00,$00,$F0,$00,$01,$F0,$00
 $65AE DEFB $03,$B0,$00,$03,$B0,$00,$07,$30
 $65B6 DEFB $00,$07,$30,$00,$00,$30,$00,$07
 $65BE DEFB $B0,$00,$07,$80,$00,$03,$B0,$00
 $65C6 DEFB $01,$C0,$00,$00,$C0,$00,$00,$C0
 $65CE DEFB $00,$00,$C0,$00,$03,$C0,$00,$00
 $65D6 DEFB $00,$00,$00,$00

; Food graphic offsets
;
; Used by the routine at #R$DCE8
w$65DA DEFW $65F2
 $65DC DEFW $6747
 $65DE DEFW $670F
 $65E0 DEFW $662C
 $65E2 DEFW $6606
 $65E4 DEFW $667F
 $65E6 DEFW $66EB
 $65E8 DEFW $66B7

; Food attribute tags
;
; Used by the routine at #R$DCCC. When Dan walks over an attribute for the
; relevant food item, it is picked up.
b$65EA DEFB $70,$78,$20,$70,$32,$50,$20,$28

; Food 0 - Egg
;
; #CALL:print_udg(#PC,egg)
b$65F2 DEFB $01,$02,$00,$40,$A1,$D3,$E7,$C3
 $65FA DEFB $81,$FF,$C3,$91,$A1,$20,$40,$40
 $6602 DEFB $40,$FF,$70,$78

; Food 4 - Cake
;
; #CALL:print_udg(#PC,cake)
b$6606 DEFB $02,$02,$00,$00,$00,$00,$FF,$FF
 $660E DEFB $00,$00,$00,$00,$FF,$FF,$00,$00
 $6616 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$F7
 $661E DEFB $FF,$AB,$FD,$55,$EA,$AA,$44,$44
 $6626 DEFB $FF,$FF,$32,$32,$78,$78

; Food 3 - Cheese
;
; #CALL:print_udg(#PC,cheese)
b$662C DEFB $03,$03,$80,$03,$09,$80,$03,$8B
 $6634 DEFB $C0,$03,$EB,$E0,$03,$F7,$F8,$03
 $663C DEFB $FF,$FF,$03,$FF,$FF,$FF,$FF,$FF
 $6644 DEFB $FF,$FF,$00,$02,$65,$00,$02,$19
 $664C DEFB $08,$02,$09,$07,$02,$09,$00,$FE
 $6654 DEFB $09,$00,$02,$09,$00,$02,$09,$00
 $665C DEFB $02,$09,$FF,$FF,$FF,$FF,$FF,$FF
 $6664 DEFB $FF,$00,$FF,$F8,$00,$1F,$E0,$00
 $666C DEFB $07,$C0,$00,$03,$80,$02,$03,$80
 $6674 DEFB $03,$81,$70,$70,$30,$70,$70,$30
 $667C DEFB $70,$70,$70

; Food 5 - Ice cream
;
; #CALL:print_udg(#PC,icecream)
b$667F DEFB $02,$03,$4F,$06,$30,$00,$FD,$55
 $6687 DEFB $98,$01,$CC,$03,$E2,$07,$F8,$1F
 $668F DEFB $FF,$FF,$DB,$E3,$84,$DD,$81,$82
 $6697 DEFB $82,$0C,$C2,$42,$B2,$50,$01,$80
 $669F DEFB $85,$F9,$9F,$FF,$4F,$FD,$A7,$E7
 $66A7 DEFB $53,$DB,$A9,$CB,$54,$C3,$AA,$E7
 $66AF DEFB $55,$FF,$50,$50,$78,$70,$70,$58

; Food 7 - Soup
;
; #CALL:print_udg(#PC,soup)
b$66B7 DEFB $03,$02,$88,$94,$A9,$C4,$94,$B3
 $66BF DEFB $C2,$94,$A3,$EC,$63,$27,$F0,$00
 $66C7 DEFB $0F,$FC,$00,$3F,$FF,$00,$FF,$FF
 $66CF DEFB $FF,$FF,$FF,$FF,$F8,$FF,$FF,$F1
 $66D7 DEFB $FF,$FF,$F7,$FF,$FF,$EF,$FF,$FF
 $66DF DEFB $FF,$00,$00,$00,$00,$00,$00,$86
 $66E7 DEFB $64,$B1,$00,$28

; Food 6 - Cup of tea
;
; #CALL:print_udg(#PC,tea)
b$66EB DEFB $02,$02,$E0,$0B,$F0,$17,$90,$17
 $66F3 DEFB $98,$2F,$FF,$FF,$80,$01,$F0,$0F
 $66FB DEFB $FF,$FF,$FF,$F8,$FF,$F1,$FF,$F3
 $6703 DEFB $FF,$E7,$FF,$FF,$C0,$05,$C0,$05
 $670B DEFB $E0,$0B,$00,$20

; Food 2 - Fruit bowl
;
; #CALL:print_udg(#PC,fruit)
b$670F DEFB $03,$02,$FF,$FF,$FF,$AA,$AA,$AA
 $6717 DEFB $D5,$55,$55,$EA,$AA,$AB,$F5,$55
 $671F DEFB $57,$FA,$AA,$AF,$FD,$55,$5F,$FF
 $6727 DEFB $FF,$FF,$F9,$5E,$FC,$E3,$E9,$67
 $672F DEFB $CC,$99,$41,$99,$A7,$B1,$B1,$64
 $6737 DEFB $99,$33,$9C,$99,$67,$93,$9B,$6F
 $673F DEFB $72,$3F,$20,$20,$20,$30,$58,$50

; Food 1 - Martini
;
; #CALL:print_udg(#PC,martini)
b$6747 DEFB $02,$03,$FF,$7F,$FF,$7F,$FF,$7F
 $674F DEFB $FF,$7F,$FF,$7F,$FF,$7F,$F0,$07
 $6757 DEFB $FF,$FF,$80,$00,$DF,$DD,$EF,$DB
 $675F DEFB $F0,$07,$F8,$0F,$FC,$1F,$FE,$3F
 $6767 DEFB $FF,$7F,$00,$F9,$00,$F9,$00,$FB
 $676F DEFB $00,$F7,$00,$F7,$00,$F7,$00,$EF
 $6777 DEFB $00,$EF,$78,$78,$78,$78,$45,$50

; Character set (6-high)
; Character set (6-high)
b$677F DEFB $3C,$72,$72,$72,$72,$3C ; #CALL:print_char($00,char_00)
 $6785 DEFB $1C,$3C,$1C,$1C,$1C,$3E ; #CALL:print_char($01,char_01)
 $678B DEFB $3C,$4E,$0E,$3C,$60,$7E ; #CALL:print_char($02,char_02)
 $6791 DEFB $3C,$4E,$1C,$0E,$4E,$3C ; #CALL:print_char($03,char_03)
 $6797 DEFB $0C,$1C,$2C,$4C,$7E,$0C ; #CALL:print_char($04,char_04)
 $679D DEFB $7E,$60,$7C,$0E,$4E,$3C ; #CALL:print_char($05,char_05)
 $67A3 DEFB $3C,$70,$7C,$72,$72,$3C ; #CALL:print_char($06,char_06)
 $67A9 DEFB $7E,$0E,$1C,$38,$30,$30 ; #CALL:print_char($07,char_07)
 $67AF DEFB $3C,$72,$3C,$72,$72,$3C ; #CALL:print_char($08,char_08)
 $67B5 DEFB $3C,$4E,$4E,$3E,$0E,$3C ; #CALL:print_char($09,char_09)
 $67BB DEFB $3C,$72,$72,$7E,$72,$72 ; #CALL:print_char($0A,char_0A)
 $67C1 DEFB $7C,$72,$7C,$72,$72,$7C ; #CALL:print_char($0B,char_0B)
 $67C7 DEFB $3C,$72,$70,$70,$72,$3C ; #CALL:print_char($0C,char_0C)
 $67CD DEFB $7C,$72,$72,$72,$72,$7C ; #CALL:print_char($0D,char_0D)
 $67D3 DEFB $7E,$70,$7C,$70,$70,$7E ; #CALL:print_char($0E,char_0E)
 $67D9 DEFB $7E,$70,$7C,$70,$70,$70 ; #CALL:print_char($0F,char_0F)
 $67DF DEFB $3C,$72,$70,$76,$72,$3C ; #CALL:print_char($10,char_10)
 $67E5 DEFB $72,$72,$7E,$72,$72,$72 ; #CALL:print_char($11,char_11)
 $67EB DEFB $3E,$1C,$1C,$1C,$1C,$3E ; #CALL:print_char($12,char_12)
 $67F1 DEFB $0E,$0E,$0E,$4E,$4E,$3C ; #CALL:print_char($13,char_13)
 $67F7 DEFB $72,$74,$78,$78,$74,$72 ; #CALL:print_char($14,char_14)
 $67FD DEFB $70,$70,$70,$70,$70,$7E ; #CALL:print_char($15,char_15)
 $6803 DEFB $42,$66,$7A,$62,$62,$62 ; #CALL:print_char($16,char_16)
 $6809 DEFB $42,$62,$72,$7A,$76,$72 ; #CALL:print_char($17,char_17)
 $680F DEFB $7C,$72,$72,$7C,$70,$70 ; #CALL:print_char($18,char_18)
 $6815 DEFB $3C,$62,$62,$6A,$64,$3A ; #CALL:print_char($19,char_19)
 $681B DEFB $7C,$72,$72,$7C,$74,$72 ; #CALL:print_char($1A,char_1A)
 $6821 DEFB $3C,$70,$3C,$0E,$4E,$3C ; #CALL:print_char($1B,char_1B)
 $6827 DEFB $7C,$38,$38,$38,$38,$38 ; #CALL:print_char($1C,char_1C)
 $682D DEFB $72,$72,$72,$72,$72,$3C ; #CALL:print_char($1D,char_1D)
 $6833 DEFB $72,$72,$72,$72,$34,$18 ; #CALL:print_char($1E,char_1E)
 $6839 DEFB $62,$62,$6A,$6A,$7E,$24 ; #CALL:print_char($1F,char_1F)
 $683F DEFB $62,$74,$38,$1C,$2E,$46 ; #CALL:print_char($20,char_20)
 $6845 DEFB $42,$24,$38,$38,$38,$38 ; #CALL:print_char($21,char_21)
 $684B DEFB $7E,$0E,$1C,$38,$70,$7E ; #CALL:print_char($22,char_22)
 $6851 DEFB $00,$30,$30,$00,$30,$30 ; #CALL:print_char($23,char_23)
 $6857 DEFB $6C,$6C,$24,$48,$00,$00 ; #CALL:print_char($24,char_24)
 $685D DEFB $36,$36,$24,$12,$00,$00 ; #CALL:print_char($25,char_25)
 $6863 DEFB $00,$00,$00,$00,$18,$18 ; #CALL:print_char($26,char_26)
 $6869 DEFB $00,$00,$00,$00,$00,$00 ; #CALL:print_char($27,char_27)
 $686F DEFB $30,$30,$30,$00,$30,$30 ; #CALL:print_char($28,char_28)
 $6875 DEFB $30,$48,$18,$30,$00,$30 ; #CALL:print_char($29,char_29)
 $687B DEFB $18,$18,$08,$10,$00,$00 ; #CALL:print_char($2A,char_2A)
 $6881 DEFB $00,$00,$30,$30,$10,$20 ; #CALL:print_char($2B,char_2B)
 $6887 DEFB $00,$3C,$3C,$00,$3C,$3C ; #CALL:print_char($2C,char_2C)
 $688D DEFB $0C,$0C,$18,$18,$30,$30 ; #CALL:print_char($2D,char_2D)
 $6893 DEFB $00,$00,$3C,$3C,$00,$00 ; #CALL:print_char($2E,char_2E)

; Raft graphics
;
; Used by the routine at #R$D9EC
;
; .
;
; #UDGARRAY1,7($6899-$6911-8)(raft)
b$6899 DEFB $00,$03,$00,$03,$03,$00,$01,$01
 $68A1 DEFB $AA,$FF,$03,$03,$70,$88,$3D,$69
 $68A9 DEFB $AA,$FF,$00,$06,$76,$88,$3D,$69
 $68B1 DEFB $A8,$FC,$00,$0C,$6C,$90,$38,$48
 $68B9 DEFB $05,$0F,$00,$0C,$0D,$02,$04,$05
 $68C1 DEFB $55,$FF,$00,$18,$D9,$22,$F4,$55
 $68C9 DEFB $55,$FF,$00,$18,$DB,$04,$C9,$6A
 $68D1 DEFB $40,$F0,$00,$60,$60,$00,$C0,$80
 $68D9 DEFB $3F,$00,$30,$37,$08,$13,$17,$0A
 $68E1 DEFB $FF,$00,$30,$37,$88,$D3,$D7,$95
 $68E9 DEFB $FF,$00,$60,$66,$89,$D3,$D7,$4A
 $68F1 DEFB $C0,$00,$C0,$C0,$00,$80,$80,$80
 $68F9 DEFB $FF,$00,$61,$6D,$12,$27,$2F,$2A
 $6901 DEFB $FF,$00,$81,$9D,$22,$4F,$5F,$55
 $6909 DEFB $FF,$00,$83,$9B,$24,$4E,$5E,$2A
 $6911 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Pitch frequences for musical notes
w$6919 DEFW $0AFF
 $691B DEFW $0BF0
 $691D DEFW $0CE3
 $691F DEFW $0CD6
 $6921 DEFW $0DCA
 $6923 DEFW $0EBE
 $6925 DEFW $0FB3
 $6927 DEFW $10A9
 $6929 DEFW $119F
 $692B DEFW $1296
 $692D DEFW $138E
 $692F DEFW $1486
 $6931 DEFW $157E
 $6933 DEFW $1677
 $6935 DEFW $1770
 $6937 DEFW $196A
 $6939 DEFW $1A64
 $693B DEFW $1C5E
 $693D DEFW $1E58
 $693F DEFW $1F53
 $6941 DEFW $214E
 $6943 DEFW $234A
 $6945 DEFW $2546
 $6947 DEFW $2742
 $6949 DEFW $2A3E
 $694B DEFW $2C3A
 $694D DEFW $2F37
 $694F DEFW $3134
 $6951 DEFW $3530
 $6953 DEFW $372E
 $6955 DEFW $3B2B
 $6957 DEFW $3F28
 $6959 DEFW $4226
 $695B DEFW $4624
 $695D DEFW $4922
 $695F DEFW $501F
 $6961 DEFW $531E
 $6963 DEFW $581C
 $6965 DEFW $5E1A
 $6967 DEFW $6518
 $6969 DEFW $6917
 $696B DEFW $6D16
 $696D DEFW $7714
 $696F DEFW $7D13
 $6971 DEFW $8312
 $6973 DEFW $8911
 $6975 DEFW $990F
 $6977 DEFW $A20E
 $6979 DEFW $A20E
 $697B DEFW $A20E
 $697D DEFW $AD0D
 $697F DEFW $B80C
 $6981 DEFW $C60B
 $6983 DEFW $D60A

; River graphics
;
; #UDGARRAY1,15($6985-$69DD-8)(river)
b$6985 DEFB $82,$12,$00,$20,$81,$06,$48,$01
 $698D DEFB $80,$02,$0C,$B0,$03,$01,$06,$C0
 $6995 DEFB $0D,$04,$90,$83,$48,$1A,$02,$82
 $699D DEFB $04,$68,$30,$21,$09,$08,$40,$5B
 $69A5 DEFB $50,$01,$02,$00,$20,$E1,$10,$10
 $69AD DEFB $14,$80,$3C,$06,$20,$50,$09,$00
 $69B5 DEFB $4C,$04,$00,$10,$90,$44,$06,$48
 $69BD DEFB $80,$10,$10,$C1,$01,$00,$00,$41
 $69C5 DEFB $10,$06,$A0,$6C,$20,$1B,$18,$10
 $69CD DEFB $08,$68,$21,$86,$A6,$0A,$01,$86
 $69D5 DEFB $01,$00,$42,$00,$04,$20,$E1,$03
 $69DD DEFB $16,$00,$06,$18,$40,$24,$20,$38
 $69E5 DEFB $00

; Room data offsets
;
; Used by the routine at #R$CBBD
b$69E6 DEFB $5F,$6E,$07,$02,$15,$08,$08,$A7,$9C,$0F,$17,$00
 $69F2 DEFB $90,$6E,$05,$18,$13,$07,$0B,$ED,$9C,$0D,$11,$00
 $69FE DEFB $DC,$6E,$09,$08,$01,$0D,$17,$23,$9D,$0F,$11,$00
 $6A0A DEFB $34,$6F,$0D,$19,$00,$0A,$11,$61,$9D,$03,$06,$00
 $6A16 DEFB $77,$6F,$10,$15,$04,$0C,$0D,$B7,$9D,$03,$16,$00
 $6A22 DEFB $C6,$6F,$0E,$1D,$05,$0C,$1B,$F5,$9D,$0F,$0B,$00
 $6A2E DEFB $2A,$70,$05,$0B,$41,$0B,$17,$2B,$9E,$0C,$11,$00
 $6A3A DEFB $94,$70,$04,$05,$07,$0F,$08,$79,$9E,$0F,$0C,$00
 $6A46 DEFB $B9,$70,$0D,$08,$00,$0B,$03,$BF,$9E,$10,$17,$00
 $6A52 DEFB $0E,$71,$0B,$18,$01,$11,$1A,$F5,$9E,$0B,$10,$00
 $6A5E DEFB $90,$71,$05,$02,$04,$11,$16,$3B,$9F,$0C,$09,$00
 $6A6A DEFB $F4,$71,$0E,$15,$07,$10,$0C,$81,$9F,$09,$1C,$00
 $6A76 DEFB $52,$72,$0C,$17,$03,$05,$06,$CF,$9F,$0E,$05,$00
 $6A82 DEFB $E9,$72,$0C,$05,$06,$0C,$15,$0D,$A0,$0E,$14,$00
 $6A8E DEFB $62,$73,$0C,$14,$40,$08,$0D,$53,$A0,$10,$0D,$00
 $6A9A DEFB $02,$74,$08,$0E,$44,$0B,$1A,$A1,$A0,$0E,$09,$00
 $6AA6 DEFB $72,$74,$10,$08,$06,$06,$16,$DF,$A0,$10,$17,$00
 $6AB2 DEFB $E5,$74,$10,$12,$83,$12,$02,$2D,$A1,$07,$16,$00
 $6ABE DEFB $31,$75,$0E,$18,$02,$09,$0B,$6B,$A1,$05,$18,$00
 $6ACA DEFB $A7,$75,$05,$02,$C0,$12,$02,$A9,$A1,$12,$0B,$00
 $6AD6 DEFB $26,$76,$0C,$1A,$01,$05,$0A,$F7,$A1,$12,$05,$00
 $6AE2 DEFB $A2,$76,$0E,$07,$00,$0D,$1B,$2D,$A2,$0C,$16,$00
 $6AEE DEFB $33,$77,$08,$1B,$05,$06,$06,$73,$A2,$11,$18,$00
 $6AFA DEFB $CD,$77,$12,$07,$02,$11,$09,$B9,$A2,$0F,$15,$00
 $6B06 DEFB $2E,$78,$08,$0F,$00,$10,$1B,$07,$A3,$03,$03,$00
 $6B12 DEFB $C5,$78,$0A,$09,$80,$0A,$18,$45,$A3,$06,$18,$00
 $6B1E DEFB $F6,$78,$04,$02,$C7,$0A,$02,$9B,$A3,$11,$1A,$00
 $6B2A DEFB $5D,$79,$11,$02,$40,$0F,$17,$E9,$A3,$03,$1A,$00
 $6B36 DEFB $18,$7A,$12,$15,$46,$0A,$0F,$37,$A4,$08,$07,$00
 $6B42 DEFB $46,$7A,$0F,$17,$40,$08,$08,$8D,$A4,$03,$04,$00
 $6B4E DEFB $C8,$7A,$04,$07,$03,$10,$1B,$E3,$A4,$0D,$0F,$00
 $6B5A DEFB $3E,$7B,$08,$19,$07,$0F,$0D,$31,$A5,$04,$0E,$00
 $6B66 DEFB $93,$7B,$08,$08,$02,$06,$1B,$77,$A5,$0D,$19,$00
 $6B72 DEFB $45,$7C,$05,$02,$05,$05,$0C,$B5,$A5,$08,$0B,$00
 $6B7E DEFB $6D,$7C,$06,$02,$C6,$06,$1C,$F3,$A5,$0C,$0F,$00
 $6B8A DEFB $BF,$7C,$11,$1C,$00,$05,$16,$41,$A6,$10,$02,$00
 $6B96 DEFB $50,$7D,$06,$1B,$02,$0F,$0C,$97,$A6,$01,$02,$00
 $6BA2 DEFB $DB,$7D,$0C,$0B,$C3,$0E,$19,$D5,$A6,$08,$15,$00
 $6BAE DEFB $63,$7E,$04,$0F,$C0,$05,$04,$1B,$A7,$0E,$0D,$00
 $6BBA DEFB $C7,$7E,$12,$14,$00,$05,$06,$61,$A7,$07,$1C,$00
 $6BC6 DEFB $3D,$7F,$10,$19,$80,$10,$13,$9F,$A7,$10,$05,$00
 $6BD2 DEFB $89,$7F,$0A,$1B,$80,$0A,$0A,$ED,$A7,$0A,$05,$00
 $6BDE DEFB $96,$7F,$03,$15,$C1,$0A,$02,$2B,$A8,$10,$18,$00
 $6BEA DEFB $30,$80,$10,$03,$85,$10,$12,$71,$A8,$10,$0D,$00
 $6BF6 DEFB $AC,$80,$10,$17,$00,$10,$0D,$B7,$A8,$10,$03,$00
 $6C02 DEFB $D7,$80,$10,$18,$41,$06,$02,$FD,$A8,$0B,$06,$00
 $6C0E DEFB $35,$81,$03,$02,$C6,$06,$14,$3B,$A9,$06,$08,$00
 $6C1A DEFB $75,$81,$08,$0F,$C5,$10,$0D,$89,$A9,$02,$16,$00

; Attributes marking walls
;
; Used by the routine at #R$CBBD
; .
; Each data set is 8 bytes long. The choice is stored in bits 6+7 of offset 4
; in the current room's store
b$6C26 DEFB $0E,$17,$04,$06,$07,$10,$0E,$17
 $6C2E DEFB $10,$2A,$04,$06,$07,$10,$2A,$17
 $6C36 DEFB $2A,$17,$03,$04,$05,$07,$2A,$17
 $6C3E DEFB $10,$17,$03,$06,$07,$10,$2A,$17

; UDG offsets
;
; Used by the routines at #R$ED06 and #R$F3D3.
;
; .
;
; This table contains a series of addresses where graphics are held.
w$6C46 DEFW $8B2C
 $6C48 DEFW $8B48
 $6C4A DEFW $8C1B
 $6C4C DEFW $8C53
 $6C4E DEFW $8BEC
 $6C50 DEFW $8C87
 $6C52 DEFW $8CA4
 $6C54 DEFW $8CB8
 $6C56 DEFW $8CC3
 $6C58 DEFW $8CCE
 $6C5A DEFW $8CEA
 $6C5C DEFW $8D0E
 $6C5E DEFW $8D32
 $6C60 DEFW $8D46
 $6C62 DEFW $8D51
 $6C64 DEFW $925B
 $6C66 DEFW $8A95
 $6C68 DEFW $8AD9
 $6C6A DEFW $8D5C
 $6C6C DEFW $83C9
 $6C6E DEFW $AA92
 $6C70 DEFW $8DCA
 $6C72 DEFW $99FA
 $6C74 DEFW $8E5E
 $6C76 DEFW $8EC2
 $6C78 DEFW $839D
 $6C7A DEFW $8F15
 $6C7C DEFW $8F20
 $6C7E DEFW $8F34
 $6C80 DEFW $8F48
 $6C82 DEFW $8F53
 $6C84 DEFW $8F77
 $6C86 DEFW $8F8B
 $6C88 DEFW $8FA7
 $6C8A DEFW $8FFB
 $6C8C DEFW $9047
 $6C8E DEFW $905B
 $6C90 DEFW $907F
 $6C92 DEFW $908A
 $6C94 DEFW $9095
 $6C96 DEFW $90A0
 $6C98 DEFW $90B4
 $6C9A DEFW $90BF
 $6C9C DEFW $90E3
 $6C9E DEFW $90F7
 $6CA0 DEFW $910B
 $6CA2 DEFW $81DB
 $6CA4 DEFW $9AC4
 $6CA6 DEFW $9AD8
 $6CA8 DEFW $9AEC
 $6CAA DEFW $9B24
 $6CAC DEFW $9B2F
 $6CAE DEFW $9C09
 $6CB0 DEFW $9C14
 $6CB2 DEFW $9C1F
 $6CB4 DEFW $9C53
 $6CB6 DEFW $9C67
 $6CB8 DEFW $9C83
 $6CBA DEFW $A9F5
 $6CBC DEFW $AA87
 $6CBE DEFW $83DD
 $6CC0 DEFW $8421
 $6CC2 DEFW $8435
 $6CC4 DEFW $845B
 $6CC6 DEFW $8481
 $6CC8 DEFW $848C
 $6CCA DEFW $F6AA
 $6CCC DEFW $8497
 $6CCE DEFW $84BB
 $6CD0 DEFW $84D7
 $6CD2 DEFW $84F3
 $6CD4 DEFW $84FE
 $6CD6 DEFW $8509
 $6CD8 DEFW $851D
 $6CDA DEFW $8555
 $6CDC DEFW $8571
 $6CDE DEFW $85B5
 $6CE0 DEFW $85D1
 $6CE2 DEFW $8605
 $6CE4 DEFW $8629
 $6CE6 DEFW $864D
 $6CE8 DEFW $8661
 $6CEA DEFW $868D
 $6CEC DEFW $86D5
 $6CEE DEFW $86E9
 $6CF0 DEFW $86F4
 $6CF2 DEFW $86FF
 $6CF4 DEFW $8713
 $6CF6 DEFW $871E
 $6CF8 DEFW $8729
 $6CFA DEFW $8734
 $6CFC DEFW $873F
 $6CFE DEFW $874A
 $6D00 DEFW $876E
 $6D02 DEFW $8852
 $6D04 DEFW $8782
 $6D06 DEFW $878D
 $6D08 DEFW $8798
 $6D0A DEFW $97A3
 $6D0C DEFW $97B7
 $6D0E DEFW $97CB
 $6D10 DEFW $97F3
 $6D12 DEFW $97FE
 $6D14 DEFW $9809
 $6D16 DEFW $9814
 $6D18 DEFW $981F
 $6D1A DEFW $9873
 $6D1C DEFW $9899
 $6D1E DEFW $98AD
 $6D20 DEFW $98C1
 $6D22 DEFW $98D5
 $6D24 DEFW $98FB
 $6D26 DEFW $9906
 $6D28 DEFW $991A
 $6D2A DEFW $9925
 $6D2C DEFW $9930
 $6D2E DEFW $993B
 $6D30 DEFW $9946
 $6D32 DEFW $9951
 $6D34 DEFW $995C
 $6D36 DEFW $9967
 $6D38 DEFW $ACCB
 $6D3A DEFW $ACC0
 $6D3C DEFW $9972
 $6D3E DEFW $9986
 $6D40 DEFW $99AA
 $6D42 DEFW $99CE
 $6D44 DEFW $99D9
 $6D46 DEFW $99E4
 $6D48 DEFW $99EF
 $6D4A DEFW $8203
 $6D4C DEFW $820E
 $6D4E DEFW $8219
 $6D50 DEFW $822D
 $6D52 DEFW $8249
 $6D54 DEFW $825D
 $6D56 DEFW $8279
 $6D58 DEFW $82B1
 $6D5A DEFW $82BC
 $6D5C DEFW $82C7
 $6D5E DEFW $82E3
 $6D60 DEFW $82FF
 $6D62 DEFW $8323
 $6D64 DEFW $8347
 $6D66 DEFW $8363
 $6D68 DEFW $836E
 $6D6A DEFW $8392
 $6D6C DEFW $828D
 $6D6E DEFW $86B1
 $6D70 DEFW $81EF
 $6D72 DEFW $97DF
 $6D74 DEFW $AB26
 $6D76 DEFW $AB8A
 $6D78 DEFW $8A15
 $6D7A DEFW $8A20
 $6D7C DEFW $8A34
 $6D7E DEFW $8A50
 $6D80 DEFW $8A76
 $6D82 DEFW $8A8A
 $6D84 DEFW $9AB0
 $6D86 DEFW $ABAE
 $6D88 DEFW $ABE2
 $6D8A DEFW $ABF6
 $6D8C DEFW $AC12
 $6D8E DEFW $AC36
 $6D90 DEFW $AC4A
 $6D92 DEFW $AC5E
 $6D94 DEFW $ACAA
 $6D96 DEFW $ACB5
 $6D98 DEFW $87AE
 $6D9A DEFW $87A3
 $6D9C DEFW $881E
 $6D9E DEFW $87E6
 $6DA0 DEFW $919F
 $6DA2 DEFW $91C3
 $6DA4 DEFW $91D7
 $6DA6 DEFW $9278
 $6DA8 DEFW $928C
 $6DAA DEFW $92A0
 $6DAC DEFW $977F
 $6DAE DEFW $F72E
 $6DB0 DEFW $8886
 $6DB2 DEFW $88CA
 $6DB4 DEFW $92B4
 $6DB6 DEFW $938E
 $6DB8 DEFW $93E1
 $6DBA DEFW $9434
 $6DBC DEFW $9487
 $6DBE DEFW $9492
 $6DC0 DEFW $949D
 $6DC2 DEFW $94A8
 $6DC4 DEFW $88D5
 $6DC6 DEFW $AD81
 $6DC8 DEFW $8943
 $6DCA DEFW $ADE5
 $6DCC DEFW $F7ED
 $6DCE DEFW $8969
 $6DD0 DEFW $F5E6
 $6DD2 DEFW $9582
 $6DD4 DEFW $95A6
 $6DD6 DEFW $9750
 $6DD8 DEFW $96F0
 $6DDA DEFW $9745
 $6DDC DEFW $89C7
 $6DDE DEFW $89ED
 $6DE0 DEFW $8A01
 $6DE2 DEFW $89B3
 $6DE4 DEFW $954A
 $6DE6 DEFW $9536
 $6DE8 DEFW $94B3
 $6DEA DEFW $94BE
 $6DEC DEFW $9502
 $6DEE DEFW $A9CF
 $6DF0 DEFW $95CA
 $6DF2 DEFW $95F0
 $6DF4 DEFW $9634
 $6DF6 DEFW $9648
 $6DF8 DEFW $965C
 $6DFA DEFW $9694
 $6DFC DEFW $96CC
 $6DFE DEFW $970D
 $6E00 DEFW $81D0
 $6E02 DEFW $6000
 $6E04 DEFW $606E
 $6E06 DEFW $60DC
 $6E08 DEFW $6149
 $6E0A DEFW $61B6
 $6E0C DEFW $6224

; "Blown the safe door" tune
b$6E0E DEFB $01,$04,$07,$0A,$03,$06,$09,$0C
 $6E16 DEFB $05,$08,$0B,$0E,$07,$0A,$0D,$11
 $6E1E DEFB $09,$0C,$0F,$13,$0B,$0E,$11,$15
 $6E26 DEFB $0D,$10,$13,$17,$0F,$12,$15,$19
 $6E2E DEFB $11,$14,$17,$1B,$13,$16,$19,$1D
 $6E36 DEFB $15,$18,$1B,$1F,$17,$1A,$1D,$21
 $6E3E DEFB $19,$1C,$1F,$23,$1B,$1E,$21,$25
 $6E46 DEFB $1D,$20,$23,$27,$1F,$22,$25,$29
 $6E4E DEFB $2C,$29,$26,$23,$20,$1D,$1A,$17
 $6E56 DEFB $14,$11,$10,$0D,$0A,$07,$04,$01
 $6E5E DEFB $FF

; Room 00
b$6E5F DEFB $06,$17,$17,$02,$17,$11,$0E,$16
 $6E67 DEFB $16,$0A,$08,$39,$FC,$07,$02,$0A
 $6E6F DEFB $1A,$1A,$FE,$01,$06,$08,$00,$55
 $6E77 DEFB $FE,$01,$03,$0E,$00,$55,$FE,$01
 $6E7F DEFB $04,$02,$00,$42,$02,$07,$C1,$02
 $6E87 DEFB $0C,$39,$02,$14,$39,$11,$06,$3F
 $6E8F DEFB $FF

; Room 01
b$6E90 DEFB $02,$00,$42,$FE,$08,$04,$02,$14
 $6E98 DEFB $6C,$01,$14,$6C,$0E,$00,$55,$FE
 $6EA0 DEFB $01,$20,$08,$00,$55,$FE,$01,$20
 $6EA8 DEFB $02,$12,$50,$FD,$01,$03,$02,$16
 $6EB0 DEFB $50,$FD,$01,$03,$06,$10,$64,$06
 $6EB8 DEFB $1C,$64,$05,$10,$63,$FD,$01,$06
 $6EC0 DEFB $05,$1C,$63,$FD,$01,$06,$08,$02
 $6EC8 DEFB $6C,$FE,$06,$05,$0E,$02,$6C,$FE
 $6ED0 DEFB $06,$05,$02,$18,$6C,$01,$18,$6C
 $6ED8 DEFB $06,$18,$40,$FF

; Room 02
b$6EDC DEFB $08,$09,$1B,$FC,$01,$07,$02,$00
 $6EE4 DEFB $42,$FE,$08,$04,$02,$10,$6C,$FD
 $6EEC DEFB $01,$02,$0E,$10,$55,$FE,$01,$10
 $6EF4 DEFB $0E,$14,$6C,$FE,$06,$02,$08,$10
 $6EFC DEFB $55,$FE,$01,$10,$08,$14,$6C,$FE
 $6F04 DEFB $06,$02,$06,$12,$96,$FD,$01,$05
 $6F0C DEFB $01,$12,$6C,$00,$1B,$5D,$10,$00
 $6F14 DEFB $60,$FE,$01,$07,$0B,$00,$60,$FE
 $6F1C DEFB $01,$07,$10,$07,$61,$FD,$05,$02
 $6F24 DEFB $07,$00,$60,$FE,$01,$09,$07,$03
 $6F2C DEFB $6C,$03,$00,$A4,$03,$0A,$A5,$FF

; Room 03
b$6F34 DEFB $02,$02,$42,$FE,$08,$02,$02,$0D
 $6F3C DEFB $42,$FE,$0B,$02,$00,$0C,$4C,$02
 $6F44 DEFB $01,$27,$FD,$01,$03,$02,$03,$29
 $6F4C DEFB $FD,$01,$03,$0E,$00,$0A,$07,$08
 $6F54 DEFB $60,$FE,$01,$18,$0B,$08,$60,$FE
 $6F5C DEFB $01,$18,$10,$08,$60,$FE,$01,$18
 $6F64 DEFB $07,$0B,$6C,$FE,$07,$03,$10,$07
 $6F6C DEFB $5F,$0B,$07,$5F,$07,$07,$5F,$03
 $6F74 DEFB $1E,$A4,$FF

; Room 04
b$6F77 DEFB $0E,$06,$42,$FE,$08,$03,$07,$05
 $6F7F DEFB $55,$FE,$01,$16,$0E,$04,$0B,$0E
 $6F87 DEFB $0B,$29,$FD,$01,$0F,$0B,$0F,$96
 $6F8F DEFB $FD,$01,$05,$02,$00,$28,$FD,$01
 $6F97 DEFB $03,$02,$06,$28,$FE,$02,$02,$01
 $6F9F DEFB $09,$27,$FD,$01,$02,$02,$16,$28
 $6FA7 DEFB $FD,$01,$03,$02,$1A,$28,$FD,$01
 $6FAF DEFB $02,$02,$1F,$27,$FD,$01,$03,$05
 $6FB7 DEFB $18,$96,$FD,$01,$05,$0E,$1E,$0A
 $6FBF DEFB $10,$16,$96,$FD,$01,$04,$FF

; Room 05
b$6FC6 DEFB $0C,$00,$1B,$FC,$01,$02,$0E,$00
 $6FCE DEFB $42,$FE,$07,$04,$0E,$1B,$0A,$02
 $6FD6 DEFB $12,$2C,$FD,$01,$03,$02,$0D,$2B
 $6FDE DEFB $FD,$01,$03,$02,$1E,$28,$FD,$01
 $6FE6 DEFB $03,$03,$0D,$48,$FE,$05,$02,$0C
 $6FEE DEFB $09,$58,$FB,$01,$04,$09,$14,$5A
 $6FF6 DEFB $FC,$01,$04,$0C,$0A,$57,$FE,$01
 $6FFE DEFB $0D,$0B,$0B,$57,$FE,$01,$0B,$0A
 $7006 DEFB $0C,$57,$FE,$01,$09,$09,$0D,$57
 $700E DEFB $FE,$01,$07,$0E,$0F,$6C,$FD,$01
 $7016 DEFB $06,$0E,$10,$6C,$FD,$01,$06,$10
 $701E DEFB $06,$96,$FD,$01,$04,$01,$14,$A4
 $7026 DEFB $01,$1C,$A5,$FF

; Room 06
b$702A DEFB $0B,$1D,$1B,$FC,$01,$03,$0E,$18
 $7032 DEFB $42,$0E,$18,$09,$FE,$01,$03,$0A
 $703A DEFB $00,$1A,$FE,$01,$13,$06,$00,$41
 $7042 DEFB $FD,$01,$07,$06,$07,$41,$FD,$01
 $704A DEFB $07,$06,$0A,$41,$FD,$01,$07,$06
 $7052 DEFB $11,$41,$FD,$01,$07,$06,$14,$41
 $705A DEFB $FD,$01,$07,$06,$1B,$41,$FD,$01
 $7062 DEFB $07,$0E,$13,$70,$FD,$01,$05,$0E
 $706A DEFB $1B,$70,$FD,$01,$05,$0E,$11,$0B
 $7072 DEFB $08,$06,$40,$08,$10,$40,$06,$01
 $707A DEFB $40,$06,$0B,$40,$06,$18,$40,$01
 $7082 DEFB $16,$40,$02,$04,$40,$04,$05,$40
 $708A DEFB $04,$10,$40,$02,$0E,$40,$0D,$17
 $7092 DEFB $3F,$FF

; Room 07
b$7094 DEFB $0A,$00,$1A,$FE,$01,$20,$02,$09
 $709C DEFB $B4,$FE,$07,$03,$06,$06,$15,$02
 $70A4 DEFB $06,$18,$11,$07,$3A,$06,$1E,$41
 $70AC DEFB $FD,$01,$07,$04,$03,$13,$05,$03
 $70B4 DEFB $B3,$06,$1C,$CF,$FF

; Room 08
b$70B9 DEFB $00,$09,$57,$FE,$01,$0D,$00,$08
 $70C1 DEFB $58,$01,$07,$59,$01,$08,$5C,$FE
 $70C9 DEFB $04,$04,$05,$00,$42,$FE,$08,$03
 $70D1 DEFB $02,$00,$51,$FE,$05,$05,$02,$15
 $70D9 DEFB $12,$03,$00,$10,$FE,$08,$03,$0C
 $70E1 DEFB $16,$17,$13,$0C,$39,$13,$14,$39
 $70E9 DEFB $13,$17,$11,$02,$1E,$3F,$08,$16
 $70F1 DEFB $14,$10,$1E,$3E,$07,$12,$9F,$FE
 $70F9 DEFB $01,$04,$0C,$12,$C6,$0C,$0D,$40
 $7101 DEFB $13,$00,$42,$0D,$00,$42,$13,$07
 $7109 DEFB $C1,$0D,$06,$C1,$FF

; Room 09
b$710E DEFB $02,$02,$51,$FE,$05,$06,$03,$00
 $7116 DEFB $10,$FE,$08,$04,$05,$00,$42,$FE
 $711E DEFB $08,$04,$0D,$00,$42,$FE,$08,$04
 $7126 DEFB $13,$00,$42,$FE,$08,$04,$13,$14
 $712E DEFB $6C,$FD,$01,$12,$0C,$00,$94,$07
 $7136 DEFB $00,$52,$05,$00,$52,$0E,$00,$52
 $713E DEFB $03,$00,$94,$00,$06,$5D,$01,$07
 $7146 DEFB $5D,$13,$12,$50,$FD,$01,$09,$07
 $714E DEFB $12,$50,$FD,$01,$08,$13,$16,$50
 $7156 DEFB $FD,$01,$0B,$05,$16,$50,$FD,$01
 $715E DEFB $06,$13,$10,$63,$FD,$01,$03,$13
 $7166 DEFB $1C,$63,$FD,$01,$03,$10,$10,$62
 $716E DEFB $10,$1C,$62,$01,$1A,$4C,$0C,$04
 $7176 DEFB $6C,$FE,$05,$03,$0D,$04,$6C,$FE
 $717E DEFB $05,$03,$06,$02,$A4,$06,$10,$A5
 $7186 DEFB $13,$18,$6C,$FD,$01,$03,$0F,$11
 $718E DEFB $56,$FF

; Room 0A
b$7190 DEFB $13,$00,$42,$FE,$08,$04,$13,$10
 $7198 DEFB $6C,$FD,$01,$02,$12,$12,$6C,$13
 $71A0 DEFB $12,$96,$0C,$15,$2E,$FC,$01,$06
 $71A8 DEFB $0B,$02,$7A,$FE,$01,$12,$07,$1E
 $71B0 DEFB $52,$05,$1E,$52,$0E,$1E,$52,$03
 $71B8 DEFB $1E,$94,$0C,$1E,$94,$0E,$00,$50
 $71C0 DEFB $FD,$01,$0D,$0C,$1C,$0B,$0E,$14
 $71C8 DEFB $52,$0C,$14,$94,$02,$02,$7A,$FE
 $71D0 DEFB $01,$1C,$02,$05,$6C,$01,$1C,$96
 $71D8 DEFB $00,$1C,$96,$0E,$02,$A4,$0E,$12
 $71E0 DEFB $A5,$09,$0A,$A7,$FE,$01,$0A,$0A
 $71E8 DEFB $0A,$AA,$0A,$13,$AA,$0A,$02,$79
 $71F0 DEFB $01,$14,$4C,$FF

; Room 0B
b$71F4 DEFB $02,$00,$1D,$FE,$01,$13,$0E,$13
 $71FC DEFB $50,$FD,$01,$04,$07,$13,$50,$FD
 $7204 DEFB $01,$06,$0B,$15,$54,$FE,$01,$09
 $720C DEFB $0E,$1E,$50,$FD,$01,$0D,$0A,$1B
 $7214 DEFB $4C,$13,$02,$42,$FE,$08,$02,$13
 $721C DEFB $0D,$42,$FE,$0B,$02,$11,$0C,$4C
 $7224 DEFB $13,$01,$27,$FD,$01,$0E,$11,$00
 $722C DEFB $27,$06,$00,$27,$0D,$02,$2A,$13
 $7234 DEFB $03,$29,$FD,$01,$06,$01,$04,$35
 $723C DEFB $01,$09,$35,$01,$0D,$35,$01,$12
 $7244 DEFB $35,$00,$04,$36,$00,$0D,$36,$06
 $724C DEFB $11,$CF,$0E,$12,$56,$FF

; Room 0C
b$7252 DEFB $02,$00,$1D,$FE,$01,$0A,$02,$16
 $725A DEFB $1D,$FE,$01,$0A,$06,$0F,$6B,$0D
 $7262 DEFB $0A,$5F,$0D,$0B,$60,$FE,$01,$0A
 $726A DEFB $0D,$15,$61,$10,$0A,$2A,$13,$0B
 $7272 DEFB $29,$FD,$01,$03,$13,$18,$96,$13
 $727A DEFB $00,$28,$FD,$01,$03,$0D,$00,$28
 $7282 DEFB $0C,$00,$28,$07,$00,$27,$13,$1A
 $728A DEFB $28,$FD,$04,$02,$0F,$05,$28,$13
 $7292 DEFB $06,$28,$FE,$02,$02,$0B,$1B,$28
 $729A DEFB $06,$00,$27,$FE,$01,$09,$06,$17
 $72A2 DEFB $28,$FE,$02,$04,$12,$09,$27,$FD
 $72AA DEFB $01,$06,$09,$09,$27,$FD,$01,$04
 $72B2 DEFB $13,$16,$28,$FD,$01,$07,$0B,$04
 $72BA DEFB $28,$09,$16,$27,$FD,$01,$04,$13
 $72C2 DEFB $1F,$27,$FD,$01,$0E,$11,$1E,$27
 $72CA DEFB $05,$04,$29,$FD,$01,$06,$01,$02
 $72D2 DEFB $62,$04,$02,$63,$FD,$01,$03,$05
 $72DA DEFB $02,$64,$05,$1B,$62,$0A,$1B,$64
 $72E2 DEFB $09,$1B,$63,$FD,$01,$04,$FF

; Room 0D
b$72E9 DEFB $13,$0D,$2B,$FD,$01,$06,$13,$12
 $72F1 DEFB $2C,$FD,$01,$06,$06,$0D,$2B,$FD
 $72F9 DEFB $01,$07,$06,$12,$2C,$FD,$01,$07
 $7301 DEFB $07,$0D,$48,$FE,$05,$02,$08,$00
 $7309 DEFB $94,$03,$00,$52,$01,$00,$52,$00
 $7311 DEFB $03,$7B,$04,$04,$7B,$08,$05,$7B
 $7319 DEFB $0D,$0D,$3D,$FE,$05,$02,$13,$1E
 $7321 DEFB $28,$FD,$01,$03,$0D,$1E,$28,$0C
 $7329 DEFB $1E,$28,$12,$14,$A4,$12,$1C,$A5
 $7331 DEFB $07,$1E,$27,$06,$1E,$28,$02,$14
 $7339 DEFB $1D,$FE,$01,$0C,$02,$17,$6C,$00
 $7341 DEFB $15,$28,$00,$19,$28,$00,$1B,$27
 $7349 DEFB $00,$1C,$96,$0D,$14,$0E,$FE,$01
 $7351 DEFB $04,$0D,$00,$60,$FE,$05,$03,$0D
 $7359 DEFB $01,$60,$FE,$05,$03,$0D,$0C,$61
 $7361 DEFB $FF

; Room 0E
b$7362 DEFB $06,$00,$64,$00,$00,$62,$05,$00
 $736A DEFB $63,$FD,$01,$05,$13,$00,$41,$FD
 $7372 DEFB $01,$0D,$13,$0A,$41,$FD,$01,$0D
 $737A DEFB $13,$07,$41,$FD,$01,$0D,$13,$14
 $7382 DEFB $41,$FD,$01,$0D,$13,$11,$41,$FD
 $738A DEFB $01,$0D,$13,$1B,$41,$FD,$01,$0D
 $7392 DEFB $10,$00,$09,$FE,$07,$02,$0E,$0A
 $739A DEFB $09,$FE,$07,$02,$0C,$14,$09,$FE
 $73A2 DEFB $07,$02,$07,$01,$07,$FE,$0A,$03
 $73AA DEFB $07,$06,$08,$FE,$0A,$03,$13,$04
 $73B2 DEFB $40,$0B,$03,$40,$0F,$02,$40,$0D
 $73BA DEFB $04,$40,$09,$05,$40,$12,$16,$40
 $73C2 DEFB $09,$0D,$40,$13,$0E,$40,$0F,$0B
 $73CA DEFB $5F,$0F,$10,$61,$0F,$0C,$60,$FE
 $73D2 DEFB $01,$04,$0D,$1C,$5F,$0D,$1D,$60
 $73DA DEFB $FE,$01,$03,$02,$06,$94,$02,$1A
 $73E2 DEFB $94,$01,$02,$53,$01,$04,$53,$08
 $73EA DEFB $1E,$94,$03,$1E,$52,$01,$1E,$52
 $73F2 DEFB $0B,$1C,$96,$FD,$01,$0B,$02,$0E
 $73FA DEFB $A0,$01,$08,$A4,$01,$18,$A5,$FF

; Room 0F
b$7402 DEFB $03,$08,$10,$FE,$08,$03,$13,$09
 $740A DEFB $B4,$FE,$07,$03,$02,$08,$6C,$FE
 $7412 DEFB $05,$03,$0D,$09,$42,$0D,$14,$42
 $741A DEFB $08,$07,$42,$FE,$08,$03,$08,$0E
 $7422 DEFB $6C,$FD,$01,$02,$08,$07,$15,$02
 $742A DEFB $07,$51,$FE,$05,$05,$02,$07,$00
 $7432 DEFB $01,$08,$5C,$FE,$04,$06,$01,$08
 $743A DEFB $59,$13,$1E,$41,$FD,$01,$0D,$07
 $7442 DEFB $1F,$07,$10,$1E,$09,$13,$06,$18
 $744A DEFB $01,$00,$3F,$06,$1E,$64,$00,$1E
 $7452 DEFB $62,$05,$1E,$63,$FD,$01,$05,$0D
 $745A DEFB $07,$0B,$10,$00,$3E,$0B,$1C,$62
 $7462 DEFB $0F,$1C,$63,$FD,$01,$04,$10,$1C
 $746A DEFB $64,$08,$06,$13,$0C,$05,$13,$FF

; Room 10
b$7472 DEFB $00,$03,$0E,$FE,$01,$1A,$13,$00
 $747A DEFB $51,$FE,$05,$05,$03,$09,$68,$FE
 $7482 DEFB $01,$0E,$00,$09,$65,$FE,$01,$0E
 $748A DEFB $03,$0B,$6C,$FE,$08,$02,$00,$08
 $7492 DEFB $66,$00,$17,$67,$11,$09,$57,$FE
 $749A DEFB $01,$0D,$12,$08,$5C,$FE,$05,$03
 $74A2 DEFB $12,$0A,$5C,$FE,$06,$02,$11,$08
 $74AA DEFB $58,$12,$07,$59,$10,$09,$69,$FE
 $74B2 DEFB $04,$04,$0B,$08,$4B,$FE,$04,$04
 $74BA DEFB $0B,$08,$4F,$0B,$16,$4E,$09,$08
 $74C2 DEFB $4D,$FE,$0E,$02,$09,$0A,$49,$FE
 $74CA DEFB $02,$06,$02,$09,$52,$FE,$04,$04
 $74D2 DEFB $05,$0F,$64,$04,$0F,$63,$FD,$01
 $74DA DEFB $05,$13,$15,$12,$13,$1E,$3F,$08
 $74E2 DEFB $1E,$C1,$FF

; Room 11
b$74E5 DEFB $0C,$01,$5D,$FC,$01,$07,$13,$02
 $74ED DEFB $51,$FE,$05,$06,$13,$14,$6C,$0F
 $74F5 DEFB $00,$52,$FD,$07,$03,$13,$00,$53
 $74FD DEFB $0D,$00,$94,$06,$00,$94,$13,$12
 $7505 DEFB $50,$FD,$01,$03,$13,$16,$50,$FD
 $750D DEFB $01,$03,$12,$1A,$4C,$10,$13,$44
 $7515 DEFB $10,$16,$45,$0D,$13,$43,$0F,$17
 $751D DEFB $47,$0F,$14,$46,$FE,$01,$02,$08
 $7525 DEFB $02,$A9,$08,$08,$C1,$09,$0E,$C1
 $752D DEFB $09,$16,$C1,$FF

; Room 12
b$7531 DEFB $0C,$00,$32,$FE,$01,$1A,$13,$02
 $7539 DEFB $7A,$FE,$01,$1C,$0F,$1E,$52,$01
 $7541 DEFB $1E,$52,$0D,$1E,$94,$06,$1A,$94
 $7549 DEFB $FE,$02,$03,$08,$1A,$52,$FE,$02
 $7551 DEFB $03,$0F,$00,$50,$FD,$01,$03,$13
 $7559 DEFB $00,$50,$07,$19,$56,$01,$00,$32
 $7561 DEFB $FE,$01,$1C,$13,$1E,$53,$05,$00
 $7569 DEFB $50,$FD,$01,$04,$11,$1C,$96,$FD
 $7571 DEFB $01,$05,$0F,$02,$A4,$0F,$18,$A5
 $7579 DEFB $0F,$1A,$52,$0D,$1A,$94,$02,$05
 $7581 DEFB $A8,$FE,$07,$03,$05,$04,$A6,$FE
 $7589 DEFB $07,$03,$0A,$04,$A7,$FE,$01,$11
 $7591 DEFB $0B,$04,$AA,$0B,$14,$AA,$08,$18
 $7599 DEFB $AB,$08,$1B,$AC,$13,$05,$6C,$0C
 $75A1 DEFB $16,$6C,$12,$14,$4C,$FF

; Room 13
b$75A7 DEFB $07,$18,$1B,$FC,$01,$06,$13,$00
 $75AF DEFB $1D,$FE,$01,$13,$02,$17,$70,$FD
 $75B7 DEFB $01,$02,$06,$00,$32,$FE,$01,$18
 $75BF DEFB $0F,$1E,$50,$FD,$01,$03,$13,$1E
 $75C7 DEFB $50,$05,$1E,$50,$FD,$01,$04,$04
 $75CF DEFB $1C,$64,$03,$1C,$63,$FD,$01,$04
 $75D7 DEFB $13,$13,$50,$11,$04,$36,$11,$0D
 $75DF DEFB $36,$12,$04,$35,$12,$09,$35,$12
 $75E7 DEFB $0D,$35,$12,$12,$35,$09,$02,$38
 $75EF DEFB $FE,$06,$04,$0A,$03,$34,$FE,$06
 $75F7 DEFB $04,$08,$03,$37,$FE,$06,$04,$02
 $75FF DEFB $02,$70,$FD,$01,$02,$00,$02,$6F
 $7607 DEFB $FE,$01,$17,$04,$00,$96,$FD,$01
 $760F DEFB $05,$01,$1E,$32,$01,$1F,$32,$0C
 $7617 DEFB $1E,$32,$0C,$1F,$32,$0F,$00,$A4
 $761F DEFB $0F,$1C,$A5,$0E,$18,$C0,$FF

; Room 14
b$7626 DEFB $0D,$16,$1C,$FB,$01,$07,$07,$03
 $762E DEFB $1B,$FC,$01,$07,$06,$1D,$32,$FE
 $7636 DEFB $01,$03,$13,$16,$1D,$FE,$01,$0A
 $763E DEFB $0F,$08,$50,$FD,$01,$03,$0F,$16
 $7646 DEFB $50,$FD,$01,$03,$13,$00,$1D,$FE
 $764E DEFB $01,$0A,$06,$00,$32,$FE,$01,$03
 $7656 DEFB $0F,$00,$28,$FD,$01,$04,$08,$00
 $765E DEFB $28,$0F,$03,$2A,$13,$04,$29,$FD
 $7666 DEFB $01,$04,$13,$02,$63,$12,$02,$62
 $766E DEFB $0F,$02,$27,$FD,$01,$04,$08,$02
 $7676 DEFB $27,$02,$02,$33,$FE,$0A,$03,$06
 $767E DEFB $0A,$6D,$FE,$0A,$02,$0E,$0F,$6B
 $7686 DEFB $04,$1E,$96,$FD,$01,$05,$0E,$18
 $768E DEFB $9F,$FE,$01,$04,$0D,$0A,$A4,$0D
 $7696 DEFB $14,$A5,$0F,$1E,$A4,$01,$00,$40
 $769E DEFB $0F,$07,$D0,$FF

; Room 15
b$76A2 DEFB $13,$00,$52,$FD,$02,$03,$06,$01
 $76AA DEFB $2E,$FC,$01,$0C,$0D,$00,$94,$06
 $76B2 DEFB $00,$94,$01,$00,$94,$08,$00,$52
 $76BA DEFB $13,$12,$2C,$FD,$01,$0D,$0A,$0D
 $76C2 DEFB $2B,$FD,$01,$0A,$13,$0D,$2B,$FD
 $76CA DEFB $01,$02,$06,$12,$32,$FE,$01,$0E
 $76D2 DEFB $01,$12,$2C,$FD,$01,$02,$02,$12
 $76DA DEFB $48,$0D,$15,$27,$FD,$01,$06,$11
 $76E2 DEFB $15,$28,$FD,$01,$04,$11,$19,$28
 $76EA DEFB $0D,$16,$28,$11,$1B,$27,$FD,$01
 $76F2 DEFB $04,$0F,$1E,$28,$FD,$01,$04,$08
 $76FA DEFB $18,$27,$FE,$01,$08,$11,$1C,$96
 $7702 DEFB $FD,$01,$03,$0B,$16,$96,$FD,$01
 $770A DEFB $06,$13,$14,$1D,$FE,$01,$0C,$13
 $7712 DEFB $17,$6C,$02,$16,$33,$11,$0D,$3D
 $771A DEFB $0B,$0D,$48,$11,$03,$7B,$00,$02
 $7722 DEFB $32,$FE,$01,$0D,$01,$1F,$40,$02
 $772A DEFB $0A,$37,$03,$09,$38,$04,$0A,$34
 $7732 DEFB $FF

; Room 16
b$7733 DEFB $02,$00,$02,$0B,$00,$01,$0E,$00
 $773B DEFB $03,$13,$00,$63,$12,$00,$63,$11
 $7743 DEFB $00,$62,$01,$02,$52,$FE,$02,$03
 $774B DEFB $0F,$02,$52,$FD,$02,$07,$0F,$02
 $7753 DEFB $6C,$0E,$06,$52,$FD,$02,$04,$13
 $775B DEFB $06,$94,$13,$1A,$94,$12,$02,$53
 $7763 DEFB $12,$04,$53,$13,$1E,$52,$FD,$02
 $776B DEFB $03,$08,$1C,$52,$08,$1E,$52,$0D
 $7773 DEFB $1E,$94,$06,$1C,$94,$06,$1E,$94
 $777B DEFB $01,$1C,$94,$01,$1E,$94,$06,$0C
 $7783 DEFB $95,$FE,$02,$08,$09,$0A,$95,$FE
 $778B DEFB $02,$08,$0C,$0B,$95,$FE,$02,$08
 $7793 DEFB $03,$04,$52,$03,$06,$52,$07,$06
 $779B DEFB $53,$13,$1C,$96,$12,$1C,$96,$12
 $77A3 DEFB $08,$A4,$12,$18,$A5,$13,$0E,$A0
 $77AB DEFB $0D,$1A,$9F,$FE,$01,$04,$01,$08
 $77B3 DEFB $B1,$01,$09,$B0,$FE,$01,$12,$01
 $77BB DEFB $1B,$B2,$03,$05,$AC,$10,$04,$64
 $77C3 DEFB $0F,$04,$63,$FD,$01,$09,$06,$04
 $77CB DEFB $62,$FF

; Room 17
b$77CD DEFB $13,$07,$51,$FE,$05,$05,$12,$08
 $77D5 DEFB $5C,$FE,$04,$06,$12,$08,$59,$0A
 $77DD DEFB $0D,$06,$FE,$04,$05,$09,$0D,$69
 $77E5 DEFB $FE,$04,$05,$04,$0C,$4B,$FE,$04
 $77ED DEFB $05,$04,$0C,$4F,$02,$0E,$49,$FE
 $77F5 DEFB $02,$08,$02,$0C,$4D,$FE,$06,$03
 $77FD DEFB $13,$00,$3F,$0E,$0D,$3C,$FE,$04
 $7805 DEFB $05,$0B,$1E,$01,$0E,$1E,$03,$02
 $780D DEFB $1E,$02,$07,$1D,$04,$0E,$1D,$05
 $7815 DEFB $13,$07,$00,$13,$1E,$63,$11,$1E
 $781D DEFB $62,$12,$1E,$63,$01,$02,$C4,$0D
 $7825 DEFB $09,$C1,$08,$00,$C1,$07,$0A,$C1
 $782D DEFB $FF

; Room 18
b$782E DEFB $11,$03,$0E,$FE,$01,$1A,$13,$09
 $7836 DEFB $52,$FE,$04,$04,$11,$09,$65,$FE
 $783E DEFB $01,$0E,$11,$08,$66,$11,$17,$67
 $7846 DEFB $0D,$0A,$52,$FE,$02,$06,$0B,$0A
 $784E DEFB $65,$FE,$01,$0C,$0E,$0D,$6C,$FD
 $7856 DEFB $01,$04,$0A,$0A,$69,$FE,$0A,$02
 $785E DEFB $13,$0F,$63,$FD,$01,$03,$10,$0F
 $7866 DEFB $62,$0F,$11,$96,$FD,$01,$05,$05
 $786E DEFB $09,$4F,$FE,$0A,$02,$05,$0B,$4E
 $7876 DEFB $FE,$0A,$02,$03,$08,$66,$03,$09
 $787E DEFB $65,$FE,$01,$05,$03,$12,$65,$FE
 $7886 DEFB $01,$05,$03,$17,$67,$02,$08,$6A
 $788E DEFB $FE,$02,$03,$02,$12,$6A,$FE,$02
 $7896 DEFB $03,$00,$08,$65,$FE,$01,$06,$00
 $789E DEFB $12,$65,$FE,$01,$06,$09,$0F,$40
 $78A6 DEFB $07,$12,$6B,$05,$0D,$6B,$02,$11
 $78AE DEFB $25,$11,$04,$0E,$FE,$01,$04,$00
 $78B6 DEFB $07,$66,$00,$18,$67,$02,$00,$B0
 $78BE DEFB $FE,$01,$07,$02,$07,$B2,$FF

; Room 19
b$78C5 DEFB $12,$00,$52,$FD,$02,$04,$0A,$00
 $78CD DEFB $94,$0C,$02,$C2,$05,$00,$52,$FD
 $78D5 DEFB $02,$03,$0D,$0E,$A0,$08,$0F,$9F
 $78DD DEFB $FE,$01,$04,$08,$08,$C1,$0C,$09
 $78E5 DEFB $C1,$08,$18,$C1,$0C,$17,$C1,$02
 $78ED DEFB $02,$B1,$02,$03,$B0,$FE,$01,$1D
 $78F5 DEFB $FF

; Room 1A
b$78F6 DEFB $12,$00,$32,$FE,$01,$1C,$00,$04
 $78FE DEFB $54,$FE,$01,$1A,$12,$1E,$52,$FD
 $7906 DEFB $02,$04,$0A,$1E,$94,$05,$1E,$52
 $790E DEFB $FD,$02,$03,$0B,$00,$32,$FE,$01
 $7916 DEFB $08,$06,$02,$A1,$0A,$0B,$A2,$FE
 $791E DEFB $05,$04,$0E,$0C,$A3,$FE,$05,$04
 $7926 DEFB $13,$00,$50,$0E,$00,$50,$FD,$01
 $792E DEFB $03,$07,$00,$50,$FD,$01,$08,$0E
 $7936 DEFB $06,$50,$FD,$01,$03,$0D,$02,$9F
 $793E DEFB $FE,$01,$04,$13,$05,$A8,$FE,$07
 $7946 DEFB $03,$02,$06,$37,$FE,$08,$03,$03
 $794E DEFB $05,$38,$04,$06,$34,$03,$0C,$C8
 $7956 DEFB $03,$14,$C8,$05,$1C,$CF,$FF

; Room 1B
b$795D DEFB $13,$02,$70,$FD,$01,$13,$0F,$15
 $7965 DEFB $70,$FD,$01,$04,$10,$15,$6F,$FE
 $796D DEFB $01,$03,$11,$02,$6F,$FE,$01,$17
 $7975 DEFB $13,$1E,$50,$12,$1E,$32,$12,$1F
 $797D DEFB $32,$0E,$1E,$50,$FD,$01,$03,$07
 $7985 DEFB $1E,$50,$FD,$01,$08,$01,$04,$1B
 $798D DEFB $02,$05,$1B,$02,$04,$32,$FE,$01
 $7995 DEFB $18,$03,$04,$71,$03,$05,$72,$FE
 $799D DEFB $01,$0F,$03,$14,$73,$06,$14,$74
 $79A5 DEFB $FD,$01,$03,$0F,$14,$74,$FD,$01
 $79AD DEFB $05,$10,$14,$75,$10,$05,$76,$FE
 $79B5 DEFB $01,$0F,$10,$04,$77,$0F,$04,$78
 $79BD DEFB $FD,$01,$0C,$13,$17,$70,$FD,$01
 $79C5 DEFB $02,$00,$00,$32,$FE,$01,$04,$13
 $79CD DEFB $00,$96,$FD,$01,$02,$11,$02,$09
 $79D5 DEFB $0B,$15,$32,$FE,$01,$0B,$07,$1C
 $79DD DEFB $CE,$0C,$05,$A4,$0C,$12,$A5,$13
 $79E5 DEFB $1C,$63,$FD,$01,$09,$0A,$1C,$62
 $79ED DEFB $0F,$09,$4C,$07,$09,$BB,$07,$0F
 $79F5 DEFB $BB,$07,$0C,$BC,$07,$12,$BC,$06
 $79FD DEFB $09,$BD,$FD,$01,$03,$06,$0F,$BD
 $7A05 DEFB $FD,$01,$03,$06,$0C,$BE,$FD,$01
 $7A0D DEFB $03,$06,$12,$BE,$FD,$01,$03,$08
 $7A15 DEFB $05,$0A,$FF

; Room 1C
b$7A18 DEFB $13,$02,$33,$FE,$0A,$03,$07,$02
 $7A20 DEFB $33,$FE,$0A,$03,$00,$00,$32,$FE
 $7A28 DEFB $01,$20,$03,$0F,$96,$FD,$01,$04
 $7A30 DEFB $09,$14,$96,$FD,$01,$04,$13,$1E
 $7A38 DEFB $96,$12,$1E,$96,$0B,$03,$DD,$FE
 $7A40 DEFB $01,$1A,$12,$00,$40,$FF

; Room 1D
b$7A46 DEFB $13,$0D,$2B,$12,$0D,$2B,$12,$12
 $7A4E DEFB $2C,$FD,$01,$12,$00,$12,$32,$FE
 $7A56 DEFB $01,$0E,$02,$00,$54,$FE,$01,$0D
 $7A5E DEFB $13,$16,$33,$13,$12,$48,$12,$00
 $7A66 DEFB $94,$02,$0D,$3D,$09,$02,$40,$FE
 $7A6E DEFB $01,$0B,$11,$02,$32,$FE,$01,$0D
 $7A76 DEFB $04,$09,$9F,$FE,$01,$04,$0D,$0D
 $7A7E DEFB $48,$0C,$0D,$2B,$FD,$01,$0A,$0C
 $7A86 DEFB $00,$52,$0A,$00,$94,$0C,$0B,$CE
 $7A8E DEFB $0C,$14,$BD,$FD,$01,$06,$0C,$17
 $7A96 DEFB $BE,$FD,$01,$06,$0C,$1A,$BD,$FD
 $7A9E DEFB $01,$06,$0C,$1D,$BE,$FD,$01,$06
 $7AA6 DEFB $06,$14,$C9,$FE,$03,$03,$06,$1D
 $7AAE DEFB $CA,$12,$1F,$40,$0D,$14,$BB,$0D
 $7AB6 DEFB $1A,$BB,$0D,$17,$BC,$0D,$1D,$BC
 $7ABE DEFB $13,$0A,$37,$04,$02,$D4,$04,$06
 $7AC6 DEFB $D4,$FF

; Room 1E
b$7AC8 DEFB $05,$00,$52,$FD,$02,$03,$0A,$00
 $7AD0 DEFB $94,$0C,$00,$52,$11,$00,$94,$FE
 $7AD8 DEFB $02,$04,$13,$00,$02,$13,$02,$52
 $7AE0 DEFB $FE,$02,$03,$00,$07,$99,$FE,$01
 $7AE8 DEFB $0F,$01,$08,$9A,$FE,$03,$05,$02
 $7AF0 DEFB $07,$54,$FE,$01,$19,$12,$1E,$94
 $7AF8 DEFB $12,$1C,$94,$04,$09,$37,$FE,$08
 $7B00 DEFB $03,$05,$07,$C8,$FE,$08,$03,$09
 $7B08 DEFB $02,$A4,$09,$1A,$A5,$0C,$1C,$52
 $7B10 DEFB $0A,$1C,$94,$09,$1E,$40,$09,$1F
 $7B18 DEFB $40,$0C,$02,$B1,$0C,$03,$B0,$FE
 $7B20 DEFB $01,$18,$0C,$1B,$B2,$13,$05,$AC
 $7B28 DEFB $12,$08,$B1,$12,$09,$B0,$FE,$01
 $7B30 DEFB $12,$12,$1B,$B2,$0C,$1E,$52,$0A
 $7B38 DEFB $1E,$94,$04,$02,$26,$FF

; Room 1F
b$7B3E DEFB $09,$11,$52,$FD,$02,$05,$05,$1E
 $7B46 DEFB $52,$FD,$02,$03,$0C,$1E,$52,$0A
 $7B4E DEFB $1E,$94,$07,$1C,$96,$FD,$01,$06
 $7B56 DEFB $13,$0E,$49,$FE,$02,$08,$13,$0C
 $7B5E DEFB $4D,$FE,$06,$03,$13,$1E,$02,$10
 $7B66 DEFB $1E,$53,$10,$0D,$4C,$09,$13,$54
 $7B6E DEFB $FE,$01,$0B,$02,$0F,$66,$02,$13
 $7B76 DEFB $54,$FE,$01,$09,$04,$13,$9F,$FE
 $7B7E DEFB $01,$04,$01,$0F,$6A,$02,$10,$65
 $7B86 DEFB $01,$17,$AD,$08,$0E,$BF,$12,$02
 $7B8E DEFB $C4,$0B,$1D,$56,$FF

; Room 20
b$7B93 DEFB $13,$08,$6A,$FE,$02,$03,$13,$12
 $7B9B DEFB $6A,$FE,$02,$03,$11,$08,$65,$FE
 $7BA3 DEFB $01,$06,$11,$12,$65,$FE,$01,$06
 $7BAB DEFB $10,$07,$65,$10,$18,$65,$11,$07
 $7BB3 DEFB $66,$11,$18,$67,$10,$06,$66,$10
 $7BBB DEFB $19,$67,$0D,$0C,$58,$FB,$01,$03
 $7BC3 DEFB $0B,$11,$5A,$FC,$01,$03,$0D,$0D
 $7BCB DEFB $57,$FE,$01,$06,$0C,$0E,$57,$FE
 $7BD3 DEFB $01,$04,$0B,$0F,$57,$FE,$01,$02
 $7BDB DEFB $09,$07,$4A,$FE,$0F,$02,$0A,$0F
 $7BE3 DEFB $69,$05,$0E,$4F,$05,$10,$4E,$03
 $7BEB DEFB $0D,$66,$03,$0E,$65,$FE,$01,$04
 $7BF3 DEFB $03,$12,$67,$02,$0D,$6A,$FE,$02
 $7BFB DEFB $03,$00,$0D,$65,$FE,$01,$06,$06
 $7C03 DEFB $02,$4C,$13,$11,$25,$07,$02,$4A
 $7C0B DEFB $FE,$19,$02,$10,$1E,$6B,$10,$00
 $7C13 DEFB $6B,$00,$0C,$66,$00,$13,$67,$00
 $7C1B DEFB $05,$6B,$00,$19,$6B,$13,$00,$B0
 $7C23 DEFB $FE,$01,$07,$13,$07,$B2,$0F,$06
 $7C2B DEFB $65,$0F,$07,$65,$0F,$18,$65,$0F
 $7C33 DEFB $19,$65,$0E,$06,$65,$0E,$05,$66
 $7C3B DEFB $0E,$19,$65,$0E,$1A,$67,$10,$05
 $7C43 DEFB $D0,$FF

; Room 21
b$7C45 DEFB $0B,$00,$52,$FD,$02,$03,$13,$00
 $7C4D DEFB $52,$11,$00,$94,$07,$00,$94,$02
 $7C55 DEFB $00,$94,$09,$02,$C2,$13,$02,$B1
 $7C5D DEFB $13,$03,$B0,$FE,$01,$1D,$07,$0B
 $7C65 DEFB $C4,$07,$15,$C4,$10,$1E,$6B,$FF

; Room 22
b$7C6D DEFB $11,$04,$54,$FE,$01,$1A,$01,$02
 $7C75 DEFB $1B,$02,$03,$1B,$13,$00,$50,$FD
 $7C7D DEFB $01,$0E,$02,$00,$50,$FD,$01,$03
 $7C85 DEFB $0B,$1E,$52,$FD,$02,$03,$02,$02
 $7C8D DEFB $1D,$FE,$01,$1C,$10,$05,$5E,$FE
 $7C95 DEFB $06,$04,$02,$1E,$94,$07,$1E,$94
 $7C9D DEFB $0A,$02,$AE,$FE,$01,$1C,$0B,$0E
 $7CA5 DEFB $AF,$07,$02,$A4,$07,$1C,$A5,$13
 $7CAD DEFB $1E,$52,$11,$1E,$94,$13,$06,$37
 $7CB5 DEFB $FE,$08,$03,$04,$08,$D4,$FE,$07
 $7CBD DEFB $03,$FF

; Room 23
b$7CBF DEFB $12,$04,$1B,$13,$05,$1B,$13,$04
 $7CC7 DEFB $32,$FE,$01,$18,$00,$00,$0D,$FE
 $7CCF DEFB $01,$1E,$13,$1E,$50,$FD,$01,$0E
 $7CD7 DEFB $02,$1E,$50,$FD,$01,$03,$11,$00
 $7CDF DEFB $32,$FE,$01,$04,$13,$02,$70,$FD
 $7CE7 DEFB $01,$02,$10,$00,$50,$FD,$01,$0A
 $7CEF DEFB $06,$0D,$BB,$FE,$06,$03,$0F,$0D
 $7CF7 DEFB $BB,$FE,$06,$03,$06,$10,$BC,$FE
 $7CFF DEFB $06,$03,$0F,$10,$BC,$FE,$06,$03
 $7D07 DEFB $0E,$0D,$BD,$FD,$01,$08,$0E,$10
 $7D0F DEFB $BE,$FD,$01,$08,$0E,$13,$BD,$FD
 $7D17 DEFB $01,$08,$0E,$16,$BE,$FD,$01,$08
 $7D1F DEFB $0E,$19,$BD,$FD,$01,$08,$0E,$1C
 $7D27 DEFB $BE,$FD,$01,$08,$06,$00,$DA,$06
 $7D2F DEFB $02,$DC,$06,$04,$0F,$08,$02,$C7
 $7D37 DEFB $08,$06,$C7,$08,$04,$D5,$0D,$04
 $7D3F DEFB $C7,$0D,$0A,$C7,$0D,$06,$D6,$0B
 $7D47 DEFB $07,$DB,$0B,$0B,$0F,$02,$07,$D4
 $7D4F DEFB $FF

; Room 24
b$7D50 DEFB $00,$00,$0D,$FE,$01,$20,$11,$00
 $7D58 DEFB $32,$FE,$01,$20,$13,$0F,$96,$FD
 $7D60 DEFB $01,$03,$02,$0E,$9F,$FE,$01,$04
 $7D68 DEFB $10,$00,$50,$FD,$01,$10,$10,$1E
 $7D70 DEFB $50,$FD,$01,$0A,$08,$02,$C7,$08
 $7D78 DEFB $0A,$C7,$10,$02,$C7,$10,$06,$C7
 $7D80 DEFB $10,$12,$C7,$10,$16,$C7,$08,$18
 $7D88 DEFB $C7,$08,$1C,$C7,$08,$04,$D5,$10
 $7D90 DEFB $04,$D5,$10,$14,$D5,$10,$18,$D5
 $7D98 DEFB $08,$1A,$D5,$08,$06,$D6,$10,$1A
 $7DA0 DEFB $D6,$0E,$06,$D7,$06,$03,$D7,$0E
 $7DA8 DEFB $04,$D8,$06,$09,$D8,$06,$1D,$0F
 $7DB0 DEFB $06,$06,$D8,$0E,$1A,$D9,$06,$04
 $7DB8 DEFB $DA,$06,$1E,$DA,$0E,$14,$DB,$06
 $7DC0 DEFB $19,$DB,$07,$0E,$C6,$0E,$17,$DC
 $7DC8 DEFB $10,$0C,$4C,$0E,$1D,$D8,$0B,$02
 $7DD0 DEFB $A1,$0B,$1D,$D0,$02,$08,$D4,$02
 $7DD8 DEFB $16,$D4,$FF

; Room 25
b$7DDB DEFB $00,$00,$0D,$FE,$01,$0B,$06,$0B
 $7DE3 DEFB $96,$FD,$01,$07,$02,$07,$9F,$FE
 $7DEB DEFB $01,$04,$00,$17,$0D,$FE,$01,$09
 $7DF3 DEFB $0E,$0D,$2B,$FD,$01,$0F,$13,$12
 $7DFB DEFB $2C,$FD,$01,$02,$0A,$12,$2C,$FD
 $7E03 DEFB $01,$0B,$11,$12,$32,$FE,$01,$0E
 $7E0B DEFB $13,$00,$54,$FE,$01,$0D,$13,$0D
 $7E13 DEFB $3D,$0F,$0D,$48,$0B,$12,$48,$0E
 $7E1B DEFB $02,$9B,$FD,$01,$04,$0E,$07,$9B
 $7E23 DEFB $FD,$01,$04,$0F,$02,$9D,$0F,$07
 $7E2B DEFB $9D,$0B,$02,$9C,$0B,$07,$9C,$0D
 $7E33 DEFB $0B,$9E,$07,$00,$60,$FE,$01,$04
 $7E3B DEFB $07,$04,$61,$07,$07,$C6,$0C,$00
 $7E43 DEFB $60,$0C,$01,$61,$10,$1E,$50,$FD
 $7E4B DEFB $01,$10,$0B,$14,$D1,$FE,$01,$08
 $7E53 DEFB $04,$1C,$CF,$10,$19,$B5,$0E,$1C
 $7E5B DEFB $B6,$0A,$14,$D3,$08,$14,$D2,$FF

; Room 26
b$7E63 DEFB $13,$00,$52,$FD,$08,$03,$09,$00
 $7E6B DEFB $94,$11,$00,$94,$01,$00,$52,$00
 $7E73 DEFB $02,$0D,$FE,$01,$1E,$13,$07,$54
 $7E7B DEFB $FE,$01,$19,$11,$07,$99,$FE,$01
 $7E83 DEFB $0F,$12,$08,$9A,$FE,$03,$05,$0C
 $7E8B DEFB $08,$9B,$FD,$01,$08,$0C,$0D,$9B
 $7E93 DEFB $FD,$01,$08,$0C,$12,$9B,$FD,$01
 $7E9B DEFB $08,$05,$08,$9C,$FE,$05,$03,$0D
 $7EA3 DEFB $08,$9D,$FE,$05,$03,$06,$04,$9E
 $7EAB DEFB $07,$15,$5F,$0C,$15,$5F,$07,$16
 $7EB3 DEFB $60,$FE,$01,$0A,$0C,$16,$60,$FE
 $7EBB DEFB $01,$0A,$01,$02,$A4,$01,$1C,$A5
 $7EC3 DEFB $0B,$16,$4C,$FF

; Room 27
b$7EC7 DEFB $13,$11,$52,$11,$11,$94,$12,$0F
 $7ECF DEFB $6A,$10,$0F,$65,$10,$10,$65,$13
 $7ED7 DEFB $0F,$66,$13,$10,$65,$0C,$0F,$52
 $7EDF DEFB $FD,$02,$03,$01,$0D,$94,$06,$0F
 $7EE7 DEFB $94,$05,$0D,$65,$05,$0E,$65,$07
 $7EEF DEFB $0D,$6A,$08,$0D,$66,$08,$0E,$65
 $7EF7 DEFB $13,$13,$54,$FE,$01,$09,$08,$11
 $7EFF DEFB $54,$FE,$01,$0D,$00,$0F,$54,$FE
 $7F07 DEFB $01,$0D,$13,$1E,$52,$FD,$08,$03
 $7F0F DEFB $11,$1E,$94,$09,$1E,$94,$01,$1E
 $7F17 DEFB $52,$13,$1C,$96,$10,$00,$6B,$10
 $7F1F DEFB $07,$6B,$06,$05,$4A,$0A,$17,$37
 $7F27 DEFB $0B,$15,$C8,$12,$17,$AD,$00,$06
 $7F2F DEFB $13,$06,$1C,$96,$FD,$01,$07,$02
 $7F37 DEFB $11,$D4,$FE,$04,$03,$FF

; Room 28
b$7F3D DEFB $13,$0D,$6A,$FE,$02,$03,$0B,$00
 $7F45 DEFB $1A,$FE,$01,$0C,$11,$0D,$65,$FE
 $7F4D DEFB $01,$06,$11,$0C,$66,$11,$13,$67
 $7F55 DEFB $0D,$0C,$52,$FE,$06,$02,$0B,$0C
 $7F5D DEFB $65,$FE,$01,$02,$0B,$12,$65,$FE
 $7F65 DEFB $01,$02,$05,$0D,$68,$FE,$05,$02
 $7F6D DEFB $11,$19,$6B,$11,$05,$6B,$0B,$1A
 $7F75 DEFB $13,$0D,$1E,$13,$01,$0F,$6E,$04
 $7F7D DEFB $0D,$1E,$04,$11,$24,$02,$0E,$1F
 $7F85 DEFB $02,$10,$23,$FF

; Room 29
b$7F89 DEFB $0B,$00,$1A,$FE,$01,$20,$13,$00
 $7F91 DEFB $52,$12,$00,$53,$FF

; Room 2A
b$7F96 DEFB $12,$02,$1B,$13,$03,$1B,$13,$02
 $7F9E DEFB $1D,$FE,$01,$1C,$13,$1E,$94,$13
 $7FA6 DEFB $00,$50,$FD,$01,$03,$0D,$00,$50
 $7FAE DEFB $FD,$01,$03,$0C,$02,$0A,$0F,$0B
 $7FB6 DEFB $52,$FE,$02,$08,$0D,$0A,$66,$0D
 $7FBE DEFB $0B,$65,$FE,$01,$10,$0D,$1B,$67
 $7FC6 DEFB $0C,$0A,$6A,$FE,$02,$09,$0A,$0A
 $7FCE DEFB $65,$FE,$01,$12,$06,$0A,$68,$FD
 $7FD6 DEFB $01,$02,$06,$1B,$68,$FD,$01,$02
 $7FDE DEFB $04,$0A,$1E,$02,$0B,$1F,$01,$0C
 $7FE6 DEFB $20,$00,$0E,$21,$03,$16,$22,$02
 $7FEE DEFB $19,$23,$04,$1A,$24,$0B,$1C,$1A
 $7FF6 DEFB $FE,$01,$04,$08,$0D,$3B,$06,$11
 $7FFE DEFB $3B,$04,$15,$3B,$00,$00,$89,$FE
 $8006 DEFB $01,$03,$01,$00,$8C,$01,$03,$97
 $800E DEFB $0C,$02,$0A,$0A,$09,$66,$0F,$0E
 $8016 DEFB $6C,$FD,$01,$06,$0F,$12,$6C,$FD
 $801E DEFB $01,$06,$0F,$16,$6C,$FD,$01,$06
 $8026 DEFB $0A,$1C,$67,$0E,$09,$CE,$06,$1A
 $802E DEFB $D0,$FF

; Room 2B
b$8030 DEFB $11,$00,$0D,$FE,$01,$1E,$01,$00
 $8038 DEFB $8E,$01,$02,$8D,$00,$04,$89,$FE
 $8040 DEFB $01,$1C,$00,$07,$82,$FE,$01,$16
 $8048 DEFB $01,$04,$8B,$01,$07,$8A,$FE,$01
 $8050 DEFB $16,$01,$08,$83,$FE,$01,$13,$01
 $8058 DEFB $1D,$8C,$02,$0C,$84,$02,$14,$86
 $8060 DEFB $04,$0D,$85,$04,$13,$87,$05,$0C
 $8068 DEFB $91,$05,$10,$92,$FE,$01,$03,$06
 $8070 DEFB $0D,$8F,$06,$10,$90,$FE,$01,$03
 $8078 DEFB $06,$13,$93,$07,$15,$19,$09,$00
 $8080 DEFB $99,$FE,$01,$19,$0A,$03,$9A,$FE
 $8088 DEFB $05,$05,$0B,$00,$55,$FE,$01,$1E
 $8090 DEFB $0B,$05,$6C,$FE,$05,$04,$08,$08
 $8098 DEFB $4C,$13,$1E,$50,$FD,$01,$03,$0D
 $80A0 DEFB $1E,$50,$FD,$01,$03,$0C,$1A,$9F
 $80A8 DEFB $FE,$01,$04,$FF

; Room 2C
b$80AC DEFB $11,$00,$0D,$FE,$01,$20,$00,$1C
 $80B4 DEFB $88,$01,$1E,$8E,$0B,$00,$55,$FE
 $80BC DEFB $01,$20,$09,$00,$99,$FE,$01,$20
 $80C4 DEFB $0A,$03,$9A,$FE,$05,$06,$0B,$05
 $80CC DEFB $6C,$FE,$05,$05,$13,$00,$50,$12
 $80D4 DEFB $00,$50,$FF

; Room 2D
b$80D7 DEFB $13,$0D,$2B,$FD,$01,$0B,$13,$12
 $80DF DEFB $2C,$FD,$01,$0B,$08,$12,$3D,$08
 $80E7 DEFB $0D,$3D,$01,$0D,$2D,$02,$0D,$48
 $80EF DEFB $02,$12,$48,$07,$02,$0C,$FE,$04
 $80F7 DEFB $03,$08,$02,$50,$FE,$04,$03,$09
 $80FF DEFB $02,$50,$FE,$04,$03,$0A,$02,$50
 $8107 DEFB $FE,$04,$03,$11,$00,$0D,$FE,$01
 $810F DEFB $0B,$13,$0B,$96,$FD,$01,$03,$11
 $8117 DEFB $17,$0D,$FE,$01,$09,$0B,$14,$55
 $811F DEFB $FE,$01,$0C,$09,$15,$99,$FE,$01
 $8127 DEFB $0B,$0A,$17,$9A,$0A,$1C,$9A,$13
 $812F DEFB $1E,$50,$12,$1E,$50,$FF

; Room 2E
b$8135 DEFB $07,$00,$30,$06,$00,$69,$01,$00
 $813D DEFB $2F,$FE,$01,$03,$00,$03,$67,$11
 $8145 DEFB $02,$0D,$FE,$01,$1E,$07,$04,$0C
 $814D DEFB $FE,$04,$07,$08,$04,$50,$FE,$04
 $8155 DEFB $07,$09,$04,$50,$FE,$04,$07,$0A
 $815D DEFB $04,$50,$FE,$04,$07,$13,$00,$52
 $8165 DEFB $11,$00,$94,$09,$00,$52,$10,$02
 $816D DEFB $4C,$12,$02,$A4,$12,$1C,$A5,$FF

; Room 2F
b$8175 DEFB $12,$0D,$94,$09,$0D,$52,$13,$1E
 $817D DEFB $52,$11,$1E,$94,$09,$1E,$52,$06
 $8185 DEFB $0D,$69,$06,$1E,$69,$00,$0B,$66
 $818D DEFB $01,$0C,$2F,$FE,$01,$14,$0D,$00
 $8195 DEFB $13,$0F,$03,$13,$0C,$0E,$13,$0F
 $819D DEFB $12,$13,$07,$11,$13,$09,$16,$13
 $81A5 DEFB $05,$17,$13,$0B,$1C,$13,$0D,$17
 $81AD DEFB $13,$11,$0F,$54,$FE,$01,$0D,$07
 $81B5 DEFB $0D,$30,$07,$1E,$30,$01,$15,$31
 $81BD DEFB $11,$06,$13,$13,$1C,$96,$FD,$01
 $81C5 DEFB $03,$09,$0A,$BF,$13,$11,$D4,$FE
 $81CD DEFB $04,$03,$FF

; UDG DD
;
; #CALL:print_udg(#PC,UDG_DD)
b$81D0 DEFB $01,$01,$7E,$81,$66,$BD,$18,$18
 $81D8 DEFB $5A,$24,$05

; UDG 2E
;
; #CALL:print_udg(#PC,UDG_2E)
b$81DB DEFB $02,$01,$3F,$BF,$1D,$DF,$0F,$E0
 $81E3 DEFB $07,$F0,$03,$F8,$01,$FC,$00,$FE
 $81EB DEFB $00,$7F,$04,$04

; UDG 95
;
; #CALL:print_udg(#PC,UDG_95)
b$81EF DEFB $02,$01,$FF,$FF,$00,$00,$FF,$FF
 $81F7 DEFB $F8,$0F,$03,$E0,$00,$00,$00,$00
 $81FF DEFB $00,$00,$03,$03

; UDG 82
;
; #CALL:print_udg(#PC,UDG_82)
b$8203 DEFB $01,$01,$FF,$FF,$FF,$FF,$FF,$00
 $820B DEFB $55,$FF,$02

; UDG 83
;
; #CALL:print_udg(#PC,UDG_83)
b$820E DEFB $01,$01,$FF,$FF,$FF,$00,$55,$FF
 $8216 DEFB $FF,$FF,$02

; UDG 84
;
; #CALL:print_udg(#PC,UDG_84)
b$8219 DEFB $01,$02,$06,$03,$03,$03,$01,$01
 $8221 DEFB $00,$00,$FF,$FF,$FF,$00,$55,$FF
 $8229 DEFB $F9,$F6,$03,$02

; UDG 85
;
; #CALL:print_udg(#PC,UDG_85)
b$822D DEFB $01,$03,$06,$06,$06,$06,$03,$03
 $8235 DEFB $03,$03,$60,$30,$30,$18,$18,$0C
 $823D DEFB $0C,$0C,$00,$00,$00,$80,$80,$C0
 $8245 DEFB $C0,$60,$00,$03

; UDG 86
;
; #CALL:print_udg(#PC,UDG_86)
b$8249 DEFB $01,$02,$30,$60,$60,$C0,$C0,$80
 $8251 DEFB $80,$00,$FF,$FF,$FF,$00,$55,$FF
 $8259 DEFB $CF,$B7,$03,$02

; UDG 87
;
; #CALL:print_udg(#PC,UDG_87)
b$825D DEFB $01,$03,$30,$30,$30,$30,$60,$60
 $8265 DEFB $60,$60,$03,$06,$06,$0C,$0C,$18
 $826D DEFB $18,$18,$00,$00,$00,$00,$00,$01
 $8275 DEFB $01,$03,$00,$03

; UDG 88
;
; #CALL:print_udg(#PC,UDG_88)
b$8279 DEFB $02,$01,$79,$FA,$3A,$7F,$1E,$9F
 $8281 DEFB $07,$A7,$03,$E8,$00,$FD,$00,$3F
 $8289 DEFB $00,$07,$00,$02

; UDG 93
;
; #CALL:print_udg(#PC,UDG_93)
b$828D DEFB $02,$02,$FF,$FD,$FB,$DC,$FC,$38
 $8295 DEFB $FF,$F8,$FB,$D8,$BC,$38,$5F,$E0
 $829D DEFB $A0,$00,$6B,$D0,$6C,$3D,$9F,$FD
 $82A5 DEFB $FB,$DD,$FC,$3D,$FF,$FD,$FB,$DD
 $82AD DEFB $FC,$3D,$00,$05

; UDG 89
;
; #CALL:print_udg(#PC,UDG_89)
b$82B1 DEFB $01,$01,$FF,$FF,$FF,$FF,$00,$55
 $82B9 DEFB $FF,$FF,$02

; UDG 8A
;
; #CALL:print_udg(#PC,UDG_8A)
b$82BC DEFB $01,$01,$FF,$FF,$00,$AA,$FF,$FF
 $82C4 DEFB $FF,$FF,$02

; UDG 8B
;
; #CALL:print_udg(#PC,UDG_8B)
b$82C7 DEFB $03,$01,$FF,$FF,$FF,$00,$00,$FF
 $82CF DEFB $AA,$AA,$00,$FF,$FF,$55,$FF,$FF
 $82D7 DEFB $FF,$FF,$FF,$FF,$00,$FF,$FF,$00
 $82DF DEFB $00,$00,$00,$02

; UDG 8C
;
; #CALL:print_udg(#PC,UDG_8C)
b$82E3 DEFB $03,$01,$FF,$FF,$FF,$FF,$00,$00
 $82EB DEFB $00,$AA,$AA,$AA,$FF,$FF,$FF,$FF
 $82F3 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00
 $82FB DEFB $00,$00,$00,$02

; UDG 8D
;
; #CALL:print_udg(#PC,UDG_8D)
b$82FF DEFB $02,$02,$A0,$00,$EA,$AA,$FF,$FE
 $8307 DEFB $FF,$FF,$0F,$FF,$00,$1F,$00,$00
 $830F DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$FF
 $8317 DEFB $00,$00,$55,$55,$FF,$FF,$FF,$FF
 $831F DEFB $1F,$FF,$00,$02

; UDG 8E
;
; #CALL:print_udg(#PC,UDG_8E)
b$8323 DEFB $02,$02,$FF,$AA,$1F,$FF,$01,$FF
 $832B DEFB $00,$0F,$00,$00,$00,$00,$00,$00
 $8333 DEFB $00,$00,$BF,$FF,$C0,$FF,$D5,$00
 $833B DEFB $FF,$AA,$FF,$FF,$1F,$FF,$A0,$7F
 $8343 DEFB $EA,$80,$00,$02

; UDG 8F
;
; #CALL:print_udg(#PC,UDG_8F)
b$8347 DEFB $03,$01,$57,$FF,$FF,$2A,$FF,$FF
 $834F DEFB $05,$57,$FF,$00,$AA,$BF,$00,$15
 $8357 DEFB $55,$00,$00,$AA,$00,$00,$15,$00
 $835F DEFB $00,$00,$00,$05

; UDG 90
;
; #CALL:print_udg(#PC,UDG_90)
b$8363 DEFB $01,$01,$00,$FF,$FF,$FF,$FF,$AA
 $836B DEFB $55,$AA,$05

; UDG 91
;
; #CALL:print_udg(#PC,UDG_91)
b$836E DEFB $04,$01,$0F,$FB,$7F,$FF,$7F,$FB
 $8376 DEFB $7F,$FF,$FB,$FC,$FF,$FF,$BC,$7F
 $837E DEFB $FF,$FF,$5F,$87,$FF,$FF,$2B,$F0
 $8386 DEFB $7F,$FF,$05,$7F,$81,$FF,$02,$BF
 $838E DEFB $FE,$00,$00,$05

; UDG 92
;
; #CALL:print_udg(#PC,UDG_92)
b$8392 DEFB $01,$01,$00,$00,$00,$00,$00,$00
 $839A DEFB $00,$00,$2D

; UDG 19
;
; #CALL:print_udg(#PC,UDG_19)
b$839D DEFB $01,$05,$3E,$3E,$1E,$1C,$1C,$08
 $83A5 DEFB $08,$00,$58,$18,$18,$18,$1C,$3C
 $83AD DEFB $3C,$3E,$18,$60,$78,$7C,$7E,$7E
 $83B5 DEFB $64,$48,$1E,$3E,$3E,$3E,$3C,$3C
 $83BD DEFB $1C,$18,$00,$00,$00,$08,$08,$0C
 $83C5 DEFB $1C,$1E,$00,$06

; UDG 13
;
; #CALL:print_udg(#PC,UDG_13)
b$83C9 DEFB $02,$01,$45,$44,$18,$31,$60,$0C
 $83D1 DEFB $08,$10,$B0,$AA,$4A,$50,$15,$68
 $83D9 DEFB $09,$90,$04,$04

; UDG 3C
;
; #CALL:print_udg(#PC,UDG_3C)
b$83DD DEFB $02,$04,$03,$60,$07,$20,$0C,$30
 $83E5 DEFB $00,$00,$3F,$FC,$52,$4A,$00,$00
 $83ED DEFB $FF,$FF,$03,$C0,$07,$60,$07,$B0
 $83F5 DEFB $07,$B0,$07,$70,$06,$60,$02,$40
 $83FD DEFB $02,$40,$00,$A0,$01,$D0,$03,$A8
 $8405 DEFB $07,$D0,$07,$E8,$0E,$C0,$09,$C0
 $840D DEFB $03,$80,$02,$A0,$05,$50,$02,$A8
 $8415 DEFB $05,$D0,$02,$A8,$07,$D0,$00,$A8
 $841D DEFB $03,$50,$00,$07

; UDG 3D
;
; #CALL:print_udg(#PC,UDG_3D)
b$8421 DEFB $02,$01,$FF,$FF,$00,$00,$92,$49
 $8429 DEFB $B6,$DB,$B6,$DB,$24,$92,$FF,$FF
 $8431 DEFB $00,$00,$04,$04

; UDG 3E
;
; #CALL:print_udg(#PC,UDG_3E)
b$8435 DEFB $02,$02,$12,$A4,$1A,$AC,$2D,$84
 $843D DEFB $2D,$94,$19,$88,$09,$38,$0C,$90
 $8445 DEFB $00,$00,$04,$25,$AA,$48,$DE,$9D
 $844D DEFB $6B,$F6,$A1,$4C,$14,$12,$40,$44
 $8455 DEFB $A9,$81,$07,$07,$04,$04

; UDG 3F
;
; #CALL:print_udg(#PC,UDG_3F)
b$845B DEFB $02,$02,$72,$54,$2A,$0A,$AB,$10
 $8463 DEFB $4D,$44,$55,$11,$64,$00,$2E,$04
 $846B DEFB $24,$20,$22,$A0,$8B,$29,$AE,$7C
 $8473 DEFB $7D,$DA,$A7,$74,$12,$AA,$45,$54
 $847B DEFB $50,$29,$07,$04,$04,$04

; UDG 40
;
; #CALL:print_udg(#PC,UDG_40)
b$8481 DEFB $01,$01,$FF,$8F,$5E,$2C,$2C,$18
 $8489 DEFB $18,$00,$03

; UDG 41
;
; #CALL:print_udg(#PC,UDG_41)
b$848C DEFB $01,$01,$00,$FF,$00,$FF,$00,$FF
 $8494 DEFB $00,$FF,$10

; UDG 43
;
; #CALL:print_udg(#PC,UDG_43)
b$8497 DEFB $04,$01,$00,$00,$00,$00,$00,$03
 $849F DEFB $80,$0E,$F0,$F0,$00,$00,$00,$00
 $84A7 DEFB $3E,$00,$7C,$03,$00,$10,$00,$00
 $84AF DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00
 $84B7 DEFB $00,$00,$00,$10

; UDG 44
;
; #CALL:print_udg(#PC,UDG_44)
b$84BB DEFB $01,$03,$F0,$F0,$F0,$F0,$F0,$F0
 $84C3 DEFB $F0,$F0,$F0,$F7,$F7,$F7,$F7,$F7
 $84CB DEFB $F0,$F0,$00,$F0,$F0,$F0,$F0,$F0
 $84D3 DEFB $F0,$F0,$00,$04

; UDG 45
;
; #CALL:print_udg(#PC,UDG_44)
b$84D7 DEFB $01,$03,$0F,$0F,$0F,$0F,$0F,$0F
 $84DF DEFB $0F,$00,$0F,$6F,$6F,$6F,$6F,$6F
 $84E7 DEFB $0F,$0F,$00,$0F,$0F,$0F,$0F,$0F
 $84EF DEFB $0F,$0F,$00,$04

; UDG 46
;
; #CALL:print_udg(#PC,UDG_46)
b$84F3 DEFB $01,$01,$AA,$AA,$AA,$AA,$AA,$AA
 $84FB DEFB $AA,$FF,$78

; UDG 47
;
; #CALL:print_udg(#PC,UDG_47)
b$84FE DEFB $01,$01,$17,$10,$10,$70,$00,$00
 $8506 DEFB $00,$00,$06

; UDG 48
;
; #CALL:print_udg(#PC,UDG_48)
b$8509 DEFB $02,$01,$00,$00,$FF,$FF,$00,$00
 $8511 DEFB $55,$54,$FF,$FF,$00,$00,$55,$54
 $8519 DEFB $FF,$FF,$07,$07

; UDG 49
;
; #CALL:print_udg(#PC,UDG_49)
b$851D DEFB $02,$03,$01,$C0,$02,$60,$01,$C0
 $8525 DEFB $01,$C0,$00,$00,$FF,$FF,$44,$44
 $852D DEFB $FF,$FF,$00,$80,$01,$C0,$03,$E0
 $8535 DEFB $00,$C0,$03,$E0,$07,$F0,$07,$F0
 $853D DEFB $03,$E0,$FF,$FF,$44,$44,$FF,$FF
 $8545 DEFB $00,$00,$01,$C0,$01,$C0,$02,$60
 $854D DEFB $01,$C0,$07,$07,$07,$47,$07,$07

; UDG 4A
;
; #CALL:print_udg(#PC,UDG_4A)
b$8555 DEFB $03,$01,$FF,$FF,$FF,$A4,$42,$25
 $855D DEFB $FF,$FF,$FF,$00,$00,$00,$1F,$FF
 $8565 DEFB $F8,$0F,$FF,$F0,$03,$FF,$C0,$00
 $856D DEFB $FF,$00,$00,$03

; UDG 4B
;
; #CALL:print_udg(#PC,UDG_4B)
b$8571 DEFB $04,$02,$F1,$FF,$FF,$8F,$0E,$7F
 $8579 DEFB $FC,$70,$01,$9F,$F9,$80,$00,$4D
 $8581 DEFB $B2,$00,$00,$12,$48,$00,$00,$2D
 $8589 DEFB $B4,$00,$00,$12,$48,$00,$00,$6D
 $8591 DEFB $B6,$00,$00,$00,$00,$00,$00,$00
 $8599 DEFB $00,$00,$FE,$FE,$FE,$FE,$01,$01
 $85A1 DEFB $01,$01,$AA,$AA,$AA,$AA,$3F,$FF
 $85A9 DEFB $FF,$F8,$DF,$FF,$FF,$F7,$2F,$FF
 $85B1 DEFB $FF,$E8,$00,$07

; UDG 4C
;
; #CALL:print_udg(#PC,UDG_4C)
b$85B5 DEFB $03,$01,$7F,$FF,$FE,$FF,$FF,$FF
 $85BD DEFB $00,$00,$00,$08,$66,$10,$11,$81
 $85C5 DEFB $88,$26,$00,$64,$58,$00,$1A,$E0
 $85CD DEFB $00,$07,$00,$02

; UDG 4D
;
; #CALL:print_udg(#PC,UDG_4D)
b$85D1 DEFB $02,$03,$3F,$FC,$3F,$FC,$00,$00
 $85D9 DEFB $7F,$FE,$00,$00,$FF,$FF,$44,$44
 $85E1 DEFB $FF,$FF,$3F,$FC,$3F,$FC,$3F,$FC
 $85E9 DEFB $3F,$FC,$3F,$FC,$3F,$FC,$3F,$FC
 $85F1 DEFB $3F,$FC,$FF,$FF,$44,$44,$FF,$FF
 $85F9 DEFB $00,$00,$7F,$FE,$00,$00,$3F,$FC
 $8601 DEFB $3F,$FC,$00,$07

; UDG 4E
;
; #CALL:print_udg(#PC,UDG_4E)
b$8605 DEFB $02,$02,$FC,$B0,$FF,$A0,$FF,$60
 $860D DEFB $B6,$40,$48,$80,$B5,$00,$48,$00
 $8615 DEFB $B6,$00,$00,$00,$00,$00,$FE,$FC
 $861D DEFB $00,$00,$55,$F0,$FB,$78,$FA,$38
 $8625 DEFB $FB,$30,$00,$07

; UDG 4F
;
; #CALL:print_udg(#PC,UDG_4F)
b$8629 DEFB $02,$02,$0D,$3F,$05,$FF,$06,$FF
 $8631 DEFB $02,$6D,$01,$12,$00,$AD,$00,$12
 $8639 DEFB $00,$6D,$00,$00,$00,$00,$3E,$FE
 $8641 DEFB $00,$00,$0F,$AA,$1E,$DF,$1C,$5F
 $8649 DEFB $0C,$DF,$00,$07

; UDG 50
;
; #CALL:print_udg(#PC,UDG_50)
b$864D DEFB $02,$01,$FF,$FF,$90,$11,$90,$11
 $8655 DEFB $90,$11,$FF,$FF,$81,$01,$81,$01
 $865D DEFB $81,$01,$17,$17

; UDG 51
;
; #CALL:print_udg(#PC,UDG_51)
b$8661 DEFB $05,$01,$92,$A4,$8A,$A2,$A9,$54
 $8669 DEFB $95,$A6,$D4,$97,$EE,$5B,$6D,$AF
 $8671 DEFB $DB,$FF,$EF,$F7,$FF,$FF,$FF,$FF
 $8679 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $8681 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $8689 DEFB $FF,$FF,$00,$04

; UDG 52
;
; #CALL:print_udg(#PC,UDG_52)
b$868D DEFB $02,$02,$00,$00,$FB,$FF,$FB,$FF
 $8695 DEFB $FB,$FF,$FB,$FF,$FB,$FF,$FB,$FF
 $869D DEFB $FB,$FF,$00,$00,$FF,$EF,$FF,$EF
 $86A5 DEFB $FF,$EF,$FF,$EF,$FF,$EF,$FF,$EF
 $86AD DEFB $FF,$EF,$00,$07

; UDG 94
;
; #CALL:print_udg(#PC,UDG_94)
b$86B1 DEFB $02,$02,$00,$00,$FB,$FF,$FB,$FF
 $86B9 DEFB $FB,$FF,$FB,$FF,$FB,$FF,$FB,$FF
 $86C1 DEFB $FB,$FF,$FF,$FF,$00,$00,$FF,$EF
 $86C9 DEFB $FF,$EF,$FF,$EF,$FF,$EF,$FF,$EF
 $86D1 DEFB $FF,$EF,$00,$07

; UDG 53
;
; #CALL:print_udg(#PC,UDG_53)
b$86D5 DEFB $02,$01,$FF,$FF,$00,$00,$FF,$EF
 $86DD DEFB $FF,$EF,$FF,$EF,$FF,$EF,$FF,$EF
 $86E5 DEFB $FF,$EF,$00,$07

; UDG 54
;
; #CALL:print_udg(#PC,UDG_54)
b$86E9 DEFB $01,$01,$FE,$00,$FF,$FF,$FF,$FF
 $86F1 DEFB $00,$00,$04

; UDG 55
;
; #CALL:print_udg(#PC,UDG_55)
b$86F4 DEFB $01,$01,$7E,$7E,$01,$AA,$FF,$FF
 $86FC DEFB $FF,$FF,$04

; UDG 56
;
; #CALL:print_udg(#PC,UDG_56)
b$86FF DEFB $01,$02,$83,$C7,$C7,$FF,$83,$FF
 $8707 DEFB $EF,$EF,$10,$18,$2A,$6C,$74,$5C
 $870F DEFB $28,$00,$10,$06

; UDG 57
;
; #CALL:print_udg(#PC,UDG_57)
b$8713 DEFB $01,$01,$FF,$00,$FF,$FF,$FF,$FF
 $871B DEFB $AA,$00,$07

; UDG 58
;
; #CALL:print_udg(#PC,UDG_58)
b$871E DEFB $01,$01,$7F,$80,$7F,$7F,$7F,$7F
 $8726 DEFB $2A,$00,$07

; UDG 59
;
; #CALL:print_udg(#PC,UDG_59)
b$8729 DEFB $01,$01,$7F,$80,$7F,$7F,$7F,$7D
 $8731 DEFB $5E,$B5,$07

; UDG 5A
;
; #CALL:print_udg(#PC,UDG_5A)
b$8734 DEFB $01,$01,$FE,$01,$FE,$FE,$FE,$FE
 $873C DEFB $AA,$00,$07

; UDG 5B
;
; #CALL:print_udg(#PC,UDG_5B)
b$873F DEFB $01,$01,$FE,$01,$FE,$FE,$FE,$BE
 $8747 DEFB $7A,$AD,$07

; UDG 5C
b$874A DEFB $04,$01,$FF,$FF,$FF,$FF,$00,$00
 $8752 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$FF
 $875A DEFB $FF,$FF,$FF,$FD,$FF,$FF,$FF,$DE
 $8762 DEFB $DB,$BF,$FE,$B6,$B6,$EE,$DD,$55
 $876A DEFB $55,$55,$00,$07

; UDG 5D
;
; #CALL:print_udg(#PC,UDG_5D)
b$876E DEFB $02,$01,$6A,$FF,$35,$00,$1A,$AA
 $8776 DEFB $0D,$54,$06,$AA,$03,$54,$01,$AA
 $877E DEFB $00,$D4,$05,$05

; UDG 5F
;
; #CALL:print_udg(#PC,UDG_5F)
b$8782 DEFB $01,$01,$7F,$00,$11,$09,$05,$02
 $878A DEFB $01,$00,$05

; UDG 60
;
; #CALL:print_udg(#PC,UDG_60)
b$878D DEFB $01,$01,$BF,$40,$A1,$91,$89,$85
 $8795 DEFB $02,$FD,$05

; UDG 61
;
; #CALL:print_udg(#PC,UDG_61)
b$8798 DEFB $01,$01,$FE,$41,$A2,$94,$88,$90
 $87A0 DEFB $20,$C0,$05

; UDG AA
;
; #CALL:print_udg(#PC,UDG_AA)
b$87A3 DEFB $01,$01,$18,$18,$2C,$3C,$18,$2C
 $87AB DEFB $18,$00,$03

; UDG A9
;
; #CALL:print_udg(#PC,UDG_A9)
b$87AE DEFB $02,$03,$73,$7C,$7E,$A0,$79,$54
 $87B6 DEFB $7A,$A8,$71,$54,$60,$A8,$40,$50
 $87BE DEFB $00,$28,$40,$C8,$13,$98,$21,$FC
 $87C6 DEFB $4D,$EC,$59,$FE,$5B,$FE,$55,$EE
 $87CE DEFB $6D,$F0,$24,$12,$20,$A2,$15,$54
 $87D6 DEFB $48,$89,$11,$44,$2A,$AA,$24,$00
 $87DE DEFB $4A,$70,$05,$04,$05,$05,$06,$06

; UDG AC
;
; #CALL:print_udg(#PC,UDG_AC)
b$87E6 DEFB $02,$03,$01,$80,$F8,$1B,$FE,$7B
 $87EE DEFB $FF,$FB,$FF,$FB,$FF,$FB,$FF,$FB
 $87F6 DEFB $FF,$FB,$C9,$93,$C1,$83,$C1,$83
 $87FE DEFB $C1,$83,$E1,$87,$63,$C6,$70,$0E
 $8806 DEFB $38,$1C,$FF,$FF,$C0,$03,$C0,$03
 $880E DEFB $C3,$C3,$C1,$83,$C9,$93,$CF,$F3
 $8816 DEFB $CF,$F3,$07,$07,$30,$10,$10,$30

; UDG AB
;
; #CALL:print_udg(#PC,UDG_AB)
b$881E DEFB $02,$03,$0F,$FE,$1F,$FE,$3F,$FE
 $8826 DEFB $7F,$E6,$FF,$C6,$FE,$02,$B0,$02
 $882E DEFB $60,$00,$19,$40,$05,$42,$03,$C6
 $8836 DEFB $01,$F6,$01,$FE,$03,$FE,$02,$7E
 $883E DEFB $07,$FE,$42,$04,$41,$08,$28,$90
 $8846 DEFB $10,$A0,$15,$24,$98,$18,$62,$20
 $884E DEFB $31,$20,$00,$04

; UDG 5E
;
; #CALL:print_udg(#PC,UDG_5E)
b$8852 DEFB $03,$02,$78,$FF,$1E,$02,$00,$40
 $885A DEFB $38,$FF,$1C,$BA,$FF,$5D,$B8,$FF
 $8862 DEFB $1D,$B3,$7E,$6D,$B3,$7E,$6D,$00
 $886A DEFB $00,$00,$FF,$FF,$FF,$00,$00,$00
 $8872 DEFB $73,$7E,$6E,$00,$00,$00,$FF,$FF
 $887A DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$52
 $8882 DEFB $AA,$4A,$00,$07

; UDG B5
;
; #CALL:print_udg(#PC,UDG_B5)
b$8886 DEFB $04,$02,$0F,$FF,$FF,$FC,$07,$FF
 $888E DEFB $FF,$FA,$01,$FF,$FF,$FC,$00,$7F
 $8896 DEFB $FF,$C8,$01,$80,$00,$30,$03,$00
 $889E DEFB $00,$18,$05,$00,$00,$14,$00,$00
 $88A6 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$FF
 $88AE DEFB $FF,$FF,$00,$00,$00,$00,$AA,$AA
 $88B6 DEFB $AA,$AA,$7F,$FF,$FF,$FC,$7F,$FF
 $88BE DEFB $FF,$FA,$3F,$FF,$FF,$FC,$1F,$FF
 $88C6 DEFB $FF,$FA,$00,$07

; UDG B6
;
; #CALL:print_udg(#PC,UDG_B6)
b$88CA DEFB $01,$01,$02,$07,$02,$00,$1E,$1A
 $88D2 DEFB $02,$00,$05

; UDG BF
;
; #CALL:print_udg(#PC,UDG_BF)
b$88D5 DEFB $03,$04,$0F,$0A,$00,$07,$15,$00
 $88DD DEFB $07,$0A,$00,$01,$15,$00,$00,$0A
 $88E5 DEFB $00,$00,$15,$00,$00,$0A,$00,$00
 $88ED DEFB $01,$00,$1E,$00,$00,$1E,$00,$00
 $88F5 DEFB $1E,$20,$00,$1E,$14,$00,$1E,$2A
 $88FD DEFB $00,$1E,$14,$00,$0F,$2A,$00,$0F
 $8905 DEFB $14,$00,$14,$E1,$C0,$2A,$78,$70
 $890D DEFB $54,$7C,$1C,$2A,$7C,$06,$14,$7C
 $8915 DEFB $00,$02,$7C,$00,$00,$3C,$00,$10
 $891D DEFB $0C,$00,$40,$00,$00,$F0,$00,$00
 $8925 DEFB $1C,$00,$00,$07,$00,$00,$51,$C0
 $892D DEFB $00,$28,$70,$00,$54,$1C,$00,$28
 $8935 DEFB $87,$00,$01,$06,$45,$01,$06,$45
 $893D DEFB $04,$03,$04,$04,$04,$45

; UDG C1
;
; #CALL:print_udg(#PC,UDG_C1)
b$8943 DEFB $02,$02,$B3,$F6,$AD,$AD,$73,$DA
 $894B DEFB $B5,$6A,$ED,$57,$EB,$DB,$DE,$F5
 $8953 DEFB $FF,$F7,$EF,$FB,$10,$02,$22,$A9
 $895B DEFB $4B,$F4,$55,$E2,$8B,$E8,$4B,$C2
 $8963 DEFB $91,$D5,$28,$18,$06,$04

; UDG C4
;
; #CALL:print_udg(#PC,UDG_C4)
b$8969 DEFB $04,$02,$EA,$B7,$10,$40,$AE,$DB
 $8971 DEFB $15,$14,$F5,$AF,$08,$50,$FE,$BF
 $8979 DEFB $02,$20,$EE,$DF,$15,$50,$FD,$BF
 $8981 DEFB $00,$40,$FD,$BF,$02,$80,$FD,$FF
 $8989 DEFB $00,$00,$E2,$FF,$FE,$4B,$14,$00
 $8991 DEFB $00,$14,$26,$95,$51,$0C,$72,$4F
 $8999 DEFB $F4,$52,$11,$17,$F1,$14,$2A,$4F
 $89A1 DEFB $E4,$28,$2A,$07,$E8,$A2,$0C,$A9
 $89A9 DEFB $C2,$14,$28,$28,$02,$02,$05,$06
 $89B1 DEFB $04,$03

; UDG CE
;
; #CALL:print_udg(#PC,UDG_CE)
b$89B3 DEFB $02,$01,$8F,$F0,$AF,$F2,$AF,$F6
 $89BB DEFB $8F,$F6,$0F,$F2,$0F,$F0,$0F,$F0
 $89C3 DEFB $00,$00,$06,$06

; UDG CB - bank card
;
; #CALL:print_udg(#PC,UDG_CB)
b$89C7 DEFB $02,$02,$47,$C2,$46,$22,$46,$22
 $89CF DEFB $47,$C2,$40,$02,$7F,$FE,$80,$01
 $89D7 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $89DF DEFB $80,$01,$7F,$FE,$78,$3E,$79,$DE
 $89E7 DEFB $78,$3E,$30,$30,$68,$68

; UDG CC - aerosol
;
; #CALL:print_udg(#PC,UDG_CC)
b$89ED DEFB $01,$02,$A3,$A3,$A3,$A3,$A3,$FF
 $89F5 DEFB $A3,$FF,$FF,$ED,$C7,$FF,$A3,$FF
 $89FD DEFB $A3,$A3,$60,$60

; UDG CD - oxygen tank
;
; #CALL:print_udg(#PC,UDG_CD)
b$8A01 DEFB $01,$02,$D3,$D3,$D3,$D3,$D3,$D3
 $8A09 DEFB $E7,$FF,$F9,$F6,$F0,$F9,$E7,$DB
 $8A11 DEFB $D3,$D3,$38,$38

; UDG 99
;
; #CALL:print_udg(#PC,UDG_99)
b$8A15 DEFB $01,$01,$FF,$00,$55,$FF,$00,$00
 $8A1D DEFB $00,$00,$07

; UDG 9A
;
; #CALL:print_udg(#PC,UDG_9A)
b$8A20 DEFB $01,$02,$2C,$2C,$2C,$2C,$00,$2C
 $8A28 DEFB $5E,$00,$FF,$00,$59,$AD,$2C,$2C
 $8A30 DEFB $2C,$2C,$07,$07

; UDG 9B
;
; #CALL:print_udg(#PC,UDG_9B)
b$8A34 DEFB $03,$01,$D0,$0F,$00,$FD,$00,$F0
 $8A3C DEFB $7F,$D0,$0E,$0F,$FD,$03,$00,$FF
 $8A44 DEFB $D1,$70,$0F,$F1,$8F,$00,$FE,$80
 $8A4C DEFB $F0,$0E,$00,$03

; UDG 9C
;
; #CALL:print_udg(#PC,UDG_9C)
b$8A50 DEFB $02,$02,$07,$0F,$03,$00,$03,$D0
 $8A58 DEFB $01,$FD,$00,$FF,$70,$0F,$8F,$00
 $8A60 DEFB $80,$F0,$63,$C6,$97,$09,$B7,$7B
 $8A68 DEFB $F6,$0F,$67,$26,$06,$20,$07,$20
 $8A70 DEFB $00,$10,$03,$03,$07,$07

; UDG 9D
;
; #CALL:print_udg(#PC,UDG_9D)
b$8A76 DEFB $02,$01,$D0,$18,$FD,$04,$7F,$A2
 $8A7E DEFB $0F,$C2,$00,$F1,$00,$61,$00,$31
 $8A86 DEFB $00,$0E,$03,$03

; UDG 9E
;
; #CALL:print_udg(#PC,UDG_9E)
b$8A8A DEFB $01,$01,$00,$FF,$B9,$70,$60,$20
 $8A92 DEFB $81,$C3,$10

; UDG 10
;
; #CALL:print_udg(#PC,UDG_10)
b$8A95 DEFB $08,$01,$FF,$FF,$FF,$FB,$FF,$FF
 $8A9D DEFB $FF,$FF,$FD,$FD,$67,$D4,$AF,$FF
 $8AA5 DEFB $FD,$BF,$EA,$AE,$8A,$AA,$95,$DD
 $8AAD DEFB $A9,$5D,$55,$55,$53,$35,$56,$AA
 $8AB5 DEFB $52,$AB,$A4,$28,$48,$42,$29,$40
 $8ABD DEFB $C6,$55,$10,$B1,$12,$09,$45,$15
 $8AC5 DEFB $10,$88,$46,$D4,$96,$63,$10,$A8
 $8ACD DEFB $AA,$34,$60,$0C,$C0,$40,$42,$06
 $8AD5 DEFB $13,$48,$00,$04

; UDG 11
;
; #CALL:print_udg(#PC,UDG_11)
b$8AD9 DEFB $03,$03,$09,$00,$CC,$20,$B2,$CC
 $8AE1 DEFB $08,$62,$CC,$10,$64,$8C,$04,$6D
 $8AE9 DEFB $8C,$01,$ED,$1A,$24,$DB,$57,$08
 $8AF1 DEFB $DE,$57,$00,$55,$02,$20,$A4,$12
 $8AF9 DEFB $00,$4A,$56,$04,$A4,$56,$08,$52
 $8B01 DEFB $B6,$42,$64,$A6,$08,$52,$AE,$01
 $8B09 DEFB $2A,$CE,$01,$29,$50,$52,$D6,$4A
 $8B11 DEFB $AD,$7D,$B5,$7F,$DF,$F9,$BD,$FD
 $8B19 DEFB $B4,$2F,$BA,$4A,$43,$D5,$15,$42
 $8B21 DEFB $AA,$A8,$07,$07,$07,$07,$04,$07
 $8B29 DEFB $04,$04,$04

; UDG 00
;
; #CALL:print_udg(#PC,UDG_00)
b$8B2C DEFB $03,$01,$92,$92,$8A,$55,$B5,$A6
 $8B34 DEFB $BE,$DB,$6D,$5F,$EF,$F7,$AB,$FF
 $8B3C DEFB $FF,$05,$FF,$FF,$22,$5D,$FF,$34
 $8B44 DEFB $AA,$57,$00,$04

; UDG 01
;
; #CALL:print_udg(#PC,UDG_01)
b$8B48 DEFB $02,$09,$77,$84,$70,$E3,$19,$F8
 $8B50 DEFB $08,$30,$0E,$1D,$66,$F1,$10,$1F
 $8B58 DEFB $67,$B8,$40,$AD,$92,$23,$2C,$8D
 $8B60 DEFB $37,$37,$49,$AD,$31,$47,$AC,$AA
 $8B68 DEFB $50,$5F,$09,$50,$10,$08,$01,$17
 $8B70 DEFB $00,$00,$E4,$84,$00,$10,$C9,$00
 $8B78 DEFB $10,$47,$01,$08,$14,$91,$2B,$22
 $8B80 DEFB $75,$91,$2B,$22,$71,$91,$23,$26
 $8B88 DEFB $12,$12,$38,$8A,$76,$11,$AA,$A2
 $8B90 DEFB $45,$15,$A0,$A2,$4A,$08,$28,$24
 $8B98 DEFB $00,$0E,$00,$0C,$10,$30,$50,$82
 $8BA0 DEFB $50,$95,$51,$4A,$50,$95,$51,$62
 $8BA8 DEFB $02,$55,$88,$00,$54,$51,$CC,$81
 $8BB0 DEFB $20,$7C,$54,$56,$B6,$8A,$8A,$15
 $8BB8 DEFB $44,$A8,$01,$E0,$22,$12,$0D,$24
 $8BC0 DEFB $45,$10,$20,$28,$52,$82,$1C,$B2
 $8BC8 DEFB $37,$AA,$25,$11,$8A,$82,$1D,$67
 $8BD0 DEFB $7F,$72,$F2,$90,$64,$22,$6A,$2A
 $8BD8 DEFB $94,$5A,$04,$04,$44,$04,$04,$04
 $8BE0 DEFB $42,$42,$04,$04,$07,$04,$43,$04
 $8BE8 DEFB $04,$04,$04,$42

; UDG 04
;
; #CALL:print_udg(#PC,UDG_04)
b$8BEC DEFB $01,$05,$0D,$0C,$0C,$0C,$0C,$0C
 $8BF4 DEFB $0C,$0D,$00,$04,$0D,$0D,$0D,$0D
 $8BFC DEFB $0D,$0D,$0A,$61,$A4,$4A,$0C,$31
 $8C04 DEFB $29,$11,$88,$55,$22,$55,$28,$45
 $8C0C DEFB $2A,$40,$00,$00,$FE,$00,$A8,$FE
 $8C14 DEFB $FC,$E0,$07,$07,$43,$46,$07

; UDG 02
;
; #CALL:print_udg(#PC,UDG_02)
b$8C1B DEFB $02,$03,$1A,$20,$02,$51,$28,$E8
 $8C23 DEFB $49,$55,$14,$E8,$2D,$54,$48,$E9
 $8C2B DEFB $22,$53,$24,$53,$69,$A9,$34,$D0
 $8C33 DEFB $69,$61,$34,$55,$68,$A4,$36,$12
 $8C3B DEFB $4D,$49,$39,$80,$10,$37,$45,$4B
 $8C43 DEFB $AA,$01,$44,$A2,$9D,$D1,$22,$91
 $8C4B DEFB $49,$69,$04,$06,$02,$06,$04,$04

; UDG 03
;
; #CALL:print_udg(#PC,UDG_03)
b$8C53 DEFB $02,$03,$01,$6E,$52,$B2,$A4,$F8
 $8C5B DEFB $BD,$7C,$4E,$1E,$3D,$46,$AA,$A8
 $8C63 DEFB $55,$40,$D3,$E6,$7C,$D2,$17,$3C
 $8C6B DEFB $89,$DF,$1C,$7F,$A8,$99,$95,$EE
 $8C73 DEFB $4F,$9F,$39,$F4,$12,$83,$3C,$EC
 $8C7B DEFB $E1,$38,$00,$78,$72,$86,$14,$F2
 $8C83 DEFB $3F,$8E,$00,$04

; UDG 05
;
; #CALL:print_udg(#PC,UDG_05)
b$8C87 DEFB $01,$03,$B5,$4A,$A5,$12,$24,$49
 $8C8F DEFB $2A,$00,$00,$19,$27,$0F,$15,$4A
 $8C97 DEFB $A5,$12,$00,$01,$02,$06,$07,$0E
 $8C9F DEFB $09,$02,$04,$04,$07

; UDG 06
;
; #CALL:print_udg(#PC,UDG_06)
b$8CA4 DEFB $02,$01,$44,$22,$AA,$55,$44,$22
 $8CAC DEFB $00,$00,$3F,$FC,$2A,$54,$00,$00
 $8CB4 DEFB $00,$00,$05,$05

; UDG 07
;
; #CALL:print_udg(#PC,UDG_07)
b$8CB8 DEFB $01,$01,$00,$FF,$07,$FF,$3F,$FF
 $8CC0 DEFB $7F,$FF,$10

; UDG 08
;
; #CALL:print_udg(#PC,UDG_08)
b$8CC3 DEFB $01,$01,$00,$FF,$E0,$FF,$FC,$FF
 $8CCB DEFB $FE,$FF,$10

; UDG 09
;
; #CALL:print_udg(#PC,UDG_09)
b$8CCE DEFB $01,$03,$00,$00,$00,$00,$00,$00
 $8CD6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8CDE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8CE6 DEFB $00,$00,$00,$45

; UDG 0A
;
; #CALL:print_udg(#PC,UDG_0A)
b$8CEA DEFB $02,$02,$71,$E0,$73,$C0,$77,$80
 $8CF2 DEFB $77,$00,$56,$00,$74,$00,$70,$00
 $8CFA DEFB $70,$00,$7B,$EF,$04,$10,$7F,$FF
 $8D02 DEFB $5F,$F7,$7F,$FF,$00,$00,$70,$78
 $8D0A DEFB $70,$F0,$00,$04

; UDG 0B
;
; #CALL:print_udg(#PC,UDG_0B)
b$8D0E DEFB $02,$02,$07,$8E,$03,$CE,$01,$EE
 $8D16 DEFB $00,$EE,$00,$6A,$00,$2E,$00,$0E
 $8D1E DEFB $00,$0E,$F7,$DE,$08,$20,$FF,$FE
 $8D26 DEFB $EF,$FA,$FF,$FE,$00,$00,$1E,$0E
 $8D2E DEFB $0F,$0E,$00,$04

; UDG 0C
;
; #CALL:print_udg(#PC,UDG_0C)
b$8D32 DEFB $02,$01,$81,$81,$FF,$FF,$E3,$E3
 $8D3A DEFB $C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3
 $8D42 DEFB $FF,$FF,$10,$10

; UDG 0D
;
; #CALL:print_udg(#PC,UDG_0D)
b$8D46 DEFB $01,$01,$8F,$70,$6E,$0D,$E1,$DC
 $8D4E DEFB $1B,$C3,$06

; UDG 0E
;
; #CALL:print_udg(#PC,UDG_0E)
b$8D51 DEFB $01,$01,$FF,$FF,$00,$00,$00,$00
 $8D59 DEFB $00,$00,$02

; UDG 12
;
; #CALL:print_udg(#PC,UDG_12)
b$8D5C DEFB $04,$03,$8A,$A2,$10,$AA,$A6,$D6
 $8D64 DEFB $93,$54,$6D,$AA,$15,$72,$F7,$FE
 $8D6C DEFB $8F,$ED,$FF,$FF,$3F,$FC,$FF,$FF
 $8D74 DEFB $FF,$65,$FF,$FF,$FE,$14,$FF,$F1
 $8D7C DEFB $C5,$42,$FF,$FE,$1F,$00,$00,$00
 $8D84 DEFB $80,$A0,$FF,$FE,$1F,$54,$FF,$FE
 $8D8C DEFB $90,$64,$FF,$F6,$10,$28,$DE,$DA
 $8D94 DEFB $98,$53,$B6,$B6,$18,$94,$55,$56
 $8D9C DEFB $98,$48,$BF,$FF,$FF,$FE,$63,$9B
 $8DA4 DEFB $62,$27,$6D,$69,$5E,$EB,$6D,$0A
 $8DAC DEFB $52,$67,$6D,$6B,$5A,$EB,$63,$6B
 $8DB4 DEFB $62,$2B,$BF,$FF,$FF,$FE,$00,$00
 $8DBC DEFB $00,$00,$04,$04,$04,$04,$07,$07
 $8DC4 DEFB $07,$04,$06,$06,$06,$06

; UDG 15
;
; #CALL:print_udg(#PC,UDG_15)
b$8DCA DEFB $03,$06,$1A,$98,$22,$1A,$AA,$88
 $8DD2 DEFB $13,$2C,$62,$13,$2D,$21,$0B,$2F
 $8DDA DEFB $08,$03,$2C,$B1,$01,$14,$44,$01
 $8DE2 DEFB $04,$80,$25,$9A,$08,$35,$9C,$40
 $8DEA DEFB $35,$9A,$08,$35,$A8,$81,$25,$30
 $8DF2 DEFB $04,$29,$32,$50,$39,$14,$92,$19
 $8DFA DEFB $18,$80,$4A,$AA,$00,$4A,$AC,$0A
 $8E02 DEFB $4A,$A9,$20,$4A,$AE,$09,$66,$8C
 $8E0A DEFB $10,$67,$5E,$42,$67,$9C,$20,$27
 $8E12 DEFB $9C,$82,$7B,$E6,$88,$3D,$A6,$0A
 $8E1A DEFB $3D,$44,$80,$3D,$A6,$20,$5D,$A4
 $8E22 DEFB $06,$5E,$81,$28,$5E,$C8,$05,$5E
 $8E2A DEFB $C8,$40,$38,$DA,$20,$39,$DB,$11
 $8E32 DEFB $39,$DA,$42,$3D,$DC,$04,$3D,$EC
 $8E3A DEFB $52,$5B,$F4,$C0,$5B,$F6,$01,$5B
 $8E42 DEFB $E6,$24,$36,$04,$A2,$37,$56,$50
 $8E4A DEFB $37,$76,$94,$33,$72,$03,$33,$72
 $8E52 DEFB $95,$33,$75,$02,$52,$79,$A2,$5A
 $8E5A DEFB $7A,$28,$00,$07

; UDG 17
;
; #CALL:print_udg(#PC,UDG_17)
b$8E5E DEFB $03,$04,$10,$87,$27,$52,$2E,$67
 $8E66 DEFB $00,$AC,$E7,$06,$2C,$E7,$62,$5C
 $8E6E DEFB $E6,$12,$5D,$C6,$20,$59,$C6,$02
 $8E76 DEFB $13,$84,$84,$53,$9C,$28,$47,$DC
 $8E7E DEFB $82,$67,$C8,$20,$67,$CA,$4A,$67
 $8E86 DEFB $CA,$03,$27,$8A,$01,$AF,$12,$A5
 $8E8E DEFB $8F,$12,$41,$2D,$36,$0A,$AD,$36
 $8E96 DEFB $09,$AD,$2E,$C0,$2D,$3C,$A9,$4D
 $8E9E DEFB $3C,$40,$4D,$9C,$45,$4B,$9C,$14
 $8EA6 DEFB $5B,$9C,$02,$7C,$97,$31,$39,$BF
 $8EAE DEFB $A8,$B9,$BD,$15,$33,$3D,$22,$77
 $8EB6 DEFB $3D,$24,$77,$3D,$5D,$2F,$3A,$08
 $8EBE DEFB $2F,$36,$00,$07

; UDG 18
;
; #CALL:print_udg(#PC,UDG_18)
b$8EC2 DEFB $03,$03,$0D,$ED,$84,$09,$CD,$45
 $8ECA DEFB $0D,$8E,$04,$19,$8E,$58,$1B,$92
 $8ED2 DEFB $84,$3B,$BB,$89,$27,$B2,$90,$0B
 $8EDA DEFB $22,$29,$24,$D2,$50,$52,$DA,$02
 $8EE2 DEFB $24,$6C,$90,$2A,$EC,$44,$50,$DC
 $8EEA DEFB $00,$09,$AD,$0A,$21,$ED,$49,$05
 $8EF2 DEFB $EC,$09,$25,$12,$21,$94,$EB,$C9
 $8EFA DEFB $4F,$FF,$FA,$7B,$4A,$B7,$D5,$A1
 $8F02 DEFB $4C,$6A,$04,$12,$91,$46,$44,$6A
 $8F0A DEFB $56,$01,$07,$07,$07,$04,$07,$07
 $8F12 DEFB $04,$04,$04

; UDG 1A
;
; #CALL:print_udg(#PC,UDG_1A)
b$8F15 DEFB $01,$01,$EE,$77,$00,$00,$00,$00
 $8F1D DEFB $00,$00,$06

; UDG 1B
;
; #CALL:print_udg(#PC,UDG_1B)
b$8F20 DEFB $01,$02,$C6,$7F,$31,$18,$0C,$06
 $8F28 DEFB $03,$01,$7F,$3E,$80,$C0,$E0,$B0
 $8F30 DEFB $98,$8C,$06,$06

; UDG 1C
;
; #CALL:print_udg(#PC,UDG_1C)
b$8F34 DEFB $01,$02,$63,$FE,$8C,$18,$30,$60
 $8F3C DEFB $C0,$80,$FE,$7C,$01,$03,$07,$0D
 $8F44 DEFB $19,$31,$06,$06

; UDG 1D
;
; #CALL:print_udg(#PC,UDG_1D)
b$8F48 DEFB $01,$01,$FF,$FF,$00,$FF,$55,$AA
 $8F50 DEFB $55,$FF,$04

; UDG 1E
;
; #CALL:print_udg(#PC,UDG_1E)
b$8F53 DEFB $02,$02,$00,$00,$3F,$C0,$00,$00
 $8F5B DEFB $7F,$80,$00,$00,$7F,$00,$55,$00
 $8F63 DEFB $00,$00,$00,$00,$00,$FF,$00,$00
 $8F6B DEFB $03,$FC,$00,$00,$07,$F8,$00,$00
 $8F73 DEFB $1F,$E0,$00,$03

; UDG 1F
;
; #CALL:print_udg(#PC,UDG_1F)
b$8F77 DEFB $02,$01,$00,$00,$00,$7F,$00,$00
 $8F7F DEFB $01,$FC,$00,$00,$0F,$F0,$00,$00
 $8F87 DEFB $3F,$C0,$03,$03

; UDG 20
;
; #CALL:print_udg(#PC,UDG_20)
b$8F8B DEFB $03,$01,$00,$00,$00,$00,$03,$FF
 $8F93 DEFB $00,$00,$00,$00,$3F,$F0,$00,$00
 $8F9B DEFB $00,$01,$FF,$00,$00,$00,$00,$0F
 $8FA3 DEFB $F0,$00,$00,$03

; UDG 21
;
; #CALL:print_udg(#PC,UDG_21)
b$8FA7 DEFB $0A,$01,$00,$00,$00,$00,$00,$00
 $8FAF DEFB $00,$00,$00,$00,$00,$00,$00,$0F
 $8FB7 DEFB $FF,$FF,$F0,$00,$00,$00,$00,$00
 $8FBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8FC7 DEFB $00,$00,$7F,$FF,$FF,$FF,$FF,$FE
 $8FCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8FD7 DEFB $00,$00,$00,$00,$00,$3F,$FF,$E0
 $8FDF DEFB $00,$00,$07,$FF,$FC,$00,$00,$00
 $8FE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8FEF DEFB $1F,$FF,$00,$00,$00,$00,$00,$00
 $8FF7 DEFB $FF,$F8,$00,$03

; UDG 22
;
; #CALL:print_udg(#PC,UDG_22)
b$8FFB DEFB $03,$03,$2F,$E0,$00,$1F,$20,$00
 $9003 DEFB $3E,$40,$00,$3C,$80,$00,$D9,$00
 $900B DEFB $00,$6A,$00,$00,$30,$00,$00,$10
 $9013 DEFB $00,$00,$12,$0F,$E0,$0A,$1F,$C0
 $901B DEFB $0A,$3F,$80,$04,$7F,$00,$00,$FE
 $9023 DEFB $00,$F9,$FC,$00,$03,$F8,$00,$27
 $902B DEFB $F0,$00,$00,$00,$00,$80,$80,$10
 $9033 DEFB $81,$00,$38,$41,$00,$7C,$41,$00
 $903B DEFB $FE,$21,$01,$FC,$21,$03,$F8,$12
 $9043 DEFB $07,$F0,$00,$06

; UDG 23
;
; #CALL:print_udg(#PC,UDG_23)
b$9047 DEFB $02,$01,$00,$00,$FE,$00,$00,$00
 $904F DEFB $3F,$80,$00,$00,$0F,$F0,$00,$00
 $9057 DEFB $03,$FC,$03,$03

; UDG 24
;
; #CALL:print_udg(#PC,UDG_24)
b$905B DEFB $02,$02,$00,$00,$03,$FC,$00,$00
 $9063 DEFB $01,$FE,$00,$00,$00,$FE,$00,$AA
 $906B DEFB $00,$00,$00,$00,$FF,$00,$00,$00
 $9073 DEFB $3F,$C0,$00,$00,$1F,$E0,$00,$00
 $907B DEFB $07,$F8,$00,$03

; UDG 25
;
; #CALL:print_udg(#PC,UDG_25)
b$907F DEFB $01,$01,$FE,$00,$2A,$3E,$1E,$06
 $9087 DEFB $02,$02,$03

; UDG 26
;
; #CALL:print_udg(#PC,UDG_26)
b$908A DEFB $01,$01,$7F,$00,$54,$7C,$78,$60
 $9092 DEFB $40,$40,$03

; UDG 27
;
; #CALL:print_udg(#PC,UDG_27)
b$9095 DEFB $01,$01,$FF,$00,$00,$00,$FF,$00
 $909D DEFB $00,$00,$0E

; UDG 28
;
; #CALL:print_udg(#PC,UDG_28)
b$90A0 DEFB $02,$01,$FF,$FF,$00,$00,$00,$00
 $90A8 DEFB $00,$00,$FF,$FF,$00,$00,$00,$00
 $90B0 DEFB $00,$00,$0E,$0E

; UDG 29
;
; #CALL:print_udg(#PC,UDG_29)
b$90B4 DEFB $01,$01,$8E,$86,$8E,$86,$8E,$86
 $90BC DEFB $8E,$86,$07

; UDG 2A
;
; #CALL:print_udg(#PC,UDG_2A)
b$90BF DEFB $02,$02,$39,$3E,$00,$9E,$00,$9E
 $90C7 DEFB $00,$00,$01,$FF,$00,$00,$01,$FF
 $90CF DEFB $00,$00,$38,$00,$3B,$C0,$3B,$F0
 $90D7 DEFB $3B,$F8,$3B,$FC,$3B,$FC,$3B,$FE
 $90DF DEFB $3A,$FE,$00,$07

; UDG 2B
;
; #CALL:print_udg(#PC,UDG_2B)
b$90E3 DEFB $02,$01,$11,$A3,$11,$D3,$11,$CB
 $90EB DEFB $FF,$C5,$01,$CB,$01,$D3,$01,$A3
 $90F3 DEFB $FF,$43,$10,$06

; UDG 2C
;
; #CALL:print_udg(#PC,UDG_2C)
b$90F7 DEFB $02,$01,$C5,$88,$CB,$88,$D3,$88
 $90FF DEFB $A3,$FF,$D3,$80,$CB,$80,$C5,$80
 $9107 DEFB $C2,$FF,$06,$10

; UDG 2D
;
; #CALL:print_udg(#PC,UDG_2D)
b$910B DEFB $07,$02,$FF,$FF,$60,$00,$06,$FF
 $9113 DEFB $FF,$81,$80,$40,$00,$0A,$01,$80
 $911B DEFB $4A,$52,$4E,$1F,$72,$4A,$52,$B4
 $9123 DEFB $2D,$41,$60,$8A,$B4,$2D,$4A,$52
 $912B DEFB $42,$2B,$BA,$4A,$52,$81,$80,$47
 $9133 DEFB $B5,$02,$01,$80,$FF,$FF,$60,$00
 $913B DEFB $06,$FF,$FF,$00,$00,$3F,$FF,$FC
 $9143 DEFB $00,$00,$00,$00,$00,$FF,$00,$00
 $914B DEFB $00,$00,$00,$03,$FF,$C0,$00,$00
 $9153 DEFB $00,$00,$05,$5A,$A0,$00,$00,$00
 $915B DEFB $00,$FF,$FF,$FF,$00,$00,$00,$01
 $9163 DEFB $10,$81,$08,$80,$00,$00,$3F,$FF
 $916B DEFB $FF,$FF,$FC,$00,$07,$FF,$C0,$00
 $9173 DEFB $03,$FF,$E0,$00,$00,$3F,$FF,$FC
 $917B DEFB $00,$00,$04,$04,$04,$04,$04,$44
 $9183 DEFB $44,$05,$05,$05,$45,$45,$45,$45
 $918B DEFB $02,$01,$FF,$FF,$00,$00,$FF,$FF
 $9193 DEFB $00,$00,$FF,$FF,$00,$00,$FF,$7E
 $919B DEFB $00,$C3,$07,$07

; UDG AD
;
; #CALL:print_udg(#PC,UDG_AD)
b$919F DEFB $02,$02,$7F,$FE,$00,$00,$10,$08
 $91A7 DEFB $20,$04,$20,$04,$40,$02,$40,$02
 $91AF DEFB $00,$00,$7F,$FE,$C1,$83,$FF,$11
 $91B7 DEFB $C1,$45,$FF,$01,$C1,$83,$FF,$FF
 $91BF DEFB $C1,$BB,$00,$06

; UDG AE
;
; #CALL:print_udg(#PC,UDG_AE)
b$91C3 DEFB $01,$02,$AE,$AE,$AA,$A0,$A0,$A0
 $91CB DEFB $A0,$A0,$A0,$A0,$A0,$A0,$A0,$AA
 $91D3 DEFB $AE,$AE,$05,$04

; UDG AF
;
; #CALL:print_udg(#PC,UDG_AF)
b$91D7 DEFB $04,$04,$4A,$6F,$FE,$64,$AA,$67
 $91DF DEFB $FC,$6A,$4A,$6A,$AA,$64,$AA,$70
 $91E7 DEFB $00,$6A,$4A,$78,$00,$E4,$AA,$7F
 $91EF DEFB $FF,$EA,$4A,$55,$55,$44,$02,$00
 $91F7 DEFB $00,$00,$4A,$7F,$DB,$64,$AA,$7F
 $91FF DEFB $DB,$6A,$4A,$7F,$B6,$E4,$AA,$7F
 $9207 DEFB $B6,$EA,$4A,$70,$00,$E4,$AA,$65
 $920F DEFB $54,$6A,$4A,$6F,$FE,$64,$AA,$67
 $9217 DEFB $FC,$6A,$4A,$0C,$C0,$00,$AB,$DE
 $921F DEFB $DF,$FE,$4A,$12,$DD,$B6,$AA,$00
 $9227 DEFB $DB,$6E,$4A,$61,$DF,$FE,$AA,$7F
 $922F DEFB $C0,$00,$4A,$7F,$E0,$00,$AA,$7F
 $9237 DEFB $ED,$AA,$4F,$FF,$FF,$E4,$AC,$7F
 $923F DEFB $FF,$EA,$4B,$BF,$FF,$E4,$AA,$3F
 $9247 DEFB $FF,$EA,$4A,$7F,$FF,$E4,$AA,$7F
 $924F DEFB $FF,$EA,$4A,$7F,$FF,$E4,$AA,$61
 $9257 DEFB $FF,$EA,$00,$06

; UDG 0F
;
; #CALL:print_udg(#PC,UDG_0F)
b$925B DEFB $01,$03,$FF,$00,$24,$24,$42,$42
 $9263 DEFB $81,$00,$00,$3C,$3C,$5E,$BF,$BF
 $926B DEFB $7E,$00,$42,$24,$24,$00,$3C,$3C
 $9273 DEFB $00,$7E,$07,$02,$06

; UDG B0
;
; #CALL:print_udg(#PC,UDG_B0)
b$9278 DEFB $01,$02,$00,$AA,$00,$00,$AA,$00
 $9280 DEFB $00,$AA,$AA,$00,$00,$AA,$00,$00
 $9288 DEFB $AA,$00,$02,$02

; UDG B1
;
; #CALL:print_udg(#PC,UDG_B1)
b$928C DEFB $01,$02,$40,$2A,$58,$40,$2A,$58
 $9294 DEFB $60,$3A,$2A,$58,$40,$2A,$58,$40
 $929C DEFB $2A,$58,$06,$06

; UDG B2
;
; #CALL:print_udg(#PC,UDG_B2)
b$92A0 DEFB $01,$02,$02,$B4,$1A,$02,$B4,$1A
 $92A8 DEFB $02,$B4,$B4,$1A,$02,$B4,$1A,$02
 $92B0 DEFB $B4,$1A,$06,$06

; UDG B7 - Blizten on "game over" 0
;
; #CALL:print_udg(#PC,UDG_B7)
b$92B4 DEFB $04,$06,$00,$00,$00,$00,$FB,$FF
 $92BC DEFB $FF,$FF,$00,$00,$00,$00,$3C,$FF
 $92C4 DEFB $FF,$FC,$06,$3F,$FF,$E0,$00,$00
 $92CC DEFB $00,$00,$00,$6F,$FE,$00,$00,$00
 $92D4 DEFB $00,$00,$00,$3F,$00,$00,$00,$3F
 $92DC DEFB $E0,$00,$00,$3F,$C0,$00,$00,$3F
 $92E4 DEFB $8C,$00,$00,$3F,$1C,$00,$00,$1F
 $92EC DEFB $79,$80,$00,$1F,$79,$80,$00,$0F
 $92F4 DEFB $E7,$00,$00,$0C,$00,$10,$00,$1F
 $92FC DEFB $00,$30,$00,$1F,$80,$20,$00,$3F
 $9304 DEFB $C0,$7F,$00,$3D,$FE,$F8,$00,$3D
 $930C DEFB $FE,$F8,$00,$3C,$FE,$38,$00,$3E
 $9314 DEFB $3A,$00,$00,$07,$F8,$00,$00,$1F
 $931C DEFB $F8,$00,$00,$0F,$F8,$00,$00,$0F
 $9324 DEFB $E0,$00,$00,$07,$F0,$00,$00,$07
 $932C DEFB $E0,$00,$00,$03,$C0,$00,$00,$01
 $9334 DEFB $C0,$00,$01,$55,$F8,$00,$02,$AA
 $933C DEFB $C0,$00,$05,$54,$10,$00,$00,$A8
 $9344 DEFB $04,$00,$01,$55,$C6,$00,$00,$2A
 $934C DEFB $EE,$00,$00,$54,$FE,$00,$00,$A1
 $9354 DEFB $FE,$00,$00,$00,$00,$00,$00,$00
 $935C DEFB $00,$00,$00,$54,$00,$00,$00,$AA
 $9364 DEFB $E0,$00,$04,$55,$F0,$00,$02,$AA
 $936C DEFB $F0,$00,$05,$55,$F8,$00,$02,$AB
 $9374 DEFB $F8,$00,$02,$02,$02,$02,$03,$03
 $937C DEFB $03,$03,$03,$03,$03,$07,$07,$07
 $9384 DEFB $07,$07,$06,$06,$07,$07,$06,$06
 $938C DEFB $07,$07

; UDG B8 - Blizten on "game over" 1
;
; #CALL:print_udg(#PC,UDG_B8)
b$938E DEFB $03,$03,$00,$0F,$E0,$00,$1F,$F0
 $9396 DEFB $00,$0F,$F0,$00,$0F,$80,$00,$07
 $939E DEFB $E0,$00,$07,$C0,$00,$03,$C0,$00
 $93A6 DEFB $01,$80,$01,$57,$F9,$02,$AC,$12
 $93AE DEFB $01,$50,$81,$00,$A0,$02,$01,$5C
 $93B6 DEFB $31,$00,$2E,$78,$00,$57,$F8,$00
 $93BE DEFB $03,$F8,$00,$00,$00,$00,$00,$00
 $93C6 DEFB $00,$40,$04,$00,$AB,$EA,$00,$57
 $93CE DEFB $F4,$00,$AB,$F2,$01,$57,$F9,$00
 $93D6 DEFB $AB,$FA,$07,$07,$07,$06,$06,$07
 $93DE DEFB $06,$06,$07

; UDG B9 - Blizten on "game over" 2
;
; #CALL:print_udg(#PC,UDG_B9)
b$93E1 DEFB $03,$03,$00,$FE,$C0,$00,$FF,$C0
 $93E9 DEFB $00,$7F,$C0,$00,$7C,$80,$00,$3F
 $93F1 DEFB $80,$00,$3F,$00,$00,$1E,$00,$00
 $93F9 DEFB $0C,$00,$0A,$FF,$D4,$15,$C3,$0A
 $9401 DEFB $2A,$10,$45,$15,$00,$08,$0A,$43
 $9409 DEFB $14,$15,$E7,$8A,$01,$FF,$E0,$01
 $9411 DEFB $FF,$E0,$00,$00,$00,$00,$00,$00
 $9419 DEFB $0A,$00,$00,$05,$3F,$8A,$2A,$FF
 $9421 DEFB $D5,$15,$7F,$E8,$2A,$FF,$C4,$15
 $9429 DEFB $7F,$EA,$07,$07,$07,$06,$07,$06
 $9431 DEFB $06,$07,$06

; UDG BA - Blizten on "game over" 3
;
; #CALL:print_udg(#PC,UDG_BA)
b$9434 DEFB $03,$03,$00,$F3,$C0,$00,$FF,$C0
 $943C DEFB $00,$DE,$C0,$00,$61,$80,$00,$73
 $9444 DEFB $80,$00,$3F,$00,$00,$1E,$00,$00
 $944C DEFB $0C,$00,$55,$FF,$D4,$2A,$0C,$2A
 $9454 DEFB $54,$41,$14,$28,$00,$2A,$05,$0C
 $945C DEFB $14,$03,$9E,$70,$01,$FF,$E0,$01
 $9464 DEFB $FF,$E0,$00,$00,$00,$00,$00,$00
 $946C DEFB $14,$00,$14,$0A,$7F,$2A,$55,$FF
 $9474 DEFB $D4,$2B,$FF,$E8,$55,$FF,$D5,$2A
 $947C DEFB $FF,$AA,$07,$07,$07,$06,$07,$06
 $9484 DEFB $06,$07,$06

; UDG BB - Blizten on "game over" 4
;
; #CALL:print_udg(#PC,UDG_BB)
b$9487 DEFB $01,$01,$FF,$60,$FF,$60,$FF,$60
 $948F DEFB $FF,$00,$07

; UDG BC
;
; #CALL:print_udg(#PC,UDG_BC)
b$9492 DEFB $01,$01,$FF,$06,$FF,$06,$FF,$06
 $949A DEFB $FF,$00,$07

; UDG BD
;
; #CALL:print_udg(#PC,UDG_BD)
b$949D DEFB $01,$01,$D1,$A1,$C1,$A1,$D1,$A1
 $94A5 DEFB $C1,$A1,$07

; UDG BE
;
; #CALL:print_udg(#PC,UDG_BE)
b$94A8 DEFB $01,$01,$8B,$85,$83,$85,$8B,$85
 $94B0 DEFB $83,$85,$07

; UDG D1
;
; #CALL:print_udg(#PC,UDG_D1)
b$94B3 DEFB $01,$01,$0F,$0F,$F0,$F0,$0F,$0F
 $94BB DEFB $F0,$F0,$05

; UDG D2
;
; #CALL:print_udg(#PC,UDG_D2)
b$94BE DEFB $02,$04,$08,$00,$08,$00,$08,$00
 $94C6 DEFB $08,$00,$08,$00,$08,$00,$08,$00
 $94CE DEFB $08,$00,$08,$40,$08,$00,$08,$40
 $94D6 DEFB $08,$00,$08,$40,$08,$A0,$09,$10
 $94DE DEFB $08,$E0,$00,$40,$08,$00,$00,$40
 $94E6 DEFB $08,$00,$08,$40,$08,$00,$08,$40
 $94EE DEFB $08,$00,$7F,$FF,$00,$00,$55,$55
 $94F6 DEFB $7F,$1F,$7F,$5F,$7F,$5F,$7F,$BF
 $94FE DEFB $3F,$BE,$00,$07

; UDG D3
;
; #CALL:print_udg(#PC,UDG_D3)
b$9502 DEFB $03,$02,$01,$FE,$00,$01,$FC,$00
 $950A DEFB $03,$F8,$00,$03,$F8,$00,$07,$F0
 $9512 DEFB $00,$07,$F0,$00,$07,$F0,$00,$00
 $951A DEFB $00,$00,$48,$5F,$FF,$4B,$00,$00
 $9522 DEFB $43,$AA,$AA,$5F,$FF,$FC,$5F,$FF
 $952A DEFB $F8,$5F,$FF,$F0,$43,$FF,$C0,$01
 $9532 DEFB $FF,$00,$00,$07

; UDG D0
;
; #CALL:print_udg(#PC,UDG_D0)
b$9536 DEFB $01,$02,$62,$62,$7A,$7A,$3A,$26
 $953E DEFB $54,$28,$02,$3A,$7A,$7A,$62,$62
 $9546 DEFB $62,$62,$04,$04

; UDG CF
;
; #CALL:print_udg(#PC,UDG_CF)
b$954A DEFB $02,$03,$40,$28,$8A,$14,$54,$A0
 $9552 DEFB $11,$44,$44,$92,$A6,$24,$17,$EA
 $955A DEFB $23,$C0,$04,$40,$01,$00,$08,$20
 $9562 DEFB $01,$00,$10,$10,$01,$00,$20,$08
 $956A DEFB $01,$00,$01,$02,$02,$7A,$01,$82
 $9572 DEFB $00,$00,$01,$00,$01,$00,$02,$80
 $957A DEFB $01,$00,$06,$04,$03,$03,$07,$07

; UDG C6
;
; #CALL:print_udg(#PC,UDG_C6)
b$9582 DEFB $04,$01,$7F,$FF,$FF,$FC,$80,$00
 $958A DEFB $00,$02,$D2,$42,$21,$2E,$7F,$FF
 $9592 DEFB $FF,$FC,$00,$00,$00,$00,$16,$02
 $959A DEFB $C0,$58,$2F,$05,$E0,$BC,$00,$00
 $95A2 DEFB $00,$00,$00,$05

; UDG C7
;
; #CALL:print_udg(#PC,UDG_C7)
b$95A6 DEFB $02,$02,$41,$05,$41,$05,$41,$05
 $95AE DEFB $41,$05,$41,$05,$7F,$FD,$00,$01
 $95B6 DEFB $FF,$FF,$FF,$FF,$00,$01,$7F,$FD
 $95BE DEFB $41,$05,$41,$05,$41,$05,$41,$05
 $95C6 DEFB $45,$45,$00,$0E

; UDG D5
;
; #CALL:print_udg(#PC,UDG_D5)
b$95CA DEFB $02,$02,$00,$01,$02,$41,$02,$41
 $95D2 DEFB $03,$C1,$02,$41,$02,$41,$02,$41
 $95DA DEFB $02,$41,$FF,$FF,$FF,$FF,$00,$01
 $95E2 DEFB $00,$01,$00,$01,$00,$01,$07,$E1
 $95EA DEFB $07,$E1,$07,$07,$06,$06

; UDG D6
;
; #CALL:print_udg(#PC,UDG_D6)
b$95F0 DEFB $04,$02,$3F,$FF,$BF,$FF,$20,$40
 $95F8 DEFB $A0,$01,$21,$50,$A8,$05,$20,$40
 $9600 DEFB $A0,$01,$20,$40,$A0,$01,$3F,$FF
 $9608 DEFB $BF,$FF,$00,$00,$00,$00,$FF,$FF
 $9610 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00
 $9618 DEFB $00,$00,$3F,$FF,$BF,$FF,$20,$00
 $9620 DEFB $A0,$01,$28,$02,$A8,$05,$20,$00
 $9628 DEFB $A0,$01,$3F,$FF,$BF,$FF,$00,$00
 $9630 DEFB $00,$00,$00,$0E

; UDG D7
;
; #CALL:print_udg(#PC,UDG_D7)
b$9634 DEFB $01,$02,$1C,$2E,$5F,$5F,$7F,$3E
 $963C DEFB $1C,$00,$14,$14,$00,$1C,$22,$1C
 $9644 DEFB $1C,$1C,$06,$06

; UDG D8
;
; #CALL:print_udg(#PC,UDG_D8)
b$9648 DEFB $01,$02,$42,$81,$81,$BF,$BF,$5E
 $9650 DEFB $3C,$00,$7E,$24,$24,$24,$24,$24
 $9658 DEFB $24,$24,$05,$07

; UDG D9
;
; #CALL:print_udg(#PC,UDG_D9)
b$965C DEFB $03,$02,$92,$49,$00,$6D,$B6,$5E
 $9664 DEFB $6D,$B6,$2C,$6D,$B6,$2C,$6D,$B6
 $966C DEFB $2C,$00,$00,$2C,$FF,$FF,$3C,$00
 $9674 DEFB $00,$00,$92,$49,$00,$49,$24,$A0
 $967C DEFB $24,$92,$50,$00,$00,$10,$00,$00
 $9684 DEFB $10,$6D,$B6,$10,$6D,$B6,$10,$6D
 $968C DEFB $B6,$10,$04,$04,$02,$03,$03,$03

; UDG DA
;
; #CALL:print_udg(#PC,UDG_DA)
b$9694 DEFB $02,$03,$11,$00,$21,$18,$11,$18
 $969C DEFB $21,$18,$11,$18,$85,$08,$79,$3C
 $96A4 DEFB $00,$00,$28,$44,$00,$82,$38,$82
 $96AC DEFB $56,$82,$3B,$11,$01,$09,$11,$11
 $96B4 DEFB $21,$08,$00,$06,$00,$09,$00,$09
 $96BC DEFB $00,$09,$00,$01,$00,$BE,$00,$5D
 $96C4 DEFB $00,$01,$02,$03,$06,$06,$45,$03

; UDG DB
;
; #CALL:print_udg(#PC,UDG_DB)
b$96CC DEFB $02,$02,$89,$91,$01,$80,$B9,$97
 $96D4 DEFB $51,$8A,$02,$C0,$05,$E0,$FF,$FF
 $96DC DEFB $00,$00,$2F,$F4,$52,$CA,$21,$84
 $96E4 DEFB $21,$84,$21,$84,$51,$8A,$21,$84
 $96EC DEFB $51,$8A,$00,$03

; UDG C9
;
; #CALL:print_udg(#PC,UDG_C9)
b$96F0 DEFB $03,$01,$7D,$FF,$FF,$85,$FF,$FE
 $96F8 DEFB $8E,$00,$00,$87,$00,$00,$8F,$00
 $9700 DEFB $00,$87,$00,$00,$8F,$00,$00,$00
 $9708 DEFB $00,$00,$06,$05,$05

; UDG DC
;
; #CALL:print_udg(#PC,UDG_DC)
b$970D DEFB $03,$02,$54,$38,$38,$24,$38,$38
 $9715 DEFB $24,$38,$38,$54,$5C,$5C,$24,$BE
 $971D DEFB $BE,$24,$FE,$FE,$18,$7C,$7C,$00
 $9725 DEFB $00,$00,$73,$C7,$C4,$24,$28,$2A
 $972D DEFB $54,$28,$29,$24,$28,$28,$24,$00
 $9735 DEFB $00,$54,$38,$38,$24,$38,$38,$24
 $973D DEFB $38,$44,$05,$02,$03,$05,$05,$03

; UDG CA
;
; #CALL:print_udg(#PC,UDG_CA)
b$9745 DEFB $01,$01,$7E,$87,$8F,$87,$8F,$87
 $974D DEFB $8F,$00,$06

; UDG C8
;
; #CALL:print_udg(#PC,UDG_C8)
b$9750 DEFB $05,$01,$00,$00,$BF,$00,$00,$00
 $9758 DEFB $00,$BF,$00,$00,$3F,$FE,$00,$7F
 $9760 DEFB $FF,$7F,$FF,$5E,$FF,$FE,$00,$00
 $9768 DEFB $3C,$00,$00,$00,$00,$18,$00,$00
 $9770 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9778 DEFB $00,$00,$03,$03,$02,$03,$03

; UDG B3
;
; #CALL:print_udg(#PC,UDG_B3)
b$977F DEFB $04,$01,$60,$00,$00,$25,$3E,$00
 $9787 DEFB $00,$35,$03,$FF,$80,$35,$0F,$3F
 $978F DEFB $FF,$01,$98,$00,$FF,$F9,$60,$00
 $9797 DEFB $07,$FD,$00,$00,$00,$3D,$00,$00
 $979F DEFB $00,$01,$00,$06

; UDG 62
;
; #CALL:print_udg(#PC,UDG_62)
b$97A3 DEFB $02,$01,$00,$00,$00,$00,$00,$00
 $97AB DEFB $10,$08,$10,$08,$10,$08,$10,$08
 $97B3 DEFB $10,$08,$05,$05

; UDG 63
;
; #CALL:print_udg(#PC,UDG_63)
b$97B7 DEFB $02,$01,$17,$E8,$10,$08,$10,$08
 $97BF DEFB $10,$08,$10,$08,$10,$08,$10,$08
 $97C7 DEFB $10,$08,$05,$05

; UDG 64
;
; #CALL:print_udg(#PC,UDG_64)
b$97CB DEFB $02,$01,$17,$E8,$10,$08,$10,$08
 $97D3 DEFB $10,$08,$10,$08,$00,$00,$00,$00
 $97DB DEFB $00,$00,$05,$05

; UDG 96
;
; #CALL:print_udg(#PC,UDG_96)
b$97DF DEFB $02,$01,$1F,$F8,$20,$04,$00,$00
 $97E7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97EF DEFB $00,$00,$05,$05

; UDG 65
;
; #CALL:print_udg(#PC,UDG_65)
b$97F3 DEFB $01,$01,$FF,$00,$AA,$FF,$FF,$00
 $97FB DEFB $AA,$FF,$07

; UDG 66
;
; #CALL:print_udg(#PC,UDG_66)
b$97FE DEFB $01,$01,$FF,$00,$0A,$0F,$0F,$00
 $9806 DEFB $00,$00,$07

; UDG 67
;
; #CALL:print_udg(#PC,UDG_67)
b$9809 DEFB $01,$01,$FF,$00,$A8,$F0,$F0,$00
 $9811 DEFB $00,$00,$07

; UDG 68
;
; #CALL:print_udg(#PC,UDG_68)
b$9814 DEFB $01,$01,$00,$FF,$00,$AA,$FF,$00
 $981C DEFB $AA,$FF,$07

; UDG 69
;
; #CALL:print_udg(#PC,UDG_69)
b$981F DEFB $02,$05,$0D,$50,$0D,$50,$0D,$50
 $9827 DEFB $00,$00,$1F,$F8,$00,$00,$3F,$FC
 $982F DEFB $00,$00,$0D,$50,$0D,$50,$0D,$50
 $9837 DEFB $0D,$50,$0D,$50,$0D,$50,$0D,$50
 $983F DEFB $0D,$50,$0D,$50,$0D,$50,$0D,$50
 $9847 DEFB $0D,$50,$0D,$50,$0D,$50,$0D,$50
 $984F DEFB $0D,$50,$0D,$50,$0D,$50,$0D,$50
 $9857 DEFB $0D,$50,$0D,$50,$0D,$50,$0D,$50
 $985F DEFB $0D,$50,$00,$00,$7F,$FE,$C0,$03
 $9867 DEFB $92,$A9,$D9,$5B,$75,$4E,$0D,$50
 $986F DEFB $0D,$50,$00,$07

; UDG 6A
;
; #CALL:print_udg(#PC,UDG_6A)
b$9873 DEFB $02,$02,$99,$99,$66,$66,$46,$62
 $987B DEFB $89,$91,$51,$8A,$22,$44,$54,$2A
 $9883 DEFB $80,$01,$80,$01,$54,$2A,$22,$44
 $988B DEFB $51,$8A,$89,$91,$46,$62,$66,$66
 $9893 DEFB $99,$99,$07,$07,$05,$05

; UDG 6B
;
; #CALL:print_udg(#PC,UDG_6B)
b$9899 DEFB $02,$01,$FF,$FF,$55,$02,$3F,$04
 $98A1 DEFB $1F,$08,$0F,$10,$07,$20,$03,$40
 $98A9 DEFB $01,$80,$03,$03

; UDG 6C
;
; #CALL:print_udg(#PC,UDG_6C)
b$98AD DEFB $02,$01,$00,$00,$00,$00,$00,$00
 $98B5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98BD DEFB $00,$00,$45,$45

; UDG 6D
;
; #CALL:print_udg(#PC,UDG_6D)
b$98C1 DEFB $02,$01,$7F,$FE,$FF,$FF,$00,$00
 $98C9 DEFB $6F,$F6,$60,$06,$60,$06,$60,$06
 $98D1 DEFB $60,$06,$04,$04

; UDG 6E
;
; #CALL:print_udg(#PC,UDG_6E)
b$98D5 DEFB $02,$02,$01,$80,$31,$89,$41,$89
 $98DD DEFB $25,$6D,$11,$8B,$60,$09,$02,$C0
 $98E5 DEFB $05,$E0,$00,$02,$3B,$87,$EF,$EC
 $98ED DEFB $3D,$F0,$0E,$7C,$07,$80,$01,$E0
 $98F5 DEFB $01,$00,$07,$47,$06,$46

; UDG 6F
;
; #CALL:print_udg(#PC,UDG_6F)
b$98FB DEFB $01,$01,$FF,$10,$10,$10,$FF,$01
 $9903 DEFB $01,$01,$2A

; UDG 70
;
; #CALL:print_udg(#PC,UDG_70)
b$9906 DEFB $02,$01,$FF,$FF,$10,$10,$10,$10
 $990E DEFB $10,$10,$FF,$FF,$01,$00,$01,$00
 $9916 DEFB $01,$00,$2A,$2A

; UDG 71
;
; #CALL:print_udg(#PC,UDG_71)
b$991A DEFB $01,$01,$00,$3F,$7F,$70,$62,$65
 $9922 DEFB $6A,$65,$06

; UDG 72
;
; #CALL:print_udg(#PC,UDG_72)
b$9925 DEFB $01,$01,$00,$FF,$FF,$00,$AA,$55
 $992D DEFB $AA,$55,$06

; UDG 73
;
; #CALL:print_udg(#PC,UDG_73)
b$9930 DEFB $01,$01,$00,$FC,$FE,$06,$A6,$56
 $9938 DEFB $A6,$56,$06

; UDG 74
;
; #CALL:print_udg(#PC,UDG_74)
b$993B DEFB $01,$01,$A6,$56,$A6,$56,$A6,$56
 $9943 DEFB $A6,$56,$06

; UDG 75
;
; #CALL:print_udg(#PC,UDG_75)
b$9946 DEFB $01,$01,$A6,$56,$A6,$46,$0E,$FE
 $994E DEFB $FC,$00,$06

; UDG 76
;
; #CALL:print_udg(#PC,UDG_76)
b$9951 DEFB $01,$01,$AA,$55,$AA,$55,$00,$FF
 $9959 DEFB $FF,$00,$06

; UDG 77
;
; #CALL:print_udg(#PC,UDG_77)
b$995C DEFB $01,$01,$6A,$65,$6A,$65,$70,$7F
 $9964 DEFB $3F,$00,$06

; UDG 78
;
; #CALL:print_udg(#PC,UDG_78)
b$9967 DEFB $01,$01,$6A,$65,$6A,$65,$6A,$65
 $996F DEFB $6A,$65,$06

; UDG 7B
;
; #CALL:print_udg(#PC,UDG_7B)
b$9972 DEFB $02,$01,$FF,$FF,$5D,$A6,$0C,$84
 $997A DEFB $08,$80,$08,$00,$00,$00,$00,$00
 $9982 DEFB $00,$00,$05,$05

; UDG 7C
;
; #CALL:print_udg(#PC,UDG_7C)
b$9986 DEFB $01,$04,$F6,$F6,$F6,$06,$FE,$FE
 $998E DEFB $00,$00,$F6,$F6,$F6,$F6,$F6,$F6
 $9996 DEFB $F6,$F6,$F6,$F6,$F6,$F6,$F6,$F6
 $999E DEFB $F6,$F6,$00,$00,$00,$00,$00,$F0
 $99A6 DEFB $F0,$F0,$00,$01

; UDG 7D
;
; #CALL:print_udg(#PC,UDG_7D)
b$99AA DEFB $01,$04,$07,$07,$07,$00,$00,$00
 $99B2 DEFB $00,$00,$07,$07,$07,$07,$07,$07
 $99BA DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $99C2 DEFB $07,$07,$00,$00,$00,$00,$00,$07
 $99CA DEFB $07,$07,$00,$01

; UDG 7E
;
; #CALL:print_udg(#PC,UDG_7E)
b$99CE DEFB $01,$01,$00,$00,$00,$00,$00,$FF
 $99D6 DEFB $FF,$FF,$01

; UDG 7F
;
; #CALL:print_udg(#PC,UDG_7F)
b$99D9 DEFB $01,$01,$FF,$FF,$FF,$00,$FF,$FF
 $99E1 DEFB $00,$00,$01

; UDG 80
;
; #CALL:print_udg(#PC,UDG_80)
b$99E4 DEFB $01,$01,$FF,$FF,$FF,$00,$7F,$7F
 $99EC DEFB $00,$00,$01

; UDG 81
;
; #CALL:print_udg(#PC,UDG_81)
b$99EF DEFB $01,$01,$00,$00,$3F,$3F,$3F,$00
 $99F7 DEFB $00,$00,$00

; UDG 16
;
; #CALL:print_udg(#PC,UDG_16)
b$99FA DEFB $04,$05,$11,$D5,$8F,$48,$10,$F5
 $9A02 DEFB $0E,$C8,$00,$D5,$0D,$D0,$06,$55
 $9A0A DEFB $0D,$E0,$02,$D1,$1D,$E0,$12,$DA
 $9A12 DEFB $1D,$E0,$01,$89,$E8,$60,$00,$09
 $9A1A DEFB $06,$40,$04,$E7,$53,$AC,$80,$E7
 $9A22 DEFB $47,$EC,$02,$E6,$E7,$CC,$20,$65
 $9A2A DEFB $E7,$CC,$0A,$45,$E7,$CC,$03,$81
 $9A32 DEFB $E7,$AC,$03,$93,$EF,$1C,$21,$93
 $9A3A DEFB $CF,$1C,$01,$5B,$00,$80,$0A,$DB
 $9A42 DEFB $8A,$92,$49,$5B,$AD,$3E,$00,$7B
 $9A4A DEFB $2D,$3E,$29,$77,$4D,$3E,$40,$6F
 $9A52 DEFB $4D,$9E,$05,$6F,$4B,$9C,$14,$67
 $9A5A DEFB $5B,$9C,$0A,$80,$5F,$52,$82,$2D
 $9A62 DEFB $3F,$A4,$0C,$E6,$5F,$15,$05,$44
 $9A6A DEFB $AA,$CA,$42,$44,$44,$30,$04,$AE
 $9A72 DEFB $2B,$4A,$0D,$9E,$55,$25,$88,$5E
 $9A7A DEFB $24,$09,$44,$14,$44,$EE,$B2,$92
 $9A82 DEFB $94,$E7,$0F,$27,$F6,$E0,$5F,$DF
 $9A8A DEFB $FD,$60,$27,$FF,$FA,$E0,$0F,$FF
 $9A92 DEFB $FC,$A0,$53,$5D,$FF,$64,$24,$AA
 $9A9A DEFB $BE,$A8,$07,$07,$07,$07,$07,$07
 $9AA2 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $9AAA DEFB $04,$04,$04,$04,$04,$07

; UDG 9F
;
; #CALL:print_udg(#PC,UDG_9F)
b$9AB0 DEFB $01,$02,$18,$18,$18,$2C,$2C,$2C
 $9AB8 DEFB $5E,$5E,$7E,$00,$7E,$00,$7E,$00
 $9AC0 DEFB $7E,$00,$07,$07

; UDG 2F
;
; #CALL:print_udg(#PC,UDG_2F)
b$9AC4 DEFB $01,$02,$A9,$B9,$81,$FF,$00,$55
 $9ACC DEFB $FF,$FF,$FF,$00,$AA,$FF,$FF,$00
 $9AD4 DEFB $F9,$89,$05,$07

; UDG 30
;
; #CALL:print_udg(#PC,UDG_30)
b$9AD8 DEFB $02,$01,$FF,$FF,$00,$00,$57,$EA
 $9AE0 DEFB $FA,$5F,$FA,$5F,$02,$40,$54,$2A
 $9AE8 DEFB $FF,$FF,$05,$05

; UDG 31
;
; #CALL:print_udg(#PC,UDG_31)
b$9AEC DEFB $03,$02,$56,$14,$B2,$55,$14,$AA
 $9AF4 DEFB $55,$54,$AA,$5D,$38,$F2,$40,$00
 $9AFC DEFB $02,$60,$00,$06,$3F,$FF,$FC,$80
 $9B04 DEFB $00,$01,$FF,$FF,$FF,$00,$00,$00
 $9B0C DEFB $80,$00,$01,$3F,$FF,$FC,$60,$00
 $9B14 DEFB $06,$40,$00,$02,$5E,$3E,$F2,$55
 $9B1C DEFB $14,$AA,$05,$05,$05,$07,$07,$07

; UDG 32
;
; #CALL:print_udg(#PC,UDG_32)
b$9B24 DEFB $01,$01,$FF,$FF,$00,$88,$BB,$BB
 $9B2C DEFB $FF,$00,$04

; UDG 33
;
; #CALL:print_udg(#PC,UDG_33)
b$9B2F DEFB $08,$03,$E2,$3F,$AF,$8F,$9F,$F0
 $9B37 DEFB $FC,$C7,$FE,$3F,$28,$88,$BF,$10
 $9B3F DEFB $C4,$FF,$E2,$3F,$A8,$88,$FF,$10
 $9B47 DEFB $C4,$C7,$FF,$FF,$FF,$FF,$FF,$FF
 $9B4F DEFB $FF,$FF,$C0,$00,$00,$00,$00,$00
 $9B57 DEFB $00,$03,$FF,$FF,$FF,$FF,$FF,$FF
 $9B5F DEFB $FF,$FF,$00,$00,$00,$00,$00,$00
 $9B67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B6F DEFB $00,$00,$E3,$E3,$F8,$F8,$F1,$F0
 $9B77 DEFB $FC,$C7,$E2,$37,$C8,$88,$E3,$10
 $9B7F DEFB $C4,$C7,$E2,$3D,$C8,$88,$E3,$10
 $9B87 DEFB $C4,$C7,$E2,$38,$C8,$88,$C7,$10
 $9B8F DEFB $C4,$C7,$E2,$38,$C8,$88,$C7,$10
 $9B97 DEFB $C4,$C7,$E2,$3C,$48,$88,$8F,$10
 $9B9F DEFB $C4,$C7,$E2,$3C,$48,$88,$8F,$10
 $9BA7 DEFB $C4,$C7,$E3,$FE,$F8,$F8,$9F,$1F
 $9BAF DEFB $C7,$C7,$00,$00,$00,$00,$00,$00
 $9BB7 DEFB $00,$00,$C0,$00,$00,$00,$00,$00
 $9BBF DEFB $00,$01,$FF,$FF,$FF,$FF,$FF,$FF
 $9BC7 DEFB $FF,$FF,$E3,$FF,$FF,$FF,$FF,$FF
 $9BCF DEFB $FC,$C7,$FE,$3F,$C8,$8F,$FF,$FF
 $9BD7 DEFB $C4,$FF,$E2,$3F,$C8,$88,$FF,$F0
 $9BDF DEFB $C7,$C7,$E2,$37,$C8,$88,$FB,$10
 $9BE7 DEFB $FC,$C7,$E2,$27,$CF,$8F,$F1,$1F
 $9BEF DEFB $C7,$C7,$10,$10,$10,$10,$10,$10
 $9BF7 DEFB $10,$10,$10,$20,$28,$08,$30,$18
 $9BFF DEFB $38,$10,$10,$10,$10,$10,$10,$10
 $9C07 DEFB $10,$10

; UDG 34
;
; #CALL:print_udg(#PC,UDG_34)
b$9C09 DEFB $01,$01,$00,$3C,$3C,$18,$00,$00
 $9C11 DEFB $00,$00,$06

; UDG 35
;
; #CALL:print_udg(#PC,UDG_35)
b$9C14 DEFB $01,$01,$18,$3C,$7E,$3C,$18,$3C
 $9C1C DEFB $18,$00,$06

; UDG 36
;
; #CALL:print_udg(#PC,UDG_36)
b$9C1F DEFB $06,$01,$FF,$FF,$FF,$FF,$FF,$FF
 $9C27 DEFB $00,$00,$00,$00,$00,$00,$AA,$AA
 $9C2F DEFB $AA,$AA,$AA,$55,$53,$FF,$F9,$4F
 $9C37 DEFB $FF,$CA,$AB,$FF,$FA,$AF,$FF,$D5
 $9C3F DEFB $50,$00,$01,$40,$00,$0A,$00,$00
 $9C47 DEFB $00,$00,$00,$00,$3C,$00,$00,$00
 $9C4F DEFB $00,$3C,$00,$06

; UDG 37
;
; #CALL:print_udg(#PC,UDG_37)
b$9C53 DEFB $01,$02,$18,$18,$18,$18,$18,$18
 $9C5B DEFB $18,$00,$7E,$0C,$3C,$00,$18,$18
 $9C63 DEFB $18,$18,$07,$07

; UDG 38
;
; #CALL:print_udg(#PC,UDG_38)
b$9C67 DEFB $03,$01,$00,$7E,$00,$01,$FF,$80
 $9C6F DEFB $07,$BF,$E0,$1E,$7F,$F8,$39,$FF
 $9C77 DEFB $FC,$73,$FF,$FE,$E7,$FF,$FF,$CF
 $9C7F DEFB $FF,$FF,$00,$01

; UDG 39
;
; #CALL:print_udg(#PC,UDG_39)
b$9C83 DEFB $02,$02,$15,$48,$51,$24,$0A,$50
 $9C8B DEFB $01,$40,$11,$20,$02,$40,$02,$40
 $9C93 DEFB $02,$00,$FF,$FF,$55,$54,$26,$8C
 $9C9B DEFB $72,$52,$11,$94,$29,$C8,$2A,$A4
 $9CA3 DEFB $0C,$AA,$00,$06

; Room moving objects 00
b$9CA7 DEFB $34,$18,$25,$10,$14,$12,$03,$1A
 $9CAF DEFB $01,$03,$02,$42,$01,$02,$04,$04
 $9CB7 DEFB $03,$0A,$02,$43,$01,$02,$09,$0B
 $9CBF DEFB $03,$0A,$80,$42,$01,$02,$0B,$12
 $9CC7 DEFB $0A,$0D,$02,$41,$01,$01,$0D,$1A
 $9CCF DEFB $0B,$0D,$81,$44,$01,$01,$10,$0C
 $9CD7 DEFB $08,$0F,$80,$46,$01,$03,$08,$13
 $9CDF DEFB $0F,$1B,$02,$43,$01,$01,$04,$0A
 $9CE7 DEFB $02,$11,$02,$47,$01,$02

; Room moving objects 01
b$9CED DEFB $0B,$0B,$21,$21,$05,$01,$0C,$02
 $9CF5 DEFB $05,$0C,$02,$46,$01,$02,$06,$0E
 $9CFD DEFB $05,$0C,$80,$42,$01,$02,$08,$08
 $9D05 DEFB $05,$0C,$00,$47,$01,$02,$0B,$14
 $9D0D DEFB $05,$0C,$80,$41,$01,$02,$0B,$1A
 $9D15 DEFB $05,$0C,$02,$43,$01,$02,$03,$05
 $9D1D DEFB $03,$0A,$01,$43,$01,$01

; Room moving objects 02
b$9D23 DEFB $27,$0E,$0C,$21,$13,$21,$0D,$09
 $9D2B DEFB $0A,$0C,$02,$43,$01,$02,$0B,$14
 $9D33 DEFB $05,$0C,$02,$43,$01,$01,$09,$1A
 $9D3B DEFB $05,$0C,$80,$47,$01,$01,$06,$0E
 $9D43 DEFB $04,$08,$02,$42,$01,$02,$09,$03
 $9D4B DEFB $02,$05,$02,$47,$01,$01,$0E,$03
 $9D53 DEFB $02,$05,$80,$46,$01,$01,$03,$18
 $9D5B DEFB $15,$18,$81,$42,$01,$02

; Room moving objects 03
b$9D61 DEFB $1B,$19,$2D,$0F,$13,$15,$08,$03
 $9D69 DEFB $03,$0C,$02,$43,$01,$01,$03,$0B
 $9D71 DEFB $03,$08,$80,$42,$01,$02,$06,$12
 $9D79 DEFB $03,$08,$02,$41,$01,$02,$05,$19
 $9D81 DEFB $03,$08,$81,$44,$01,$02,$03,$0F
 $9D89 DEFB $0D,$0F,$02,$46,$01,$02,$09,$09
 $9D91 DEFB $09,$0E,$80,$46,$01,$02,$09,$16
 $9D99 DEFB $12,$17,$02,$47,$01,$02,$0E,$0A
 $9DA1 DEFB $07,$0B,$02,$44,$01,$02,$0E,$10
 $9DA9 DEFB $0E,$13,$02,$43,$01,$02,$0E,$19
 $9DB1 DEFB $16,$1B,$80,$42,$01,$02

; Room moving objects 04
b$9DB7 DEFB $0E,$01,$24,$08,$13,$12,$0B,$02
 $9DBF DEFB $06,$0D,$81,$42,$01,$02,$01,$0E
 $9DC7 DEFB $00,$02,$80,$44,$01,$03,$05,$1B
 $9DCF DEFB $03,$08,$02,$43,$01,$02,$01,$12
 $9DD7 DEFB $00,$02,$80,$47,$01,$02,$0B,$06
 $9DDF DEFB $04,$07,$80,$43,$01,$02,$0C,$12
 $9DE7 DEFB $0F,$1A,$02,$46,$01,$02,$06,$14
 $9DEF DEFB $0C,$14,$02,$42,$01,$02

; Room moving objects 05
b$9DF5 DEFB $18,$1B,$02,$02,$14,$01,$0B,$0F
 $9DFD DEFB $0A,$0D,$01,$43,$01,$01,$03,$0A
 $9E05 DEFB $01,$03,$81,$44,$01,$01,$03,$14
 $9E0D DEFB $02,$03,$02,$46,$01,$02,$05,$17
 $9E15 DEFB $02,$08,$01,$42,$01,$01,$06,$02
 $9E1D DEFB $01,$06,$03,$47,$01,$03,$0A,$06
 $9E25 DEFB $02,$07,$02,$42,$01,$03

; Room moving objects 06
b$9E2B DEFB $0B,$1C,$25,$1F,$24,$21,$09,$15
 $9E33 DEFB $02,$0C,$02,$41,$01,$02,$03,$19
 $9E3B DEFB $03,$0C,$01,$43,$01,$02,$04,$12
 $9E43 DEFB $03,$05,$02,$43,$01,$01,$02,$08
 $9E4B DEFB $00,$06,$80,$44,$01,$02,$06,$02
 $9E53 DEFB $03,$07,$02,$46,$01,$01,$04,$1C
 $9E5B DEFB $00,$05,$02,$47,$01,$02,$10,$09
 $9E63 DEFB $03,$0C,$02,$43,$01,$02,$0B,$09
 $9E6B DEFB $00,$09,$02,$42,$01,$02,$08,$08
 $9E73 DEFB $07,$0D,$80,$47,$03,$02

; Room moving objects 07
b$9E79 DEFB $0E,$27,$10,$0D,$11,$33,$0D,$1A
 $9E81 DEFB $0B,$0C,$02,$42,$01,$02,$0B,$02
 $9E89 DEFB $0B,$0C,$02,$43,$01,$02,$10,$14
 $9E91 DEFB $0F,$14,$02,$46,$01,$03,$0B,$0F
 $9E99 DEFB $07,$11,$01,$47,$01,$03,$03,$10
 $9EA1 DEFB $0A,$13,$02,$44,$01,$02,$08,$08
 $9EA9 DEFB $03,$0C,$02,$42,$01,$01,$08,$10
 $9EB1 DEFB $0D,$11,$01,$47,$02,$02,$08,$17
 $9EB9 DEFB $16,$1A,$80,$43,$01,$02

; Room moving objects 08
b$9EBF DEFB $27,$27,$21,$25,$03,$12,$0C,$0A
 $9EC7 DEFB $0B,$10,$01,$43,$01,$02,$0A,$10
 $9ECF DEFB $07,$0C,$83,$47,$01,$02,$0E,$1B
 $9ED7 DEFB $0B,$10,$00,$46,$01,$02,$06,$04
 $9EDF DEFB $02,$07,$02,$42,$01,$02,$10,$0B
 $9EE7 DEFB $09,$14,$01,$42,$01,$01,$0A,$0B
 $9EEF DEFB $04,$0F,$82,$46,$01,$01

; Room moving objects 09
b$9EF5 DEFB $01,$26,$21,$22,$13,$13,$0A,$14
 $9EFD DEFB $02,$0B,$02,$44,$01,$02,$09,$04
 $9F05 DEFB $07,$0C,$02,$41,$01,$02,$07,$09
 $9F0D DEFB $07,$0C,$00,$42,$01,$02,$0A,$0E
 $9F15 DEFB $07,$0C,$00,$47,$01,$02,$06,$19
 $9F1D DEFB $16,$1A,$02,$43,$01,$02,$11,$04
 $9F25 DEFB $02,$07,$01,$46,$01,$01,$11,$0B
 $9F2D DEFB $07,$0C,$01,$43,$01,$01,$0B,$1B
 $9F35 DEFB $19,$1C,$02,$47,$01,$02

; Room moving objects 0A
b$9F3B DEFB $28,$23,$24,$17,$12,$14,$08,$15
 $9F43 DEFB $03,$08,$02,$44,$01,$02,$05,$1C
 $9F4B DEFB $03,$07,$00,$43,$01,$02,$09,$1A
 $9F53 DEFB $03,$0C,$81,$47,$01,$02,$10,$09
 $9F5B DEFB $02,$0C,$81,$43,$01,$02,$07,$0B
 $9F63 DEFB $0A,$0C,$02,$42,$01,$02,$07,$0F
 $9F6B DEFB $0F,$11,$80,$46,$01,$02,$00,$0B
 $9F73 DEFB $07,$0B,$02,$43,$01,$02,$00,$0F
 $9F7B DEFB $0D,$11,$01,$46,$01,$02

; Room moving objects 0B
b$9F81 DEFB $35,$0A,$22,$0D,$24,$12,$03,$15
 $9F89 DEFB $03,$07,$03,$46,$01,$02,$0F,$1C
 $9F91 DEFB $0C,$0F,$02,$42,$01,$02,$0A,$04
 $9F99 DEFB $04,$0D,$03,$43,$01,$02,$0B,$06
 $9FA1 DEFB $04,$0D,$02,$42,$01,$02,$0C,$08
 $9FA9 DEFB $04,$0D,$01,$47,$01,$02,$0D,$0A
 $9FB1 DEFB $04,$0D,$00,$46,$01,$02,$0A,$16
 $9FB9 DEFB $12,$16,$02,$43,$01,$02,$10,$18
 $9FC1 DEFB $0F,$19,$80,$47,$01,$01,$10,$07
 $9FC9 DEFB $05,$09,$82,$44,$01,$01

; Room moving objects 0C
b$9FCF DEFB $30,$06,$1D,$1D,$24,$01,$0B,$18
 $9FD7 DEFB $07,$0D,$03,$44,$01,$01,$0A,$02
 $9FDF DEFB $07,$11,$02,$42,$01,$01,$0C,$07
 $9FE7 DEFB $07,$0F,$02,$44,$01,$02,$03,$0B
 $9FEF DEFB $03,$08,$80,$46,$02,$02,$05,$13
 $9FF7 DEFB $03,$08,$00,$43,$01,$02,$0C,$1D
 $9FFF DEFB $07,$0D,$83,$47,$01,$01,$0B,$13
 $A007 DEFB $09,$14,$83,$42,$02,$02,$18,$18
 $A00F DEFB $09,$2E,$05,$12,$0B,$1A,$04,$0D
 $A017 DEFB $02,$44,$01,$02,$06,$14,$03,$07
 $A01F DEFB $81,$47,$01,$04,$08,$0A,$02,$08
 $A027 DEFB $02,$43,$01,$02,$09,$07,$03,$10
 $A02F DEFB $81,$42,$01,$02,$09,$02,$05,$10
 $A037 DEFB $02,$46,$01,$01,$0B,$0C,$06,$0C
 $A03F DEFB $01,$47,$01,$02,$11,$17,$14,$1B
 $A047 DEFB $02,$43,$01,$01,$01,$17,$14,$1B
 $A04F DEFB $80,$42,$01,$01

; Room moving objects 0E
b$A053 DEFB $12,$12,$0F,$17,$06,$12,$0B,$01
 $A05B DEFB $08,$0B,$01,$44,$01,$01,$07,$03
 $A063 DEFB $02,$07,$80,$42,$01,$01,$0A,$08
 $A06B DEFB $09,$0B,$03,$41,$01,$01,$0A,$12
 $A073 DEFB $07,$0A,$82,$43,$01,$01,$09,$16
 $A07B DEFB $06,$0F,$00,$46,$01,$01,$0B,$05
 $A083 DEFB $0A,$0C,$03,$47,$01,$01,$0D,$0D
 $A08B DEFB $0A,$0F,$80,$44,$01,$02,$05,$08
 $A093 DEFB $06,$09,$02,$43,$01,$02,$05,$11
 $A09B DEFB $10,$14,$81,$47,$01,$02

; Room moving objects 0F
b$A0A1 DEFB $3B,$34,$09,$3C,$11,$14,$05,$02
 $A0A9 DEFB $02,$03,$03,$42,$01,$02,$09,$03
 $A0B1 DEFB $06,$0D,$02,$43,$01,$02,$0F,$07
 $A0B9 DEFB $02,$09,$03,$42,$01,$02,$05,$18
 $A0C1 DEFB $0A,$19,$81,$43,$01,$02,$0A,$12
 $A0C9 DEFB $0E,$15,$83,$41,$01,$02,$0F

; Room moving objects 0D
b$A0D0 DEFB $0F,$09,$18,$01,$46,$01,$02,$0A
 $A0D8 DEFB $0F,$09,$10,$80,$47,$01,$02

; Room moving objects 10
b$A0DF DEFB $1E,$0A,$1D,$1D,$35,$01,$0D,$0B
 $A0E7 DEFB $0C,$0D,$03,$42,$01,$02,$0D,$0F
 $A0EF DEFB $0C,$0D,$80,$44,$01,$02,$0C,$13
 $A0F7 DEFB $0C,$0D,$00,$41,$01,$02,$08,$18
 $A0FF DEFB $02,$0D,$02,$43,$01,$01,$0D,$1A
 $A107 DEFB $06,$11,$80,$44,$01,$01,$02,$0B
 $A10F DEFB $01,$04,$80,$46,$03,$03,$02,$13
 $A117 DEFB $01,$04,$02,$43,$01,$03,$0D,$1C
 $A11F DEFB $08,$0D,$03,$42,$01,$01,$11,$04
 $A127 DEFB $02,$04,$02,$42,$02,$03

; Room moving objects 11
b$A12D DEFB $34,$34,$10,$24,$05,$11,$07,$05
 $A135 DEFB $04,$0A,$02,$42,$01,$01,$0B,$0B
 $A13D DEFB $02,$0D,$00,$44,$01,$02,$01,$16
 $A145 DEFB $00,$02,$01,$43,$01,$02,$05,$14
 $A14D DEFB $04,$09,$02,$47,$01,$02,$0A,$08
 $A155 DEFB $09,$0C,$02,$46,$01,$01,$05,$0D
 $A15D DEFB $08,$13,$81,$47,$01,$02,$11,$0D
 $A165 DEFB $09,$0E,$02,$42,$01,$03

; Room moving objects 12
b$A16B DEFB $36,$13,$17,$21,$22,$21,$03,$08
 $A173 DEFB $03,$06,$02,$42,$01,$03,$03,$0F
 $A17B DEFB $03,$06,$80,$44,$01,$03,$06,$02
 $A183 DEFB $03,$07,$02,$46,$01,$02,$07,$16
 $A18B DEFB $03,$0C,$80,$43,$01,$01,$11,$0B
 $A193 DEFB $07,$0B,$02,$43,$01,$02,$11,$0F
 $A19B DEFB $0D,$11,$01,$46,$01,$02,$0D,$0C
 $A1A3 DEFB $09,$12,$02,$47,$01,$02

; Room moving objects 13
b$A1A9 DEFB $32,$32,$1A,$1D,$03,$42,$09,$05
 $A1B1 DEFB $08,$0B,$02,$43,$01,$02,$0B,$0B
 $A1B9 DEFB $08,$0B,$03,$44,$01,$02,$0A,$11
 $A1C1 DEFB $08,$0B,$81,$41,$01,$02,$01,$08
 $A1C9 DEFB $04,$15,$02,$46,$01,$01,$02,$08
 $A1D1 DEFB $04,$15,$80,$43,$01,$01,$05,$08
 $A1D9 DEFB $04,$15,$02,$42,$01,$02,$05,$08
 $A1E1 DEFB $04,$15,$80,$47,$01,$02,$0F,$05
 $A1E9 DEFB $04,$07,$02,$42,$01,$02,$0F,$0E
 $A1F1 DEFB $0D,$10,$80,$47,$01,$02

; Room moving objects 14
b$A1F7 DEFB $23,$2A,$16,$21,$12,$12,$0D,$1C
 $A1FF DEFB $08,$0E,$00,$44,$01,$01,$06,$0C
 $A207 DEFB $03,$09,$02,$42,$01,$03,$06,$12
 $A20F DEFB $03,$09,$81,$43,$01,$03,$10,$0F
 $A217 DEFB $08,$15,$02,$46,$01,$01,$03,$05
 $A21F DEFB $02,$06,$02,$43,$02,$02,$03,$19
 $A227 DEFB $16,$1A,$81,$47,$01,$03

; Room moving objects 15
b$A22D DEFB $05,$1C,$2E,$16,$13,$31,$0C,$18
 $A235 DEFB $0A,$0E,$02,$46,$01,$03,$03,$04
 $A23D DEFB $01,$04,$02,$43,$01,$03,$05,$07
 $A245 DEFB $04,$07,$81,$42,$01,$03,$0A,$0A
 $A24D DEFB $07,$0A,$09,$44,$01,$02,$05,$18
 $A255 DEFB $12,$1B,$02,$47,$01,$01,$12,$17
 $A25D DEFB $14,$1B,$02,$42,$01,$01,$09,$1A
 $A265 DEFB $18,$1B,$02,$44,$01,$01,$11,$06
 $A26D DEFB $05,$09,$00,$43,$01,$03

; Room moving objects 16
b$A273 DEFB $30,$30,$0C,$1D,$02,$33,$0E,$0F
 $A27B DEFB $0D,$0E,$02,$42,$01,$02,$0D,$11
 $A283 DEFB $0D,$0E,$02,$44,$01,$02,$04,$0E
 $A28B DEFB $0C,$10,$80,$42,$01,$02,$07,$14
 $A293 DEFB $13,$17,$82,$41,$01,$02,$0A,$0F
 $A29B DEFB $0D,$11,$00,$44,$01,$02,$04,$17
 $A2A3 DEFB $15,$19,$02,$46,$01,$02,$07,$0D
 $A2AB DEFB $0A,$13,$03,$47,$01,$02,$0A,$19
 $A2B3 DEFB $17,$1B,$00,$42,$01,$02

; Room moving objects 17
b$A2B9 DEFB $1E,$1E,$22,$38,$04,$23,$07,$0F
 $A2C1 DEFB $07,$0D,$80,$43,$01,$02,$0B,$13
 $A2C9 DEFB $07,$0D,$81,$47,$01,$02,$0C,$17
 $A2D1 DEFB $07,$0D,$00,$46,$01,$02,$0D,$1B
 $A2D9 DEFB $07,$0D,$01,$42,$01,$02,$11,$12
 $A2E1 DEFB $0C,$12,$02,$44,$01,$01,$11,$19
 $A2E9 DEFB $14,$1A,$81,$43,$01,$01,$0E,$08
 $A2F1 DEFB $02,$08,$02,$42,$01,$01,$0A,$05
 $A2F9 DEFB $02,$09,$03,$43,$01,$02,$04,$02
 $A301 DEFB $02,$05,$00,$44,$01,$02

; Room moving objects 18
b$A307 DEFB $31,$39,$03,$03,$32,$02,$09,$06
 $A30F DEFB $05,$0C,$02,$44,$02,$02,$0C,$08
 $A317 DEFB $06,$0D,$02,$43,$02,$02,$0A,$17
 $A31F DEFB $04,$0D,$81,$44,$01,$01,$07,$0D
 $A327 DEFB $06,$0C,$80,$46,$01,$02,$04,$10
 $A32F DEFB $03,$09,$02,$42,$01,$02,$0F,$0A
 $A337 DEFB $05,$0C,$02,$44,$01,$02,$0F,$16
 $A33F DEFB $14,$18,$02,$43,$01,$01

; Room moving objects 19
b$A345 DEFB $12,$30,$38,$2D,$16,$12,$04,$02
 $A34D DEFB $03,$05,$02,$46,$01,$02,$07,$05
 $A355 DEFB $06,$0B,$02,$42,$01,$01,$05,$0A
 $A35D DEFB $03,$08,$02,$43,$01,$02,$0D,$0C
 $A365 DEFB $08,$0D,$01,$44,$01,$02,$0A,$14
 $A36D DEFB $09,$0E,$02,$42,$01,$02,$08,$16
 $A375 DEFB $03,$08,$80,$47,$01,$02,$07,$1A
 $A37D DEFB $05,$0A,$02,$46,$01,$01,$11,$0C
 $A385 DEFB $02,$12,$01,$47,$01,$02,$03,$07
 $A38D DEFB $04,$09,$02,$47,$01,$02,$03,$16
 $A395 DEFB $15,$1A,$80,$43,$01,$02

; Room moving objects 1A
b$A39B DEFB $07,$07,$21,$03,$04,$14,$09,$09
 $A3A3 DEFB $07,$0C,$02,$42,$01,$02,$0C,$0E
 $A3AB DEFB $09,$0E,$00,$43,$01,$01,$0B,$13
 $A3B3 DEFB $07,$0C,$82,$47,$01,$02,$0B,$18
 $A3BB DEFB $09,$0E,$80,$44,$01,$01,$01,$09
 $A3C3 DEFB $07,$0A,$02,$46,$01,$02,$10,$09
 $A3CB DEFB $06,$0B,$00,$47,$01,$02,$10,$12
 $A3D3 DEFB $10,$15,$81,$42,$01,$02,$08,$0D
 $A3DB DEFB $0B,$10,$02,$46,$01,$01,$08,$17
 $A3E3 DEFB $15,$1A,$00,$43,$01,$01

; Room moving objects 1B
b$A3E9 DEFB $15,$39,$2C,$1A,$13,$14,$05,$17
 $A3F1 DEFB $04,$06,$81,$43,$01,$02,$05,$0A
 $A3F9 DEFB $04,$06,$02,$46,$01,$01,$04,$0D
 $A401 DEFB $04,$06,$80,$42,$01,$01,$06,$10
 $A409 DEFB $04,$06,$00,$44,$01,$01,$0D,$0C
 $A411 DEFB $0C,$12,$02,$47,$01,$02,$12,$08
 $A419 DEFB $04,$15,$02,$46,$01,$01,$13,$08
 $A421 DEFB $04,$15,$80,$43,$01,$01,$01,$10
 $A429 DEFB $06,$1A,$02,$47,$01,$01,$01,$17
 $A431 DEFB $06,$1A,$02,$46,$01,$01

; Room moving objects 1C
b$A437 DEFB $06,$06,$2D,$08,$00,$46,$01,$05
 $A43F DEFB $03,$0B,$02,$44,$01,$01,$01,$19
 $A447 DEFB $13,$1A,$81,$43,$01,$01,$0C,$07
 $A44F DEFB $02,$0C,$02,$42,$01,$01,$0C,$15
 $A457 DEFB $0F,$19,$82,$43,$01,$01,$04,$05
 $A45F DEFB $04,$0C,$02,$43,$01,$02,$04,$14
 $A467 DEFB $11,$18,$03,$44,$01,$02,$0A,$04
 $A46F DEFB $03,$0B,$80,$46,$01,$02,$0A,$16
 $A477 DEFB $11,$19,$02,$47,$01,$02,$10,$09
 $A47F DEFB $02,$0C,$80,$41,$01,$02,$10,$14
 $A487 DEFB $10,$1A,$02,$44,$01,$02

; Room moving objects 1D
b$A48D DEFB $34,$35,$2D,$29,$23,$14,$0A,$15
 $A495 DEFB $07,$0D,$02,$43,$01,$02,$09,$18
 $A49D DEFB $07,$0D,$80,$44,$01,$02,$0B,$03
 $A4A5 DEFB $0A,$0D,$02,$47,$01,$02,$0D,$06
 $A4AD DEFB $0A,$0D,$81,$42,$01,$02,$0A,$09
 $A4B5 DEFB $0A,$0D,$00,$43,$01,$02,$01,$18
 $A4BD DEFB $14,$1A,$02,$42,$01,$02,$00,$02
 $A4C5 DEFB $02,$0D,$02,$42,$01,$01,$04,$15
 $A4CD DEFB $14,$17,$02,$47,$01,$02,$04,$1B
 $A4D5 DEFB $19,$1C,$81,$46,$01,$02,$07,$05
 $A4DD DEFB $02,$06,$02,$42,$01,$02

; Room moving objects 1E
b$A4E3 DEFB $31,$14,$0F,$2E,$22,$23,$04,$05
 $A4EB DEFB $03,$06,$01,$43,$01,$01,$04,$1C
 $A4F3 DEFB $03,$04,$00,$41,$01,$02,$04,$0C
 $A4FB DEFB $03,$04,$02,$42,$01,$02,$04,$14
 $A503 DEFB $03,$04,$81,$46,$01,$02,$00,$1A
 $A50B DEFB $17,$1A,$80,$46,$01,$01,$0E,$04
 $A513 DEFB $02,$05,$01,$44,$01,$02,$0A,$0B
 $A51B DEFB $02,$19,$02,$47,$01,$01,$10,$0B
 $A523 DEFB $0A,$11,$02,$43,$01,$01,$10,$12
 $A52B DEFB $10,$17,$01,$46,$01,$01

; Room moving objects 1F
b$A531 DEFB $13,$28,$33,$02,$22,$31,$0B,$03
 $A539 DEFB $07,$0C,$01,$41,$01,$02,$10,$08
 $A541 DEFB $0E,$11,$00,$44,$01,$02,$06,$17
 $A549 DEFB $03,$06,$80,$42,$01,$02,$06,$1A
 $A551 DEFB $03,$06,$02,$43,$01,$02,$0B,$0F
 $A559 DEFB $0C,$17,$02,$46,$01,$01,$03,$08
 $A561 DEFB $05,$0A,$02,$43,$01,$01,$0C,$0A
 $A569 DEFB $02,$0D,$00,$47,$01,$01,$0E,$12
 $A571 DEFB $11,$1C,$80,$43,$01,$03

; Room moving objects 20
b$A577 DEFB $06,$06,$04,$09,$04,$12,$05,$05
 $A57F DEFB $01,$08,$02,$47,$01,$02,$02,$0B
 $A587 DEFB $02,$09,$81,$46,$01,$01,$03,$13
 $A58F DEFB $01,$09,$02,$43,$01,$01,$09,$19
 $A597 DEFB $02,$09,$80,$41,$02,$02,$0B,$03
 $A59F DEFB $00,$03,$02,$42,$01,$02,$0F,$09
 $A5A7 DEFB $08,$0B,$00,$44,$01,$02,$0F,$14
 $A5AF DEFB $12,$16,$02,$42,$02,$03

; Room moving objects 21
b$A5B5 DEFB $14,$14,$33,$00,$03,$13,$05,$08
 $A5BD DEFB $02,$0D,$02,$44,$01,$03,$05,$10
 $A5C5 DEFB $03,$08,$81,$42,$01,$02,$07,$1A
 $A5CD DEFB $03,$08,$00,$43,$01,$02,$02,$13
 $A5D5 DEFB $0E,$19,$03,$47,$01,$01,$0F,$03
 $A5DD DEFB $02,$0D,$00,$43,$01,$03,$0F,$0E
 $A5E5 DEFB $09,$14,$01,$47,$01,$03,$0F,$15
 $A5ED DEFB $14,$19,$02,$44,$01,$03

; Room moving objects 22
b$A5F3 DEFB $32,$32,$2E,$2F,$02,$43,$0D,$08
 $A5FB DEFB $0B,$0E,$00,$42,$01,$02,$0C,$14
 $A603 DEFB $0B,$0E,$81,$43,$01,$02,$08,$07
 $A60B DEFB $02,$0B,$02,$43,$01,$01,$08,$1A
 $A613 DEFB $12,$1B,$01,$42,$01,$01,$0B,$03
 $A61B DEFB $02,$09,$03,$46,$01,$01,$0B,$14
 $A623 DEFB $14,$1B,$02,$47,$01,$01,$00,$0C
 $A62B DEFB $07,$10,$02,$47,$01,$01,$00,$15
 $A633 DEFB $13,$1C,$80,$43,$01,$01,$0F,$1B
 $A63B DEFB $1A,$1B,$02,$46,$01,$02

; Room moving objects 23
b$A641 DEFB $2A,$1C,$1A,$21,$15,$22,$07,$09
 $A649 DEFB $01,$08,$03,$44,$01,$01,$06,$0E
 $A651 DEFB $06,$08,$01,$42,$01,$01,$07,$11
 $A659 DEFB $06,$08,$01,$43,$01,$01,$07,$14
 $A661 DEFB $06,$08,$80,$44,$01,$01,$08,$17
 $A669 DEFB $06,$08,$81,$47,$01,$01,$06,$1A
 $A671 DEFB $06,$08,$82,$46,$01,$01,$12,$10
 $A679 DEFB $06,$1A,$00,$47,$01,$01,$12,$10
 $A681 DEFB $06,$1A,$81,$46,$01,$01,$01,$18
 $A689 DEFB $0C,$1A,$01,$47,$01,$02,$0E,$06
 $A691 DEFB $04,$08,$02,$43,$01,$02

; Room moving objects 24
b$A697 DEFB $2B,$2B,$2D,$3A,$04,$12,$0B,$05
 $A69F DEFB $09,$0B,$02,$43,$01,$01,$03,$16
 $A6A7 DEFB $03,$09,$80,$47,$01,$02,$04,$0D
 $A6AF DEFB $01,$07,$02,$47,$01,$01,$02,$12
 $A6B7 DEFB $01,$07,$02,$46,$01,$01,$01,$19
 $A6BF DEFB $18,$1A,$01,$42,$01,$02,$0A,$08
 $A6C7 DEFB $07,$0D,$02,$44,$01,$02,$0A,$16
 $A6CF DEFB $10,$16,$80,$42,$01,$02

; Room moving objects 25
b$A6D5 DEFB $2A,$39,$2F,$29,$13,$22,$0D,$05
 $A6DD DEFB $02,$0D,$02,$46,$01,$01,$05,$18
 $A6E5 DEFB $02,$05,$02,$43,$01,$02,$01,$1A
 $A6ED DEFB $01,$04,$00,$47,$01,$02,$0C,$1C
 $A6F5 DEFB $05,$0C,$01,$42,$01,$02,$05,$02
 $A6FD DEFB $02,$03,$01,$47,$01,$02,$09,$18
 $A705 DEFB $17,$1A,$02,$44,$01,$02,$0F,$15
 $A70D DEFB $12,$17,$00,$43,$01,$02,$11,$02
 $A715 DEFB $02,$0D,$02,$42,$01,$01

; Room moving objects 26
b$A71B DEFB $2A,$2A,$0F,$1F,$03,$23,$0B,$05
 $A723 DEFB $08,$0F,$02,$42,$01,$02,$0B,$0B
 $A72B DEFB $08,$0B,$80,$46,$01,$02,$0A,$10
 $A733 DEFB $07,$0A,$81,$47,$01,$02,$11,$1A
 $A73B DEFB $17,$1A,$80,$46,$01,$01,$05,$19
 $A743 DEFB $15,$1A,$02,$42,$01,$02,$0F,$0B
 $A74B DEFB $07,$0E,$00,$44,$01,$01,$0F,$12
 $A753 DEFB $0D,$14,$01,$42,$01,$01,$0A,$1A
 $A75B DEFB $19,$1B,$02,$43,$01,$02

; Room moving objects 27
b$A761 DEFB $0A,$20,$3C,$04,$13,$12,$09,$11
 $A769 DEFB $09,$0B,$02,$44,$01,$01,$04,$09
 $A771 DEFB $02,$08,$02,$42,$01,$02,$0A,$0B
 $A779 DEFB $09,$0F,$81,$43,$01,$02,$0E,$03
 $A781 DEFB $0D,$10,$00,$46,$01,$02,$06,$17
 $A789 DEFB $12,$18,$02,$47,$01,$02,$0E,$12
 $A791 DEFB $11,$19,$82,$42,$01,$01,$03,$11
 $A799 DEFB $07,$14,$81,$43,$01,$01

; Room moving objects 28
b$A79F DEFB $3B,$1E,$1F,$00,$42,$21,$01,$0A
 $A7A7 DEFB $00,$01,$02,$44,$01,$02,$00,$13
 $A7AF DEFB $00,$01,$00,$41,$01,$02,$0F,$08
 $A7B7 DEFB $0C,$10,$02,$43,$01,$02,$0F,$15
 $A7BF DEFB $0C,$10,$80,$46,$01,$02,$09,$0F
 $A7C7 DEFB $03,$0A,$02,$42,$01,$02,$05,$1A
 $A7CF DEFB $00,$07,$81,$47,$01,$01,$09,$04
 $A7D7 DEFB $02,$05,$00,$47,$01,$01,$09,$08
 $A7DF DEFB $07,$0A,$01,$41,$01,$01,$0E,$10
 $A7E7 DEFB $0D,$10,$02,$44,$01,$02

; Room moving objects 29
b$A7ED DEFB $28,$28,$21,$21,$07,$00,$02,$03
 $A7F5 DEFB $00,$07,$02,$43,$01,$02,$03,$08
 $A7FD DEFB $00,$07,$00,$42,$01,$02,$05,$0B
 $A805 DEFB $00,$07,$80,$47,$01,$02,$06,$0E
 $A80D DEFB $00,$07,$80,$41,$01,$02,$04,$14
 $A815 DEFB $00,$07,$02,$46,$01,$02,$05,$17
 $A81D DEFB $00,$07,$82,$42,$01,$02,$01,$1C
 $A825 DEFB $00,$07,$02,$44,$01,$02

; Room moving objects 2A
b$A82B DEFB $1B,$12,$2F,$38,$23,$21,$0B,$05
 $A833 DEFB $08,$0C,$02,$42,$01,$02,$00,$1D
 $A83B DEFB $00,$03,$02,$44,$01,$02,$05,$0E
 $A843 DEFB $05,$0E,$02,$43,$01,$01,$08,$12
 $A84B DEFB $05,$0E,$03,$44,$01,$01,$0B,$16
 $A853 DEFB $05,$0E,$81,$42,$01,$01,$11,$0C
 $A85B DEFB $07,$10,$02,$47,$01,$01,$11,$18
 $A863 DEFB $13,$1C,$80,$43,$01,$01,$03,$04
 $A86B DEFB $02,$06,$02,$46,$01,$02

; Room moving objects 2B
b$A871 DEFB $26,$26,$21,$08,$04,$13,$0D,$0A
 $A879 DEFB $0A,$0D,$02,$43,$01,$02,$0C,$0F
 $A881 DEFB $0A,$0D,$80,$47,$01,$02,$0B,$14
 $A889 DEFB $0A,$0D,$00,$42,$01,$02,$0D,$05
 $A891 DEFB $0A,$0D,$81,$42,$01,$02,$12,$18
 $A899 DEFB $0C,$1A,$01,$47,$01,$02,$08,$10
 $A8A1 DEFB $0B,$15,$81,$44,$01,$03,$08,$03
 $A8A9 DEFB $02,$04,$03,$46,$01,$03,$0A,$1A
 $A8B1 DEFB $18,$1A,$02,$43,$01,$03

; Room moving objects 2C
b$A8B7 DEFB $05,$19,$17,$33,$23,$21,$0B,$0A
 $A8BF DEFB $0A,$0E,$02,$47,$01,$02,$0E,$14
 $A8C7 DEFB $0A,$0E,$00,$42,$01,$02,$0B,$05
 $A8CF DEFB $0A,$0E,$83,$46,$01,$01,$0D,$19
 $A8D7 DEFB $0A,$0E,$80,$43,$01,$01,$0A,$0F
 $A8DF DEFB $0A,$0E,$82,$41,$01,$01,$07,$12
 $A8E7 DEFB $0D,$14,$80,$42,$01,$02,$07,$0A
 $A8EF DEFB $03,$0A,$80,$46,$01,$02,$01,$0F
 $A8F7 DEFB $02,$1A,$02,$43,$01,$01

; Room moving objects 2D
b$A8FD DEFB $34,$34,$2D,$37,$22,$12,$02,$0B
 $A905 DEFB $00,$03,$02,$47,$01,$02,$03,$14
 $A90D DEFB $00,$05,$03,$42,$01,$01,$02,$04
 $A915 DEFB $02,$09,$80,$43,$01,$02,$05,$08
 $A91D DEFB $02,$09,$81,$46,$01,$02,$0C,$18
 $A925 DEFB $14,$1A,$02,$47,$01,$03,$0F,$05
 $A92D DEFB $03,$07,$02,$42,$01,$02,$07,$19
 $A935 DEFB $17,$1C,$02,$46,$01,$01

; Room moving objects 2E
b$A93B DEFB $13,$13,$11,$04,$06,$21,$07,$06
 $A943 DEFB $04,$09,$82,$46,$01,$01,$08,$0A
 $A94B DEFB $04,$09,$02,$43,$01,$01,$04,$0E
 $A953 DEFB $04,$09,$80,$44,$01,$01,$09,$12
 $A95B DEFB $04,$09,$81,$41,$01,$01,$08,$16
 $A963 DEFB $04,$09,$02,$47,$01,$01,$04,$1A
 $A96B DEFB $04,$09,$82,$42,$01,$01,$0F,$0B
 $A973 DEFB $05,$0D,$02,$47,$01,$02,$0F,$12
 $A97B DEFB $11,$17,$81,$43,$01,$02,$00,$0F
 $A983 DEFB $04,$1A,$02,$46,$01,$02

; Room moving objects 2F
b$A989 DEFB $1B,$06,$08,$10,$11,$15,$0C,$19
 $A991 DEFB $09,$0C,$02,$46,$01,$02,$02,$07
 $A999 DEFB $01,$07,$02,$42,$01,$02,$10,$15
 $A9A1 DEFB $0F,$17,$02,$43,$01,$03,$0C,$03
 $A9A9 DEFB $02,$08,$81,$47,$01,$02,$0A,$06
 $A9B1 DEFB $06,$0C,$02,$43,$01,$02,$0A,$0F
 $A9B9 DEFB $0F,$14,$02,$42,$01,$02,$07,$14
 $A9C1 DEFB $13,$18,$02,$43,$01,$02,$03,$12
 $A9C9 DEFB $0F,$14,$02,$47,$01,$02

; UDG D4
;
; #CALL:print_udg(#PC,UDG_D4)
b$A9CF DEFB $02,$02,$01,$00,$03,$80,$05,$C0
 $A9D7 DEFB $0B,$E0,$13,$F0,$27,$F8,$00,$00
 $A9DF DEFB $01,$00,$03,$80,$00,$00,$01,$00
 $A9E7 DEFB $00,$00,$01,$00,$00,$00,$01,$00
 $A9EF DEFB $00,$00,$05,$05,$06,$06

; UDG 3A
;
; #CALL:print_udg(#PC,UDG_3A)
b$A9F5 DEFB $08,$02,$12,$A4,$06,$52,$54,$A4
 $A9FD DEFB $52,$54,$1A,$A9,$52,$6A,$0A,$50
 $AA05 DEFB $DA,$0A,$2D,$7B,$B6,$EC,$10,$A4
 $AA0D DEFB $AC,$90,$2D,$7B,$AE,$EE,$04,$28
 $AA15 DEFB $6A,$48,$1C,$AA,$14,$DB,$11,$02
 $AA1D DEFB $90,$40,$09,$40,$88,$08,$00,$50
 $AA25 DEFB $00,$00,$00,$00,$00,$00,$04,$00
 $AA2D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AA35 DEFB $00,$00,$12,$25,$11,$02,$20,$24
 $AA3D DEFB $04,$41,$A9,$48,$A4,$8B,$48,$96
 $AA45 DEFB $AA,$89,$B6,$9D,$F6,$BE,$FE,$FF
 $AA4D DEFB $DE,$FA,$4A,$F7,$FF,$FB,$FF,$6B
 $AA55 DEFB $6B,$B7,$A1,$4C,$FD,$A5,$77,$D5
 $AA5D DEFB $A1,$4C,$44,$12,$6A,$12,$AB,$6A
 $AA65 DEFB $14,$12,$26,$44,$91,$45,$56,$D1
 $AA6D DEFB $40,$44,$96,$81,$22,$50,$29,$6A
 $AA75 DEFB $29,$01,$07,$07,$07,$07,$04,$04
 $AA7D DEFB $07,$04,$04,$04,$04,$04,$04,$04
 $AA85 DEFB $04,$04

; UDG 3B
;
; #CALL:print_udg(#PC,UDG_3B)
b$AA87 DEFB $01,$01,$FF,$70,$7E,$30,$3C,$10
 $AA8F DEFB $18,$00,$04

; UDG 14
;
; #CALL:print_udg(#PC,UDG_14)
b$AA92 DEFB $03,$06,$10,$59,$A6,$02,$39,$A6
 $AA9A DEFB $10,$59,$A6,$01,$19,$A6,$20,$09
 $AAA2 DEFB $A6,$0B,$4C,$A6,$49,$6C,$D6,$01
 $AAAA DEFB $6C,$D6,$00,$55,$53,$10,$35,$53
 $AAB2 DEFB $04,$95,$52,$90,$75,$62,$08,$31
 $AABA DEFB $66,$42,$7A,$E6,$04,$39,$E6,$41
 $AAC2 DEFB $39,$E6,$11,$E7,$DE,$50,$E5,$BE
 $AACA DEFB $00,$A2,$BC,$04,$65,$BD,$60,$25
 $AAD2 DEFB $BD,$14,$81,$79,$20,$13,$71,$02
 $AADA DEFB $13,$71,$04,$5B,$9C,$80,$DB,$9C
 $AAE2 DEFB $42,$5B,$9C,$60,$7B,$BC,$4A,$77
 $AAEA DEFB $BC,$03,$6F,$DA,$03,$6F,$DA,$A1
 $AAF2 DEFB $67,$DA,$41,$76,$6D,$0A,$6E,$ED
 $AAFA DEFB $09,$6E,$ED,$C0,$4E,$CD,$A9,$4E
 $AB02 DEFB $CD,$40,$AE,$CD,$45,$9E,$4A,$14
 $AB0A DEFB $5E,$5A,$02,$10,$29,$31,$A0,$A8
 $AB12 DEFB $A8,$D4,$A4,$15,$79,$A4,$22,$F5
 $AB1A DEFB $74,$24,$E5,$74,$5D,$ED,$70,$08
 $AB22 DEFB $59,$76,$00,$07

; UDG 97
;
; #CALL:print_udg(#PC,UDG_97)
b$AB26 DEFB $06,$02,$81,$58,$FF,$FF,$FF,$F5
 $AB2E DEFB $2B,$F3,$FF,$FF,$FF,$EA,$7F,$85
 $AB36 DEFB $5F,$FF,$FF,$D4,$FE,$2A,$AA,$AF
 $AB3E DEFB $FA,$AA,$F0,$15,$55,$55,$55,$54
 $AB46 DEFB $00,$02,$AA,$AA,$AA,$A8,$00,$00
 $AB4E DEFB $55,$55,$55,$50,$00,$00,$00,$0A
 $AB56 DEFB $AA,$80,$FE,$7F,$FF,$FF,$FF,$F5
 $AB5E DEFB $FF,$0A,$AA,$AF,$FF,$E8,$FF,$80
 $AB66 DEFB $55,$55,$55,$51,$80,$20,$00,$0A
 $AB6E DEFB $AA,$A2,$55,$7D,$00,$00,$00,$01
 $AB76 DEFB $FF,$F8,$95,$40,$00,$06,$FF,$C7
 $AB7E DEFB $3F,$EA,$AA,$AD,$FE,$16,$7F,$FF
 $AB86 DEFB $FF,$FA,$00,$02

; UDG 98
;
; #CALL:print_udg(#PC,UDG_98)
b$AB8A DEFB $02,$02,$13,$E0,$0B,$40,$0F,$E0
 $AB92 DEFB $07,$C0,$07,$80,$01,$C0,$00,$00
 $AB9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ABA2 DEFB $00,$00,$00,$00,$01,$C0,$0F,$10
 $ABAA DEFB $1D,$E8,$00,$00

; UDG A0
;
; #CALL:print_udg(#PC,UDG_A0)
b$ABAE DEFB $06,$01,$DD,$DD,$DD,$DD,$DD,$DD
 $ABB6 DEFB $66,$66,$66,$66,$66,$66,$11,$11
 $ABBE DEFB $10,$08,$88,$88,$0A,$AA,$BD,$BD
 $ABC6 DEFB $55,$50,$04,$55,$4E,$72,$AA,$20
 $ABCE DEFB $00,$22,$A1,$85,$44,$00,$00,$01
 $ABD6 DEFB $13,$C8,$80,$00,$00,$00,$05,$A0
 $ABDE DEFB $00,$00,$00,$07

; UDG A1
;
; #CALL:print_udg(#PC,UDG_A1)
b$ABE2 DEFB $01,$02,$71,$71,$72,$74,$68,$68
 $ABEA DEFB $70,$70,$01,$01,$72,$74,$68,$68
 $ABF2 DEFB $70,$70,$06,$06

; UDG A2
;
; #CALL:print_udg(#PC,UDG_A2)
b$ABF6 DEFB $03,$01,$FF,$FF,$FF,$FF,$FF,$FF
 $ABFE DEFB $80,$00,$01,$7F,$FF,$FE,$00,$00
 $AC06 DEFB $00,$00,$2C,$00,$00,$5E,$00,$00
 $AC0E DEFB $00,$00,$00,$07

; UDG A3
;
; #CALL:print_udg(#PC,UDG_A3)
b$AC12 DEFB $01,$04,$71,$38,$1C,$8E,$C7,$E3
 $AC1A DEFB $71,$38,$C7,$E3,$71,$38,$1C,$8E
 $AC22 DEFB $C7,$E3,$1C,$8E,$C7,$E3,$71,$38
 $AC2A DEFB $1C,$8E,$71,$38,$1C,$8E,$C7,$E3
 $AC32 DEFB $71,$38,$00,$32

; UDG A4
;
; #CALL:print_udg(#PC,UDG_A4)
b$AC36 DEFB $02,$01,$55,$00,$55,$70,$55,$0C
 $AC3E DEFB $55,$52,$55,$7E,$55,$7C,$55,$70
 $AC46 DEFB $55,$00,$04,$07

; UDG A5
;
; #CALL:print_udg(#PC,UDG_A5)
b$AC4A DEFB $02,$01,$00,$AA,$0E,$AA,$30,$AA
 $AC52 DEFB $4A,$AA,$7E,$AA,$3E,$AA,$0E,$AA
 $AC5A DEFB $00,$AA,$07,$04

; UDG A6
;
; #CALL:print_udg(#PC,UDG_A6)
b$AC5E DEFB $03,$03,$10,$94,$84,$10,$B6,$84
 $AC66 DEFB $10,$AA,$84,$0A,$49,$28,$0A,$14
 $AC6E DEFB $28,$04,$2A,$10,$00,$14,$00,$00
 $AC76 DEFB $08,$00,$20,$22,$02,$20,$88,$82
 $AC7E DEFB $25,$2A,$52,$10,$22,$04,$04,$2A
 $AC86 DEFB $10,$04,$94,$90,$14,$08,$14,$02
 $AC8E DEFB $88,$A0,$00,$14,$00,$00,$08,$00
 $AC96 DEFB $01,$14,$40,$00,$36,$00,$01,$2A
 $AC9E DEFB $40,$01,$49,$40,$21,$55,$42,$00
 $ACA6 DEFB $88,$80,$00,$07

; UDG A7
;
; #CALL:print_udg(#PC,UDG_A7)
b$ACAA DEFB $01,$01,$FF,$FF,$55,$AA,$55,$55
 $ACB2 DEFB $55,$00,$07

; UDG A8
;
; #CALL:print_udg(#PC,UDG_A8)
b$ACB5 DEFB $01,$01,$08,$08,$14,$08,$08,$14
 $ACBD DEFB $08,$08,$07

; UDG 7A
;
; #CALL:print_udg(#PC,UDG_7A)
b$ACC0 DEFB $01,$01,$7C,$83,$39,$5C,$4C,$38
 $ACC8 DEFB $10,$10,$04

; UDG 79
;
; #CALL:print_udg(#PC,UDG_79)
b$ACCB DEFB $04,$05,$40,$00,$00,$01,$7F,$FF
 $ACD3 DEFB $FF,$FF,$3F,$FF,$FF,$FE,$40,$00
 $ACDB DEFB $00,$01,$7F,$FF,$FF,$FF,$7F,$FF
 $ACE3 DEFB $FF,$FF,$3F,$FF,$FF,$FE,$00,$00
 $ACEB DEFB $00,$00,$3F,$53,$65,$7E,$3F,$4D
 $ACF3 DEFB $59,$7E,$3F,$61,$43,$7E,$3F,$5B
 $ACFB DEFB $6D,$7E,$3F,$45,$51,$7E,$3F,$71
 $AD03 DEFB $47,$7E,$3F,$49,$49,$7E,$3F,$37
 $AD0B DEFB $76,$7E,$3F,$00,$00,$7E,$3F,$66
 $AD13 DEFB $33,$7E,$3F,$59,$4D,$7E,$3F,$46
 $AD1B DEFB $31,$7E,$3F,$69,$4B,$7E,$3F,$53
 $AD23 DEFB $65,$7E,$3F,$45,$51,$7E,$3F,$69
 $AD2B DEFB $4B,$7E,$00,$5F,$85,$00,$7F,$40
 $AD33 DEFB $2D,$7F,$00,$5F,$85,$00,$7F,$40
 $AD3B DEFB $25,$7F,$00,$40,$01,$00,$7F,$7F
 $AD43 DEFB $FF,$7F,$00,$00,$00,$00,$00,$55
 $AD4B DEFB $55,$00,$1F,$55,$55,$7C,$3F,$7F
 $AD53 DEFB $FF,$7E,$3F,$40,$01,$7E,$3F,$40
 $AD5B DEFB $01,$7E,$3F,$5F,$81,$7E,$3F,$40
 $AD63 DEFB $21,$7E,$3F,$5F,$81,$7E,$3F,$40
 $AD6B DEFB $21,$7E,$02,$02,$02,$02,$06,$03
 $AD73 DEFB $03,$06,$06,$03,$03,$06,$01,$07
 $AD7B DEFB $07,$01,$06,$07,$07,$06

; UDG C0
;
; #CALL:print_udg(#PC,UDG_C0)
b$AD81 DEFB $03,$04,$76,$DB,$6E,$76,$DB,$6E
 $AD89 DEFB $76,$DF,$7E,$77,$DF,$7E,$7F,$FF
 $AD91 DEFB $FE,$55,$55,$54,$00,$00,$00,$FF
 $AD99 DEFB $FF,$FF,$76,$DB,$6E,$76,$DB,$6E
 $ADA1 DEFB $76,$DB,$6E,$76,$DB,$6E,$76,$DB
 $ADA9 DEFB $6E,$76,$DB,$6E,$76,$DB,$6E,$76
 $ADB1 DEFB $DB,$6E,$76,$DB,$6E,$00,$00,$00
 $ADB9 DEFB $FF,$FF,$FF,$00,$00,$00,$09,$24
 $ADC1 DEFB $90,$76,$DB,$6E,$76,$DB,$6E,$76
 $ADC9 DEFB $DB,$6E,$FF,$FF,$FF,$00,$00,$00
 $ADD1 DEFB $00,$00,$00,$7F,$FF,$FE,$7E,$FB
 $ADD9 DEFB $EE,$76,$DB,$6E,$76,$DB,$6E,$76
 $ADE1 DEFB $DB,$6E,$00,$02

; UDG C2
;
; #CALL:print_udg(#PC,UDG_C2)
b$ADE5 DEFB $03,$04,$54,$09,$00,$22,$92,$40
 $ADED DEFB $00,$25,$00,$7E,$55,$00,$00,$22
 $ADF5 DEFB $00,$54,$A4,$00,$00,$8A,$00,$7C
 $ADFD DEFB $48,$00,$54,$05,$08,$22,$42,$52
 $AE05 DEFB $54,$05,$84,$08,$81,$04,$54,$2A
 $AE0D DEFB $00,$22,$45,$44,$54,$42,$08,$08
 $AE15 DEFB $A8,$88,$55,$0A,$89,$22,$52,$52
 $AE1D DEFB $54,$25,$55,$08,$55,$09,$54,$A8
 $AE25 DEFB $A2,$22,$24,$A4,$54,$4A,$9A,$08
 $AE2D DEFB $A0,$48,$7F,$FE,$2C,$00,$00,$D2
 $AE35 DEFB $2A,$A9,$25,$00,$00,$15,$7F,$E0
 $AE3D DEFB $A8,$00,$02,$64,$55,$10,$8A,$08
 $AE45 DEFB $00,$28,$07,$04,$04,$05,$04,$04
 $AE4D DEFB $05,$04,$04,$07,$07,$04,$00,$00
 $AE55 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AE5D DEFB $00,$00,$00

; Moving sprite offsets
;
; Used by the routine at #R$D669
w$AE60 DEFW $B346
 $AE62 DEFW $B0FF
 $AE64 DEFW $C168
 $AE66 DEFW $C1C9
 $AE68 DEFW $B03D
 $AE6A DEFW $B160
 $AE6C DEFW $B1A1
 $AE6E DEFW $B202
 $AE70 DEFW $B09E
 $AE72 DEFW $C127
 $AE74 DEFW $B263
 $AE76 DEFW $B2A4
 $AE78 DEFW $B488
 $AE7A DEFW $B407
 $AE7C DEFW $B7EF
 $AE7E DEFW $BF43
 $AE80 DEFW $C085
 $AE82 DEFW $BFC4
 $AE84 DEFW $B305
 $AE86 DEFW $B509
 $AE88 DEFW $B54A
 $AE8A DEFW $AFDC
 $AE8C DEFW $B5AB
 $AE8E DEFW $B66C
 $AE90 DEFW $BE21
 $AE92 DEFW $BDE0
 $AE94 DEFW $C106
 $AE96 DEFW $BD4F
 $AE98 DEFW $BD0E
 $AE9A DEFW $BC8D
 $AE9C DEFW $BC2C
 $AE9E DEFW $B6ED
 $AEA0 DEFW $C24A
 $AEA2 DEFW $C31C
 $AEA4 DEFW $C2DB
 $AEA6 DEFW $C43E
 $AEA8 DEFW $BE82
 $AEAA DEFW $B76E
 $AEAC DEFW $C3DD
 $AEAE DEFW $C49F
 $AEB0 DEFW $C693
 $AEB2 DEFW $C500
 $AEB4 DEFW $C6D4
 $AEB6 DEFW $BA75
 $AEB8 DEFW $C735
 $AEBA DEFW $B850
 $AEBC DEFW $B8B1
 $AEBE DEFW $BBEB
 $AEC0 DEFW $B8F2
 $AEC2 DEFW $BBAA
 $AEC4 DEFW $C796
 $AEC6 DEFW $B933
 $AEC8 DEFW $BB49
 $AECA DEFW $BB08
 $AECC DEFW $AF9B
 $AECE DEFW $BAC7
 $AED0 DEFW $AEDA
 $AED2 DEFW $BAA6
 $AED4 DEFW $B9F4
 $AED6 DEFW $C541
 $AED8 DEFW $C5D2

; Sprite 38 - Pelican
;
; #CALL:print_graphic(#PC,4,Sprite_38)
b$AEDA DEFB $0B,$02,$00,$00,$0A,$80,$00,$07
 $AEE2 DEFB $80,$00,$0F,$80,$00,$07,$8E,$00
 $AEEA DEFB $0F,$CB,$FC,$03,$DE,$00,$0F,$BF
 $AEF2 DEFB $FC,$3F,$E7,$E0,$07,$83,$80,$00
 $AEFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF0A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF12 DEFB $00,$00,$00,$0E,$00,$00,$0B,$FC
 $AF1A DEFB $00,$1E,$00,$03,$BF,$FC,$1F,$E7
 $AF22 DEFB $E0,$07,$C3,$80,$03,$80,$00,$00
 $AF2A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF32 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF3A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF42 DEFB $00,$00,$00,$00,$00,$00,$0E,$00
 $AF4A DEFB $00,$0B,$FC,$07,$1E,$00,$0F,$BC
 $AF52 DEFB $00,$3B,$FF,$FC,$07,$0F,$E0,$07
 $AF5A DEFB $87,$80,$0F,$C0,$00,$07,$C0,$00
 $AF62 DEFB $0F,$80,$00,$06,$80,$00,$0A,$00
 $AF6A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF72 DEFB $00,$00,$00,$1C,$00,$00,$17,$F8
 $AF7A DEFB $00,$1C,$00,$03,$BF,$F8,$1F,$EF
 $AF82 DEFB $C0,$07,$C7,$00,$03,$80,$00,$00
 $AF8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AF9A DEFB $00

; Sprite 36 - Pair of forks
;
; #CALL:print_graphic(#PC,2,Sprite_36)
b$AF9B DEFB $0A,$10,$00,$48,$10,$24,$24,$94
 $AFA3 DEFB $48,$4C,$52,$3E,$64,$06,$F8,$00
 $AFAB DEFB $C0,$01,$00,$02,$40,$04,$20,$08
 $AFB3 DEFB $18,$30,$1C,$70,$0E,$E0,$06,$C0
 $AFBB DEFB $00,$00,$08,$08,$12,$24,$24,$12
 $AFC3 DEFB $29,$4A,$32,$26,$7C,$1E,$60,$00
 $AFCB DEFB $80,$01,$00,$02,$40,$04,$20,$18
 $AFD3 DEFB $10,$38,$0C,$70,$0E,$60,$07,$00
 $AFDB DEFB $03

; Sprite 15 - Dr Blitzen
;
; #CALL:print_graphic(#PC,2,Sprite_15)
b$AFDC DEFB $0E,$27,$E4,$5F,$FA,$AF,$F5,$4F
 $AFE4 DEFB $F2,$A0,$05,$51,$8A,$1B,$D8,$1F
 $AFEC DEFB $F8,$0F,$F0,$06,$60,$07,$E0,$03
 $AFF4 DEFB $C0,$01,$80,$02,$40,$0F,$F0,$1B
 $AFFC DEFB $D8,$11,$88,$26,$64,$44,$E2,$61
 $B004 DEFB $86,$A6,$69,$00,$00,$FF,$FF,$3F
 $B00C DEFB $FC,$27,$E4,$5F,$FA,$AF,$F5,$4F
 $B014 DEFB $F2,$A0,$05,$51,$8A,$1B,$D8,$1F
 $B01C DEFB $F8,$0F,$F0,$07,$E0,$07,$E0,$03
 $B024 DEFB $C0,$01,$80,$02,$40,$0F,$F0,$1B
 $B02C DEFB $D8,$11,$88,$26,$64,$44,$E2,$61
 $B034 DEFB $86,$96,$25,$00,$00,$FF,$FF,$3F
 $B03C DEFB $FC

; Sprite 04 - Helicopter
;
; #CALL:print_graphic(#PC,4,Sprite_04)
b$B03D DEFB $07,$01,$FD,$7F,$60,$00,$00,$20
 $B045 DEFB $03,$E0,$17,$FE,$10,$08,$1F,$10
 $B04D DEFB $0C,$07,$E0,$00,$02,$48,$00,$0F
 $B055 DEFB $F0,$00,$3D,$78,$18,$00,$00,$10
 $B05D DEFB $03,$E0,$17,$FE,$10,$10,$1F,$10
 $B065 DEFB $30,$07,$E0,$00,$02,$48,$00,$0F
 $B06D DEFB $F0,$00,$01,$00,$0C,$00,$00,$08
 $B075 DEFB $03,$E0,$17,$FE,$10,$20,$1F,$10
 $B07D DEFB $60,$07,$E0,$00,$02,$48,$00,$0F
 $B085 DEFB $F0,$00,$3D,$78,$00,$00,$00,$04
 $B08D DEFB $03,$E0,$7D,$FE,$10,$40,$1F,$10
 $B095 DEFB $00,$07,$E0,$00,$02,$48,$00,$0F
 $B09D DEFB $F0

; Sprite 08 - Centipede
;
; #CALL:print_graphic(#PC,4,Sprite_08)
b$B09E DEFB $07,$09,$00,$0D,$1B,$68,$92,$5B
 $B0A6 DEFB $6D,$4C,$C3,$6D,$E0,$92,$48,$D0
 $B0AE DEFB $09,$22,$28,$A5,$54,$80,$90,$10
 $B0B6 DEFB $80,$03,$00,$04,$0B,$68,$99,$5B
 $B0BE DEFB $6D,$46,$DA,$6D,$E0,$90,$88,$D0
 $B0C6 DEFB $0A,$55,$28,$A9,$55,$00,$42,$08
 $B0CE DEFB $80,$00,$60,$00,$0B,$68,$87,$5B
 $B0D6 DEFB $6D,$48,$DB,$4D,$E6,$92,$28,$D1
 $B0DE DEFB $29,$52,$28,$92,$A5,$00,$52,$24
 $B0E6 DEFB $80,$00,$08,$0E,$0B,$6C,$90,$5B
 $B0EE DEFB $6D,$49,$DB,$69,$E6,$92,$40,$D0
 $B0F6 DEFB $49,$2A,$28,$55,$52,$00,$22,$44
 $B0FE DEFB $00

; Sprite 01 - Neptune
;
; #CALL:print_graphic(#PC,2,Sprite_01)
b$B0FF DEFB $0E,$55,$50,$55,$50,$3F,$E0,$2A
 $B107 DEFB $95,$00,$15,$3F,$D5,$52,$6E,$36
 $B10F DEFB $E4,$5F,$D4,$28,$A4,$17,$44,$2A
 $B117 DEFB $A4,$15,$54,$2A,$B4,$3D,$7A,$7F
 $B11F DEFB $CA,$EF,$C4,$CF,$C4,$05,$44,$60
 $B127 DEFB $04,$0D,$C4,$0C,$C4,$3C,$F0,$7C
 $B12F DEFB $F8,$55,$50,$55,$50,$3F,$E0,$2A
 $B137 DEFB $A0,$00,$00,$3F,$D5,$52,$55,$36
 $B13F DEFB $D5,$5F,$CE,$28,$A4,$17,$44,$2A
 $B147 DEFB $A4,$15,$44,$2A,$A4,$3D,$74,$7F
 $B14F DEFB $F4,$6F,$DA,$6F,$CA,$05,$44,$30
 $B157 DEFB $04,$05,$C4,$0C,$C4,$7C,$F4,$1C
 $B15F DEFB $F4

; Sprite 05 - Oscilloscope
;
; #CALL:print_graphic(#PC,2,Sprite_05)
b$B160 DEFB $0A,$7F,$FE,$40,$02,$4F,$F2,$5F
 $B168 DEFB $9A,$5F,$6A,$4F,$6A,$56,$F2,$56
 $B170 DEFB $FA,$59,$FA,$4F,$F2,$40,$02,$7F
 $B178 DEFB $FE,$12,$A8,$25,$52,$8A,$A9,$FF
 $B180 DEFB $FF,$7F,$FE,$40,$02,$4F,$F2,$59
 $B188 DEFB $FA,$56,$FA,$56,$F2,$4F,$6A,$5F
 $B190 DEFB $6A,$5F,$9A,$4F,$F2,$40,$02,$7F
 $B198 DEFB $FE,$12,$A8,$25,$52,$8A,$A9,$FF
 $B1A0 DEFB $FF

; Sprite 06 - Flying lightbulb
;
; #CALL:print_graphic(#PC,2,Sprite_06)
b$B1A1 DEFB $0E,$00,$00,$72,$CE,$8A,$D1,$8C
 $B1A9 DEFB $31,$7A,$DE,$20,$04,$01,$80,$01
 $B1B1 DEFB $80,$00,$00,$07,$E0,$00,$00,$15
 $B1B9 DEFB $F8,$3B,$FC,$37,$FC,$6B,$FE,$77
 $B1C1 DEFB $FE,$6B,$FE,$77,$FE,$2B,$FC,$37
 $B1C9 DEFB $FC,$1B,$F8,$0D,$F0,$03,$C0,$00
 $B1D1 DEFB $00,$00,$00,$02,$C0,$02,$C0,$00
 $B1D9 DEFB $00,$02,$C0,$00,$00,$01,$80,$01
 $B1E1 DEFB $80,$00,$00,$07,$E0,$00,$00,$15
 $B1E9 DEFB $F8,$3B,$FC,$37,$FC,$6B,$FE,$77
 $B1F1 DEFB $FE,$6B,$FE,$77,$FE,$2B,$FC,$37
 $B1F9 DEFB $FC,$1B,$F8,$0D,$F0,$03,$C0,$00
 $B201 DEFB $00

; Sprite 07 - Waiter
;
; #CALL:print_graphic(#PC,2,Sprite_07)
b$B202 DEFB $0E,$02,$40,$05,$A0,$03,$C0,$0D
 $B20A DEFB $B0,$0F,$F0,$07,$E0,$06,$60,$02
 $B212 DEFB $40,$11,$88,$36,$6C,$37,$EC,$77
 $B21A DEFB $EE,$77,$EE,$F7,$EF,$F3,$C7,$E0
 $B222 DEFB $0F,$4B,$F7,$5B,$F6,$5B,$F4,$23
 $B22A DEFB $F0,$23,$F0,$03,$F0,$03,$F0,$00
 $B232 DEFB $00,$02,$40,$05,$A0,$03,$C0,$0D
 $B23A DEFB $B0,$0F,$F0,$07,$E0,$06,$60,$01
 $B242 DEFB $80,$12,$48,$37,$EC,$35,$AC,$74
 $B24A DEFB $2E,$75,$AE,$F7,$EF,$F3,$C7,$E0
 $B252 DEFB $07,$E0,$0F,$4B,$F7,$5B,$F6,$5B
 $B25A DEFB $F4,$23,$F0,$23,$F0,$03,$F0,$03
 $B262 DEFB $F0

; Sprite 0A - Spark
;
; #CALL:print_graphic(#PC,2,Sprite_0A)
b$B263 DEFB $0A,$00,$00,$02,$40,$04,$48,$12
 $B26B DEFB $90,$26,$60,$19,$D4,$17,$E4,$CB
 $B273 DEFB $D8,$37,$CA,$4E,$E4,$0B,$50,$32
 $B27B DEFB $A4,$05,$B4,$04,$90,$01,$40,$00
 $B283 DEFB $00,$04,$90,$08,$A4,$25,$48,$4C
 $B28B DEFB $B0,$32,$CA,$2F,$D4,$97,$E9,$6F
 $B293 DEFB $E5,$1D,$D2,$AE,$AC,$55,$52,$12
 $B29B DEFB $28,$65,$22,$0A,$50,$09,$48,$02
 $B2A3 DEFB $20

; Sprite OB - Squid
;
; #CALL:print_graphic(#PC,2,Sprite_0B)
b$B2A4 DEFB $0E,$03,$E0,$0F,$F8,$3F,$FC,$33
 $B2AC DEFB $E4,$79,$CE,$72,$A6,$72,$A6,$70
 $B2B4 DEFB $86,$39,$CC,$3F,$FC,$1F,$F8,$0F
 $B2BC DEFB $F0,$1F,$F8,$1B,$DC,$37,$CE,$76
 $B2C4 DEFB $EE,$6E,$77,$CE,$73,$CC,$E3,$C6
 $B2CC DEFB $C7,$76,$EE,$13,$6C,$36,$2C,$00
 $B2D4 DEFB $16,$03,$E0,$0F,$F8,$3F,$FC,$33
 $B2DC DEFB $E4,$79,$CE,$74,$96,$74,$96,$70
 $B2E4 DEFB $86,$79,$CE,$7F,$FE,$3F,$FC,$3F
 $B2EC DEFB $FC,$1B,$F8,$1B,$6C,$37,$6C,$36
 $B2F4 DEFB $36,$6E,$36,$6C,$36,$6C,$76,$6E
 $B2FC DEFB $E6,$26,$C4,$33,$4C,$11,$28,$33
 $B304 DEFB $0C

; Sprite 12 - Flying saucer
;
; #CALL:print_graphic(#PC,2,Sprite_12)
b$B305 DEFB $0A,$00,$00,$00,$02,$00,$04,$00
 $B30D DEFB $14,$01,$C0,$07,$C8,$07,$80,$0F
 $B315 DEFB $28,$0E,$08,$0C,$98,$10,$30,$02
 $B31D DEFB $70,$29,$C0,$30,$00,$40,$00,$00
 $B325 DEFB $00,$00,$00,$00,$02,$00,$0C,$00
 $B32D DEFB $24,$01,$C8,$07,$C0,$07,$90,$0F
 $B335 DEFB $08,$0E,$48,$0C,$18,$01,$30,$14
 $B33D DEFB $70,$0D,$C0,$30,$00,$40,$00,$00
 $B345 DEFB $00

; Sprite 00 - Waiter on unicycle
;
; #CALL:print_graphic(#PC,4,Sprite_00)
b$B346 DEFB $0E,$3E,$00,$00,$10,$FF,$90,$00
 $B34E DEFB $38,$3E,$30,$3A,$32,$1F,$3A,$1E
 $B356 DEFB $7F,$30,$00,$39,$C0,$7C,$00,$7A
 $B35E DEFB $00,$5D,$00,$1C,$00,$2E,$00,$10
 $B366 DEFB $00,$06,$00,$20,$00,$47,$00,$4F
 $B36E DEFB $00,$67,$00,$3E,$00,$1C,$00,$00
 $B376 DEFB $00,$00,$00,$3E,$10,$00,$10,$FF
 $B37E DEFB $B8,$00,$30,$3E,$30,$3A,$3A,$1F
 $B386 DEFB $02,$1E,$7F,$38,$00,$7C,$C0,$76
 $B38E DEFB $00,$33,$00,$30,$00,$1B,$00,$02
 $B396 DEFB $00,$0C,$00,$22,$00,$63,$00,$67
 $B39E DEFB $00,$73,$00,$3E,$00,$1C,$00,$00
 $B3A6 DEFB $00,$3E,$00,$00,$00,$FF,$90,$00
 $B3AE DEFB $10,$3E,$38,$3A,$32,$1F,$32,$1E
 $B3B6 DEFB $38,$10,$7F,$38,$00,$3C,$C0,$36
 $B3BE DEFB $00,$33,$00,$30,$00,$07,$00,$36
 $B3C6 DEFB $00,$0C,$00,$2A,$00,$67,$00,$67
 $B3CE DEFB $00,$67,$00,$22,$00,$1C,$00,$00
 $B3D6 DEFB $00,$3E,$00,$00,$00,$FF,$A0,$00
 $B3DE DEFB $20,$3E,$70,$3A,$60,$1F,$64,$1E
 $B3E6 DEFB $74,$30,$FE,$78,$00,$7D,$80,$EE
 $B3EE DEFB $00,$CF,$00,$00,$00,$CF,$00,$1E
 $B3F6 DEFB $00,$1C,$00,$2A,$00,$67,$00,$47
 $B3FE DEFB $00,$4F,$00,$26,$00,$1C,$00,$00
 $B406 DEFB $00

; Sprite OD - Gryoscope
;
; #CALL:print_graphic(#PC,4,Sprite_0D)
b$B407 DEFB $0A,$03,$80,$0C,$60,$31,$18,$21
 $B40F DEFB $08,$41,$04,$41,$04,$80,$02,$BF
 $B417 DEFB $FA,$BF,$FA,$40,$04,$41,$04,$21
 $B41F DEFB $08,$31,$18,$0C,$60,$03,$80,$01
 $B427 DEFB $00,$01,$00,$02,$80,$05,$40,$09
 $B42F DEFB $20,$09,$20,$11,$10,$00,$10,$FF
 $B437 DEFB $D6,$FF,$D6,$00,$10,$11,$10,$09
 $B43F DEFB $20,$09,$20,$04,$40,$03,$80,$01
 $B447 DEFB $00,$01,$00,$01,$00,$01,$00,$01
 $B44F DEFB $00,$01,$00,$01,$00,$00,$00,$FF
 $B457 DEFB $FF,$FF,$FF,$00,$00,$01,$00,$01
 $B45F DEFB $00,$01,$00,$01,$00,$01,$00,$01
 $B467 DEFB $00,$01,$00,$02,$80,$05,$40,$09
 $B46F DEFB $20,$09,$20,$11,$10,$10,$00,$57
 $B477 DEFB $FE,$57,$FE,$10,$00,$11,$10,$09
 $B47F DEFB $20,$09,$20,$04,$40,$03,$80,$01
 $B487 DEFB $00

; Sprite OC - Train car
;
; #CALL:print_graphic(#PC,4,Sprite_0C)
b$B488 DEFB $0A,$30,$80,$34,$C0,$02,$40,$78
 $B490 DEFB $C0,$00,$80,$78,$00,$00,$C0,$78
 $B498 DEFB $D8,$00,$C7,$78,$C0,$00,$00,$FF
 $B4A0 DEFB $F8,$00,$00,$20,$20,$70,$70,$20
 $B4A8 DEFB $20,$00,$80,$30,$40,$36,$C0,$00
 $B4B0 DEFB $40,$78,$80,$00,$00,$78,$C0,$00
 $B4B8 DEFB $DF,$78,$C0,$00,$C0,$78,$00,$FF
 $B4C0 DEFB $F8,$00,$00,$50,$50,$20,$20,$50
 $B4C8 DEFB $50,$00,$80,$00,$C0,$32,$40,$34
 $B4D0 DEFB $C0,$00,$80,$78,$00,$00,$C7,$78
 $B4D8 DEFB $D8,$00,$C0,$78,$C0,$00,$00,$FF
 $B4E0 DEFB $F8,$00,$00,$20,$20,$70,$70,$20
 $B4E8 DEFB $20,$00,$80,$30,$40,$36,$C0,$00
 $B4F0 DEFB $40,$78,$80,$00,$00,$78,$C0,$00
 $B4F8 DEFB $DF,$78,$C0,$00,$C0,$78,$00,$FF
 $B500 DEFB $F8,$00,$00,$50,$50,$20,$20,$50
 $B508 DEFB $50

; Sprite 13 - Big face
;
; #CALL:print_graphic(#PC,2,Sprite_13)
b$B509 DEFB $0A,$1F,$F8,$7F,$FE,$41,$82,$7D
 $B511 DEFB $BE,$63,$C6,$B7,$ED,$FF,$FF,$FF
 $B519 DEFB $FF,$B5,$AD,$B8,$1D,$3F,$FC,$2A
 $B521 DEFB $AC,$20,$04,$12,$88,$11,$C8,$0C
 $B529 DEFB $E0,$1F,$F8,$63,$C6,$5D,$BA,$7F
 $B531 DEFB $FE,$6B,$D6,$B7,$ED,$FF,$FF,$FF
 $B539 DEFB $FF,$B5,$AD,$B8,$1D,$3F,$FC,$2A
 $B541 DEFB $AC,$20,$04,$15,$48,$0F,$F0,$00
 $B549 DEFB $00

; Sprite 14 - Bug eyed monster (3 wide)
;
; #CALL:print_graphic(#PC,2,Sprite_14)
b$B54A DEFB $0B,$00,$00,$1C,$70,$00,$3E,$F8
 $B552 DEFB $00,$26,$CA,$18,$A2,$8B,$BD,$B2
 $B55A DEFB $99,$24,$1C,$70,$24,$00,$00,$42
 $B562 DEFB $00,$00,$42,$00,$00,$24,$00,$00
 $B56A DEFB $3C,$00,$00,$C3,$80,$03,$81,$F0
 $B572 DEFB $0F,$00,$88,$11,$00,$40,$01,$00
 $B57A DEFB $00,$38,$00,$00,$7C,$00,$0E,$4C
 $B582 DEFB $18,$59,$45,$BD,$D1,$65,$24,$93
 $B58A DEFB $38,$42,$1F,$00,$42,$0E,$00,$3C
 $B592 DEFB $00,$00,$18,$00,$00,$24,$00,$00
 $B59A DEFB $42,$00,$01,$C3,$00,$0F,$81,$C0
 $B5A2 DEFB $11,$00,$F0,$02,$00,$88,$00,$00
 $B5AA DEFB $80

; Sprite 16 - Guy on hovercraft
;
; #CALL:print_graphic(#PC,4,Sprite_16)
b$B5AB DEFB $0E,$00,$00,$20,$00,$40,$00,$20
 $B5B3 DEFB $00,$40,$54,$00,$AA,$6C,$54,$EC
 $B5BB DEFB $B8,$6E,$68,$0E,$3C,$2F,$38,$47
 $B5C3 DEFB $10,$26,$B0,$46,$B8,$06,$B8,$00
 $B5CB DEFB $BA,$3F,$02,$7F,$FF,$7F,$FF,$00
 $B5D3 DEFB $00,$7F,$FF,$2A,$AA,$00,$00,$00
 $B5DB DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $B5E3 DEFB $54,$40,$AA,$00,$55,$6C,$B8,$EC
 $B5EB DEFB $68,$6E,$3C,$0E,$38,$2F,$10,$47
 $B5F3 DEFB $30,$06,$B8,$06,$B8,$06,$B8,$00
 $B5FB DEFB $BA,$3F,$02,$7F,$FF,$7F,$FF,$00
 $B603 DEFB $00,$7F,$FF,$2A,$AA,$00,$00,$00
 $B60B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B613 DEFB $00,$00,$54,$20,$AA,$4C,$54,$AC
 $B61B DEFB $B8,$6E,$68,$0E,$3C,$0F,$38,$07
 $B623 DEFB $10,$06,$B0,$06,$B8,$06,$B8,$00
 $B62B DEFB $BA,$3F,$02,$7F,$FF,$7F,$FF,$00
 $B633 DEFB $00,$7F,$FF,$2A,$AA,$00,$00,$00
 $B63B DEFB $00,$00,$00,$00,$00,$00,$00,$40
 $B643 DEFB $00,$20,$00,$00,$54,$6C,$AA,$EC
 $B64B DEFB $54,$6E,$B8,$0E,$68,$4F,$3C,$27
 $B653 DEFB $38,$06,$90,$06,$B0,$06,$B8,$00
 $B65B DEFB $BA,$3F,$02,$7F,$FF,$7F,$FF,$00
 $B663 DEFB $00,$7F,$FF,$2A,$AA,$00,$00,$00
 $B66B DEFB $00

; Sprite 17 - Fuse wire
;
; #CALL:print_graphic(#PC,4,Sprite_17)
b$B66C DEFB $0A,$00,$00,$09,$40,$05,$50,$14
 $B674 DEFB $A0,$0A,$A0,$06,$A0,$01,$40,$01
 $B67C DEFB $C0,$01,$C0,$01,$C0,$01,$C0,$01
 $B684 DEFB $C0,$01,$C0,$02,$A0,$02,$A0,$05
 $B68C DEFB $50,$00,$00,$00,$00,$00,$00,$00
 $B694 DEFB $20,$00,$24,$00,$48,$00,$52,$00
 $B69C DEFB $55,$00,$A8,$01,$D6,$03,$E1,$03
 $B6A4 DEFB $80,$07,$00,$0B,$00,$0A,$80,$15
 $B6AC DEFB $40,$00,$00,$00,$00,$00,$00,$00
 $B6B4 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $B6BC DEFB $C0,$07,$F0,$0F,$F8,$0E,$38,$0E
 $B6C4 DEFB $38,$1C,$1C,$1C,$1C,$2A,$2A,$55
 $B6CC DEFB $55,$00,$00,$00,$00,$00,$00,$02
 $B6D4 DEFB $00,$12,$00,$09,$00,$25,$00,$55
 $B6DC DEFB $00,$0A,$80,$35,$C0,$43,$E0,$00
 $B6E4 DEFB $E0,$00,$70,$00,$68,$00,$A8,$01
 $B6EC DEFB $54

; Sprite 1F - Semaphore flag
;
; #CALL:print_graphic(#PC,4,Sprite_1F)
b$B6ED DEFB $0A,$00,$80,$01,$40,$03,$A0,$07
 $B6F5 DEFB $90,$0F,$C8,$1F,$C4,$3F,$E2,$7F
 $B6FD DEFB $E1,$20,$1E,$10,$1C,$08,$38,$04
 $B705 DEFB $30,$02,$60,$01,$40,$00,$80,$00
 $B70D DEFB $00,$00,$80,$01,$40,$03,$20,$06
 $B715 DEFB $10,$0E,$08,$1E,$04,$3C,$02,$7C
 $B71D DEFB $01,$23,$FE,$11,$FC,$09,$F8,$04
 $B725 DEFB $F0,$02,$E0,$01,$40,$00,$80,$00
 $B72D DEFB $00,$00,$80,$01,$40,$02,$60,$04
 $B735 DEFB $30,$08,$38,$10,$3C,$20,$1E,$40
 $B73D DEFB $1F,$3F,$E2,$1F,$C4,$0F,$C8,$07
 $B745 DEFB $90,$03,$A0,$01,$40,$00,$80,$00
 $B74D DEFB $00,$00,$80,$01,$40,$02,$E0,$04
 $B755 DEFB $F0,$09,$F8,$11,$FC,$23,$FE,$43
 $B75D DEFB $FF,$3C,$02,$1C,$04,$0E,$08,$06
 $B765 DEFB $10,$03,$20,$01,$40,$00,$80,$00
 $B76D DEFB $00

; Sprite 25 - Dragonfly
;
; #CALL:print_graphic(#PC,4,Sprite_25)
b$B76E DEFB $0A,$00,$00,$00,$00,$00,$00,$00
 $B776 DEFB $00,$00,$00,$00,$00,$00,$A2,$00
 $B77E DEFB $55,$AA,$F7,$00,$02,$00,$00,$00
 $B786 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B78E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B796 DEFB $00,$00,$00,$00,$00,$00,$02,$00
 $B79E DEFB $05,$AA,$F7,$00,$82,$01,$50,$00
 $B7A6 DEFB $88,$01,$10,$02,$88,$01,$00,$02
 $B7AE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B7B6 DEFB $00,$00,$00,$00,$00,$00,$02,$00
 $B7BE DEFB $05,$AA,$F7,$00,$52,$00,$A0,$00
 $B7C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B7CE DEFB $00,$04,$08,$02,$10,$05,$08,$02
 $B7D6 DEFB $90,$01,$28,$00,$90,$01,$52,$00
 $B7DE DEFB $B7,$AA,$F7,$00,$02,$00,$00,$00
 $B7E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B7EE DEFB $00

; Sprite OE - Deep sea diver
;
; #CALL:print_graphic(#PC,2,Sprite_0E)
b$B7EF DEFB $0E,$07,$C0,$0F,$E0,$1D,$70,$19
 $B7F7 DEFB $30,$1F,$F0,$19,$30,$0D,$60,$07
 $B7FF DEFB $C0,$07,$C0,$0F,$E0,$07,$C0,$18
 $B807 DEFB $30,$3F,$F8,$3F,$F8,$67,$C8,$6F
 $B80F DEFB $EC,$0F,$EC,$67,$E0,$57,$E6,$46
 $B817 DEFB $75,$0E,$70,$3C,$30,$5C,$3C,$04
 $B81F DEFB $2A,$07,$C0,$0F,$E0,$1A,$F0,$12
 $B827 DEFB $70,$1F,$F0,$12,$70,$0A,$E0,$07
 $B82F DEFB $C0,$07,$C0,$0F,$E0,$07,$C0,$18
 $B837 DEFB $30,$3F,$F8,$37,$F8,$6F,$D8,$47
 $B83F DEFB $CC,$33,$EC,$2B,$E0,$27,$E6,$06
 $B847 DEFB $6A,$0E,$70,$0C,$3C,$3C,$3A,$54
 $B84F DEFB $20

; Sprite 2D - Crab
;
; #CALL:print_graphic(#PC,4,Sprite_2D)
b$B850 DEFB $07,$04,$5E,$41,$04,$5A,$63,$06
 $B858 DEFB $D8,$36,$01,$3E,$08,$01,$75,$88
 $B860 DEFB $01,$A4,$C8,$00,$18,$30,$00,$00
 $B868 DEFB $00,$00,$00,$88,$0A,$7E,$88,$11
 $B870 DEFB $5A,$D8,$1B,$18,$20,$04,$7E,$A0
 $B878 DEFB $05,$A5,$C0,$02,$34,$00,$00,$18
 $B880 DEFB $00,$00,$01,$40,$44,$7A,$20,$44
 $B888 DEFB $5B,$60,$6C,$18,$80,$11,$7E,$80
 $B890 DEFB $13,$AD,$00,$14,$24,$00,$08,$18
 $B898 DEFB $00,$00,$04,$40,$82,$74,$40,$C6
 $B8A0 DEFB $56,$C0,$6C,$19,$00,$11,$7D,$00
 $B8A8 DEFB $13,$A6,$00,$14,$2C,$00,$08,$18
 $B8B0 DEFB $00

; Sprite 2E - Fish bone
;
; #CALL:print_graphic(#PC,4,Sprite_2E)
b$B8B1 DEFB $06,$89,$20,$40,$00,$49,$26,$2D
 $B8B9 DEFB $B1,$2D,$B7,$49,$26,$49,$20,$89
 $B8C1 DEFB $20,$09,$20,$89,$20,$49,$26,$2D
 $B8C9 DEFB $B1,$2D,$B7,$49,$26,$80,$00,$09
 $B8D1 DEFB $20,$09,$20,$09,$20,$C9,$26,$2D
 $B8D9 DEFB $B1,$2D,$B7,$C9,$26,$09,$20,$09
 $B8E1 DEFB $20,$09,$20,$89,$20,$49,$26,$2D
 $B8E9 DEFB $A1,$2D,$A7,$49,$26,$89,$20,$09
 $B8F1 DEFB $20

; Sprite 30 - Jackhammer
;
; #CALL:print_graphic(#PC,2,Sprite_30)
b$B8F2 DEFB $0A,$00,$00,$00,$00,$00,$00,$C1
 $B8FA DEFB $83,$BD,$7B,$C1,$83,$01,$80,$04
 $B902 DEFB $20,$0B,$F0,$00,$00,$0B,$F0,$00
 $B90A DEFB $00,$05,$E0,$00,$00,$02,$C0,$01
 $B912 DEFB $80,$C1,$83,$BD,$7B,$C1,$83,$01
 $B91A DEFB $80,$01,$80,$01,$80,$01,$80,$04
 $B922 DEFB $20,$0B,$F0,$00,$00,$0B,$F0,$00
 $B92A DEFB $00,$05,$E0,$00,$00,$02,$C0,$01
 $B932 DEFB $80

; Sprite 33 - Spinning top
;
; #CALL:print_graphic(#PC,4,Sprite_33)
b$B933 DEFB $0B,$00,$2C,$00,$00,$5E,$00,$60
 $B93B DEFB $00,$06,$FE,$18,$3F,$3F,$DB,$FC
 $B943 DEFB $07,$18,$E0,$00,$00,$00,$00,$5E
 $B94B DEFB $00,$00,$5E,$00,$00,$00,$00,$00
 $B953 DEFB $2C,$00,$00,$2C,$00,$00,$2C,$00
 $B95B DEFB $00,$00,$00,$06,$AA,$A0,$06,$AA
 $B963 DEFB $A0,$00,$00,$00,$00,$2C,$00,$00
 $B96B DEFB $5E,$00,$0E,$00,$70,$07,$99,$E0
 $B973 DEFB $01,$EB,$80,$00,$00,$00,$00,$5E
 $B97B DEFB $00,$00,$5E,$00,$00,$00,$00,$00
 $B983 DEFB $2C,$00,$00,$2C,$00,$00,$2C,$00
 $B98B DEFB $00,$00,$00,$05,$55,$A0,$05,$55
 $B993 DEFB $A0,$00,$2C,$00,$00,$5E,$00,$00
 $B99B DEFB $00,$00,$00,$18,$00,$00,$18,$00
 $B9A3 DEFB $00,$18,$00,$00,$00,$00,$00,$5E
 $B9AB DEFB $00,$00,$5E,$00,$00,$00,$00,$00
 $B9B3 DEFB $2C,$00,$00,$2C,$00,$00,$2C,$00
 $B9BB DEFB $00,$00,$00,$05,$6A,$A0,$05,$6A
 $B9C3 DEFB $A0,$00,$00,$00,$00,$2C,$00,$00
 $B9CB DEFB $5E,$00,$0E,$00,$70,$07,$99,$E0
 $B9D3 DEFB $01,$D7,$80,$00,$00,$00,$00,$5E
 $B9DB DEFB $00,$00,$5E,$00,$00,$00,$00,$00
 $B9E3 DEFB $2C,$00,$00,$2C,$00,$00,$2C,$00
 $B9EB DEFB $00,$00,$00,$05,$55,$60,$05,$55
 $B9F3 DEFB $60

; Sprite 3A - Lightbulb with claws
;
; #CALL:print_graphic(#PC,4,Sprite_3A)
b$B9F4 DEFB $0A,$60,$06,$B0,$0D,$11,$88,$0D
 $B9FC DEFB $70,$11,$88,$B1,$8D,$61,$86,$00
 $BA04 DEFB $00,$02,$C0,$05,$E0,$04,$E0,$09
 $BA0C DEFB $F0,$0A,$F0,$09,$F0,$04,$E0,$03
 $BA14 DEFB $C0,$00,$00,$1C,$38,$25,$A4,$01
 $BA1C DEFB $40,$25,$A4,$1D,$B8,$01,$80,$00
 $BA24 DEFB $00,$02,$C0,$04,$E0,$09,$F0,$0A
 $BA2C DEFB $F0,$09,$F0,$04,$E0,$03,$C0,$00
 $BA34 DEFB $00,$00,$00,$01,$80,$01,$80,$00
 $BA3C DEFB $00,$01,$80,$01,$80,$00,$00,$00
 $BA44 DEFB $00,$02,$C0,$05,$E0,$04,$E0,$09
 $BA4C DEFB $F0,$0A,$F0,$09,$F0,$04,$E0,$03
 $BA54 DEFB $C0,$00,$00,$1C,$38,$25,$A4,$02
 $BA5C DEFB $80,$25,$A4,$1D,$B8,$01,$80,$00
 $BA64 DEFB $00,$02,$C0,$05,$E0,$04,$E0,$09
 $BA6C DEFB $F0,$09,$F0,$04,$E0,$03,$C0,$00
 $BA74 DEFB $00

; Sprite 2B - Screw
;
; #CALL:print_graphic(#PC,2,Sprite_2B)
b$BA75 DEFB $0D,$5F,$2E,$00,$10,$04,$08,$10
 $BA7D DEFB $04,$08,$10,$04,$08,$10,$04,$00
 $BA85 DEFB $1C,$00,$5D,$6D,$5D,$08,$00,$08
 $BA8D DEFB $08,$00,$00,$5F,$2E,$00,$04,$08
 $BA95 DEFB $10,$04,$08,$10,$04,$08,$10,$00
 $BA9D DEFB $1C,$00,$14,$14,$14,$08,$00,$08
 $BAA5 DEFB $08

; Sprite 39 - Axle
;
; #CALL:print_graphic(#PC,2,Sprite_39)
b$BAA6 DEFB $06,$41,$80,$E2,$40,$01,$82,$FA
 $BAAE DEFB $57,$99,$97,$42,$42,$E1,$80,$42
 $BAB6 DEFB $40,$02,$42,$01,$87,$42,$40,$E9
 $BABE DEFB $9F,$EA,$59,$41,$82,$02,$47,$01
 $BAC6 DEFB $82

; Sprite 37 - Fuse with claws
;
; #CALL:print_graphic(#PC,4,Sprite_37)
b$BAC7 DEFB $09,$44,$54,$92,$AA,$92,$6C,$7C
 $BACF DEFB $38,$38,$38,$00,$38,$7C,$00,$54
 $BAD7 DEFB $92,$00,$28,$28,$44,$44,$54,$28
 $BADF DEFB $38,$38,$38,$00,$38,$7C,$00,$28
 $BAE7 DEFB $44,$00,$00,$10,$10,$10,$28,$10
 $BAEF DEFB $28,$38,$38,$00,$38,$7C,$00,$54
 $BAF7 DEFB $92,$00,$28,$28,$44,$44,$54,$28
 $BAFF DEFB $38,$38,$38,$00,$38,$7C,$00,$28
 $BB07 DEFB $44

; Sprite 35 - Skull and crossbones
;
; #CALL:print_graphic(#PC,2,Sprite_35)
b$BB08 DEFB $0A,$00,$02,$01,$82,$07,$E0,$0F
 $BB10 DEFB $F7,$01,$80,$09,$97,$0D,$B0,$07
 $BB18 DEFB $E7,$A2,$40,$61,$82,$18,$09,$06
 $BB20 DEFB $72,$03,$C2,$03,$C2,$06,$70,$0C
 $BB28 DEFB $20,$00,$00,$01,$80,$07,$E4,$0F
 $BB30 DEFB $F4,$01,$80,$09,$8E,$0D,$A0,$07
 $BB38 DEFB $EE,$53,$C0,$61,$8E,$18,$00,$06
 $BB40 DEFB $64,$03,$D2,$03,$C4,$0E,$64,$04
 $BB48 DEFB $34

; Sprite 34 - Sea monster
;
; #CALL:print_graphic(#PC,2,Sprite_34)
b$BB49 DEFB $0E,$03,$80,$0E,$C0,$3E,$40,$33
 $BB51 DEFB $46,$61,$89,$60,$09,$60,$0B,$37
 $BB59 DEFB $0E,$3F,$86,$1F,$8C,$5F,$7C,$3F
 $BB61 DEFB $F0,$5F,$C0,$0A,$80,$51,$00,$8A
 $BB69 DEFB $80,$52,$40,$44,$A0,$92,$40,$11
 $BB71 DEFB $40,$52,$A0,$89,$00,$40,$40,$00
 $BB79 DEFB $00,$00,$00,$01,$80,$0F,$40,$3E
 $BB81 DEFB $2C,$33,$26,$61,$C2,$60,$12,$77
 $BB89 DEFB $0E,$3F,$8C,$1F,$98,$5F,$78,$3F
 $BB91 DEFB $F0,$5F,$C0,$0A,$80,$29,$00,$25
 $BB99 DEFB $00,$4A,$80,$91,$40,$49,$40,$52
 $BBA1 DEFB $80,$8A,$40,$49,$20,$20,$20,$40
 $BBA9 DEFB $00

; Sprite 31 - Coral
;
; #CALL:print_graphic(#PC,2,Sprite_31)
b$BBAA DEFB $0A,$00,$00,$01,$40,$0A,$28,$09
 $BBB2 DEFB $48,$34,$96,$0B,$68,$26,$32,$54
 $BBBA DEFB $95,$09,$48,$54,$95,$26,$32,$0B
 $BBC2 DEFB $68,$34,$96,$09,$48,$0A,$28,$01
 $BBCA DEFB $40,$00,$00,$00,$00,$01,$40,$09
 $BBD2 DEFB $48,$14,$94,$09,$48,$06,$B0,$35
 $BBDA DEFB $56,$0A,$28,$35,$56,$06,$B0,$09
 $BBE2 DEFB $48,$14,$94,$09,$48,$01,$40,$00
 $BBEA DEFB $00

; Sprite 2F - Mini robot
;
; #CALL:print_graphic(#PC,4,Sprite_2F)
b$BBEB DEFB $09,$00,$7C,$FE,$8E,$8E,$00,$D5
 $BBF3 DEFB $D5,$D5,$00,$D8,$7E,$0C,$61,$47
 $BBFB DEFB $C4,$3C,$7E,$62,$62,$7E,$00,$B5
 $BC03 DEFB $B5,$B5,$00,$7E,$7E,$30,$86,$E2
 $BC0B DEFB $23,$3C,$7E,$7C,$7C,$7E,$00,$AC
 $BC13 DEFB $AD,$AD,$00,$7E,$7E,$0C,$61,$47
 $BC1B DEFB $C4,$00,$3C,$7E,$3E,$3E,$00,$AB
 $BC23 DEFB $AB,$AB,$00,$7E,$7E,$30,$84,$E7
 $BC2B DEFB $21

; Sprite 1E - Viking
;
; #CALL:print_graphic(#PC,2,Sprite_1E)
b$BC2C DEFB $0E,$10,$02,$20,$C1,$21,$61,$32
 $BC34 DEFB $F3,$10,$02,$05,$F8,$00,$C0,$02
 $BC3C DEFB $D0,$00,$00,$04,$C8,$0D,$EC,$9E
 $BC44 DEFB $1E,$4C,$0E,$21,$E6,$33,$F4,$18
 $BC4C DEFB $01,$0C,$07,$08,$87,$01,$1E,$02
 $BC54 DEFB $38,$04,$C0,$81,$C0,$E0,$8C,$38
 $BC5C DEFB $1F,$10,$02,$20,$C1,$21,$61,$32
 $BC64 DEFB $F3,$10,$02,$05,$F8,$00,$C0,$02
 $BC6C DEFB $D0,$00,$00,$04,$C8,$4D,$EC,$4E
 $BC74 DEFB $1E,$24,$0E,$21,$E6,$32,$14,$11
 $BC7C DEFB $E0,$18,$06,$10,$1E,$06,$1C,$18
 $BC84 DEFB $78,$22,$E0,$0F,$03,$06,$0E,$70
 $BC8C DEFB $1C

; Sprite 1D - Satellite dish
;
; #CALL:print_graphic(#PC,2,Sprite_1D)
b$BC8D DEFB $0A,$04,$02,$02,$54,$03,$08,$03
 $BC95 DEFB $94,$01,$C0,$01,$E4,$00,$F0,$01
 $BC9D DEFB $78,$01,$1C,$01,$02,$02,$80,$07
 $BCA5 DEFB $40,$00,$00,$3F,$FC,$40,$02,$15
 $BCAD DEFB $54,$03,$80,$0F,$E0,$1F,$F0,$1F
 $BCB5 DEFB $F0,$3F,$F8,$3F,$F8,$3E,$F8,$1D
 $BCBD DEFB $70,$1D,$70,$09,$20,$02,$80,$07
 $BCC5 DEFB $40,$00,$00,$3F,$FC,$40,$02,$2A
 $BCCD DEFB $A8,$80,$40,$54,$80,$21,$80,$53
 $BCD5 DEFB $80,$07,$00,$4F,$00,$1E,$00,$3D
 $BCDD DEFB $00,$71,$00,$81,$00,$02,$80,$07
 $BCE5 DEFB $40,$00,$00,$3F,$FC,$40,$02,$15
 $BCED DEFB $54,$01,$00,$06,$C0,$1E,$F0,$1D
 $BCF5 DEFB $70,$3A,$B8,$3A,$B8,$3E,$F8,$1F
 $BCFD DEFB $F0,$1F,$F0,$07,$C0,$00,$00,$07
 $BD05 DEFB $40,$00,$00,$3F,$FC,$40,$02,$2A
 $BD0D DEFB $A8

; Sprite 1C - Crank shafts
;
; #CALL:print_graphic(#PC,2,Sprite_1C)
b$BD0E DEFB $0A,$00,$00,$00,$00,$00,$00,$00
 $BD16 DEFB $00,$00,$00,$30,$18,$48,$24,$48
 $BD1E DEFB $24,$34,$F8,$0E,$C0,$07,$00,$33
 $BD26 DEFB $80,$49,$60,$48,$90,$30,$90,$00
 $BD2E DEFB $60,$00,$30,$00,$48,$00,$48,$00
 $BD36 DEFB $30,$60,$06,$97,$B1,$97,$B1,$60
 $BD3E DEFB $36,$00,$30,$00,$30,$00,$30,$00
 $BD46 DEFB $00,$00,$30,$00,$48,$00,$48,$00
 $BD4E DEFB $30

; Sprite 1B - Big sea monster
;
; #CALL:print_graphic(#PC,2,Sprite_1B)
b$BD4F DEFB $0F,$60,$00,$06,$98,$00,$0D,$8E
 $BD57 DEFB $00,$39,$4B,$00,$6A,$B1,$80,$C4
 $BD5F DEFB $51,$81,$8A,$00,$C3,$80,$00,$E7
 $BD67 DEFB $00,$00,$EF,$00,$01,$EF,$00,$01
 $BD6F DEFB $FF,$38,$07,$FE,$EC,$0F,$FF,$CA
 $BD77 DEFB $19,$FF,$8A,$20,$FF,$00,$30,$7E
 $BD7F DEFB $00,$28,$BC,$00,$11,$FE,$00,$03
 $BD87 DEFB $EF,$00,$07,$03,$80,$0C,$01,$E0
 $BD8F DEFB $1E,$00,$7C,$69,$00,$52,$00,$00
 $BD97 DEFB $88,$18,$00,$00,$24,$00,$18,$22
 $BD9F DEFB $00,$34,$13,$00,$E4,$2F,$01,$A4
 $BDA7 DEFB $0B,$83,$1A,$01,$86,$28,$01,$86
 $BDAF DEFB $00,$01,$CE,$02,$01,$DE,$1D,$03
 $BDB7 DEFB $FC,$72,$0F,$FD,$E1,$1F,$FF,$C0
 $BDBF DEFB $33,$FF,$80,$40,$FE,$00,$40,$7C
 $BDC7 DEFB $00,$A0,$BA,$00,$A1,$FF,$00,$01
 $BDCF DEFB $EF,$80,$03,$83,$E0,$07,$00,$7C
 $BDD7 DEFB $1C,$00,$48,$78,$00,$48,$94,$00
 $BDDF DEFB $00

; Sprite 19 - Alien
;
; #CALL:print_graphic(#PC,2,Sprite_19)
b$BDE0 DEFB $0A,$1E,$78,$B3,$CD,$A1,$95,$A5
 $BDE8 DEFB $95,$E5,$97,$E5,$87,$61,$86,$3F
 $BDF0 DEFB $FC,$1A,$58,$08,$15,$07,$E2,$19
 $BDF8 DEFB $9A,$3F,$FC,$47,$E0,$43,$C8,$AE
 $BE00 DEFB $70,$1E,$78,$B3,$CD,$A9,$85,$A9
 $BE08 DEFB $A5,$E9,$A7,$E1,$A7,$61,$86,$3F
 $BE10 DEFB $FC,$18,$18,$AF,$F0,$43,$C0,$59
 $BE18 DEFB $98,$3F,$FC,$07,$E2,$13,$C2,$0E
 $BE20 DEFB $75

; Sprite 18 - Spider
;
; #CALL:print_graphic(#PC,2,Sprite_18)
b$BE21 DEFB $0B,$06,$00,$C0,$0B,$00,$A0,$05
 $BE29 DEFB $01,$40,$01,$02,$00,$19,$7A,$00
 $BE31 DEFB $64,$B4,$60,$9A,$B5,$98,$A5,$7A
 $BE39 DEFB $44,$25,$FE,$B2,$4B,$2B,$4A,$8A
 $BE41 DEFB $01,$48,$91,$52,$28,$10,$FC,$24
 $BE49 DEFB $10,$00,$14,$08,$00,$12,$08,$00
 $BE51 DEFB $09,$00,$01,$80,$0C,$01,$40,$16
 $BE59 DEFB $02,$80,$0A,$04,$00,$01,$74,$00
 $BE61 DEFB $31,$74,$E0,$4C,$B9,$10,$93,$7E
 $BE69 DEFB $C8,$25,$FF,$24,$4B,$53,$94,$52
 $BE71 DEFB $01,$50,$51,$02,$48,$09,$2A,$48
 $BE79 DEFB $04,$FC,$24,$04,$00,$24,$00,$00
 $BE81 DEFB $20

; Sprite 24 - Snail
;
; #CALL:print_graphic(#PC,4,Sprite_24)
b$BE82 DEFB $0B,$07,$F8,$00,$1F,$FE,$00,$3D
 $BE8A DEFB $5F,$00,$38,$0F,$00,$73,$E7,$80
 $BE92 DEFB $66,$33,$84,$74,$5B,$85,$66,$5B
 $BE9A DEFB $89,$33,$DB,$8A,$38,$37,$0A,$1A
 $BEA2 DEFB $B6,$00,$0F,$E0,$1E,$10,$0F,$FF
 $BEAA DEFB $3F,$FF,$FE,$7F,$FF,$F0,$55,$55
 $BEB2 DEFB $40,$00,$00,$00,$07,$F8,$00,$1F
 $BEBA DEFB $FE,$00,$3D,$5F,$00,$38,$0F,$00
 $BEC2 DEFB $73,$E7,$84,$66,$33,$89,$74,$5B
 $BECA DEFB $8A,$66,$5B,$8A,$33,$DB,$8A,$38
 $BED2 DEFB $37,$00,$1A,$B6,$1E,$0F,$E0,$FF
 $BEDA DEFB $30,$0F,$FE,$7F,$FF,$F0,$AA,$AA
 $BEE2 DEFB $A0,$07,$F8,$00,$1F,$FE,$00,$3D
 $BEEA DEFB $5F,$00,$38,$0F,$00,$73,$E7,$80
 $BEF2 DEFB $66,$33,$88,$74,$5B,$8A,$66,$5B
 $BEFA DEFB $94,$33,$DB,$14,$38,$37,$14,$1A
 $BF02 DEFB $B6,$00,$0F,$E0,$3C,$10,$0F,$FE
 $BF0A DEFB $3F,$FF,$FC,$7F,$FF,$E0,$55,$55
 $BF12 DEFB $00,$00,$00,$00,$07,$F8,$00,$1F
 $BF1A DEFB $FE,$00,$3D,$5F,$00,$38,$0F,$80
 $BF22 DEFB $73,$E7,$88,$66,$33,$89,$74,$5B
 $BF2A DEFB $8A,$66,$5B,$92,$33,$DB,$14,$38
 $BF32 DEFB $37,$00,$1A,$B6,$3C,$0F,$E0,$FE
 $BF3A DEFB $30,$0F,$FC,$7F,$FF,$E0,$AA,$AA
 $BF42 DEFB $80

; Sprite OF - Vacuum cleaner
;
; #CALL:print_graphic(#PC,4,Sprite_0F)
b$BF43 DEFB $0A,$0A,$15,$2A,$84,$11,$04,$60
 $BF4B DEFB $C4,$00,$04,$50,$C4,$D8,$00,$88
 $BF53 DEFB $BE,$89,$7F,$50,$00,$01,$7F,$01
 $BF5B DEFB $7F,$01,$7F,$01,$7F,$00,$00,$00
 $BF63 DEFB $82,$00,$00,$05,$0E,$15,$44,$08
 $BF6B DEFB $84,$30,$04,$00,$C4,$30,$00,$00
 $BF73 DEFB $BE,$29,$7F,$6C,$00,$45,$7F,$45
 $BF7B DEFB $7F,$45,$7F,$01,$7F,$00,$00,$00
 $BF83 DEFB $82,$00,$00,$00,$00,$02,$04,$0A
 $BF8B DEFB $80,$15,$04,$08,$C4,$30,$00,$00
 $BF93 DEFB $BE,$18,$7F,$07,$00,$04,$BF,$04
 $BF9B DEFB $5F,$03,$1F,$00,$7F,$00,$00,$00
 $BFA3 DEFB $82,$01,$00,$05,$4E,$02,$84,$0C
 $BFAB DEFB $64,$00,$04,$18,$64,$00,$00,$28
 $BFB3 DEFB $BE,$6D,$7F,$44,$00,$45,$7F,$29
 $BFBB DEFB $7F,$01,$7F,$01,$7F,$00,$00,$00
 $BFC3 DEFB $82

; Sprite 11 - Cannon
;
; #CALL:print_graphic(#PC,4,Sprite_11)
b$BFC4 DEFB $0B,$00,$00,$00,$00,$00,$06,$00
 $BFCC DEFB $00,$3A,$00,$01,$C7,$00,$0E,$3C
 $BFD4 DEFB $00,$71,$F8,$01,$81,$E0,$06,$3C
 $BFDC DEFB $C0,$04,$66,$00,$0C,$D3,$00,$06
 $BFE4 DEFB $B1,$00,$06,$81,$00,$12,$C3,$00
 $BFEC DEFB $F0,$66,$00,$00,$3C,$00,$00,$00
 $BFF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BFFC DEFB $00,$06,$00,$00,$3A,$00,$01,$C7
 $C004 DEFB $00,$0E,$3C,$00,$01,$F8,$01,$BD
 $C00C DEFB $E0,$06,$66,$C0,$04,$CB,$00,$0C
 $C014 DEFB $8D,$00,$06,$81,$00,$16,$C3,$00
 $C01C DEFB $F2,$66,$00,$00,$3C,$00,$00,$00
 $C024 DEFB $00,$00,$00,$00,$00,$00,$06,$00
 $C02C DEFB $00,$3A,$00,$01,$C7,$00,$0E,$3C
 $C034 DEFB $00,$71,$F8,$01,$81,$E0,$06,$3C
 $C03C DEFB $C0,$04,$66,$00,$0C,$C3,$00,$06
 $C044 DEFB $81,$00,$06,$8D,$00,$12,$CB,$00
 $C04C DEFB $F0,$66,$00,$00,$3C,$00,$00,$00
 $C054 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C05C DEFB $00,$06,$00,$00,$3A,$00,$01,$C7
 $C064 DEFB $00,$0E,$3C,$00,$01,$F8,$01,$BD
 $C06C DEFB $E0,$06,$66,$C0,$04,$C3,$00,$0C
 $C074 DEFB $81,$00,$06,$B1,$00,$16,$D3,$00
 $C07C DEFB $F2,$66,$00,$00,$3C,$00,$00,$00
 $C084 DEFB $00

; Sprite 10 - Bird
;
; #CALL:print_graphic(#PC,4,Sprite_10)
b$C085 DEFB $0A,$00,$00,$00,$00,$00,$00,$00
 $C08D DEFB $00,$00,$00,$00,$20,$0F,$1C,$FF
 $C095 DEFB $D4,$3F,$FF,$17,$E0,$0F,$80,$6F
 $C09D DEFB $00,$0F,$00,$06,$00,$06,$00,$00
 $C0A5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C0AD DEFB $00,$00,$00,$00,$20,$0F,$1C,$3F
 $C0B5 DEFB $D4,$FF,$FF,$1F,$C0,$0C,$00,$30
 $C0BD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C0C5 DEFB $00,$06,$00,$06,$00,$07,$00,$0F
 $C0CD DEFB $00,$0F,$00,$0F,$80,$0F,$80,$37
 $C0D5 DEFB $DC,$FF,$D4,$1F,$FF,$0C,$00,$30
 $C0DD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C0E5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C0ED DEFB $00,$00,$00,$00,$20,$0F,$1C,$FF
 $C0F5 DEFB $D4,$3F,$FF,$07,$E0,$0C,$00,$30
 $C0FD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C105 DEFB $00

; Sprite 1A - Kalaedoscope image
;
; #CALL:print_graphic(#PC,4,Sprite_1A)
b$C106 DEFB $05,$18,$42,$81,$18,$18,$81,$42
 $C10E DEFB $18,$24,$00,$99,$24,$24,$99,$00
 $C116 DEFB $24,$00,$00,$24,$18,$18,$24,$00
 $C11E DEFB $00,$00,$24,$42,$00,$00,$42,$24
 $C126 DEFB $00

; Sprite 09 - Droid
;
; #CALL:print_graphic(#PC,4,Sprite_09)
b$C127 DEFB $09,$18,$66,$42,$81,$81,$42,$66
 $C12F DEFB $18,$18,$18,$00,$2C,$5E,$00,$BF
 $C137 DEFB $BF,$18,$24,$42,$42,$42,$42,$24
 $C13F DEFB $18,$18,$18,$00,$2C,$5E,$00,$BF
 $C147 DEFB $BF,$18,$24,$24,$24,$24,$24,$24
 $C14F DEFB $18,$18,$18,$00,$2C,$5E,$00,$BF
 $C157 DEFB $BF,$00,$18,$24,$42,$42,$42,$42
 $C15F DEFB $24,$18,$18,$00,$2C,$5E,$00,$BF
 $C167 DEFB $BF

; Sprite 02 - Toy soldier
;
; #CALL:print_graphic(#PC,4,Sprite_02)
b$C168 DEFB $0D,$14,$2A,$14,$2A,$14,$2A,$00
 $C170 DEFB $1C,$14,$9E,$48,$24,$10,$28,$34
 $C178 DEFB $52,$5D,$80,$98,$34,$34,$27,$62
 $C180 DEFB $70,$14,$2A,$14,$2A,$14,$2A,$00
 $C188 DEFB $1C,$14,$9E,$4C,$20,$10,$28,$24
 $C190 DEFB $32,$1D,$00,$18,$18,$18,$18,$18
 $C198 DEFB $1C,$14,$2A,$14,$2A,$14,$2A,$00
 $C1A0 DEFB $1C,$14,$9E,$48,$24,$10,$28,$24
 $C1A8 DEFB $32,$1D,$00,$18,$1C,$2C,$27,$42
 $C1B0 DEFB $60,$14,$2A,$14,$2A,$14,$2A,$00
 $C1B8 DEFB $1C,$14,$9E,$4C,$20,$10,$28,$24
 $C1C0 DEFB $32,$5D,$40,$18,$18,$18,$18,$18
 $C1C8 DEFB $1C

; Sprite 03 - Scissors
;
; #CALL:print_graphic(#PC,4,Sprite_03)
b$C1C9 DEFB $0A,$00,$00,$70,$00,$88,$00,$88
 $C1D1 DEFB $1E,$9C,$78,$7D,$E0,$0E,$80,$05
 $C1D9 DEFB $00,$07,$80,$09,$E0,$7C,$78,$98
 $C1E1 DEFB $1E,$88,$00,$88,$00,$70,$00,$00
 $C1E9 DEFB $00,$00,$00,$00,$00,$70,$00,$88
 $C1F1 DEFB $00,$88,$1F,$9C,$FC,$7F,$60,$05
 $C1F9 DEFB $80,$0B,$E0,$78,$FC,$98,$1F,$88
 $C201 DEFB $00,$88,$00,$70,$00,$00,$00,$00
 $C209 DEFB $00,$00,$00,$00,$00,$00,$00,$70
 $C211 DEFB $00,$88,$00,$88,$3C,$9F,$7F,$7D
 $C219 DEFB $80,$67,$FF,$98,$3C,$88,$00,$88
 $C221 DEFB $00,$70,$00,$00,$00,$00,$00,$00
 $C229 DEFB $00,$00,$00,$00,$00,$70,$00,$88
 $C231 DEFB $00,$88,$1F,$9C,$FC,$7F,$60,$05
 $C239 DEFB $80,$0B,$E0,$78,$FC,$98,$1F,$88
 $C241 DEFB $00,$88,$00,$70,$00,$00,$00,$00
 $C249 DEFB $00

; Sprite 20 - Big alien face
;
; #CALL:print_graphic(#PC,2,Sprite_20)
b$C24A DEFB $0F,$00,$00,$38,$00,$00,$44,$00
 $C252 DEFB $00,$82,$1F,$BA,$82,$00,$14,$82
 $C25A DEFB $00,$14,$44,$00,$14,$38,$00,$2A
 $C262 DEFB $00,$00,$14,$00,$00,$63,$00,$3F
 $C26A DEFB $AA,$FE,$0C,$DD,$98,$16,$DD,$B4
 $C272 DEFB $0B,$9C,$E8,$00,$1C,$00,$05,$2A
 $C27A DEFB $50,$05,$80,$D0,$06,$BE,$B0,$05
 $C282 DEFB $41,$50,$03,$3E,$60,$02,$80,$A0
 $C28A DEFB $01,$3E,$40,$00,$1C,$00,$00,$08
 $C292 DEFB $00,$0E,$00,$00,$11,$00,$00,$20
 $C29A DEFB $80,$00,$20,$BA,$FC,$20,$94,$00
 $C2A2 DEFB $11,$14,$00,$0E,$14,$00,$00,$2A
 $C2AA DEFB $00,$00,$14,$00,$00,$63,$00,$3F
 $C2B2 DEFB $AA,$FE,$0C,$DD,$98,$16,$DD,$B4
 $C2BA DEFB $0B,$9C,$E8,$00,$1C,$00,$05,$2A
 $C2C2 DEFB $50,$06,$9C,$B0,$02,$22,$20,$05
 $C2CA DEFB $41,$50,$02,$22,$20,$01,$1C,$40
 $C2D2 DEFB $00,$80,$80,$00,$1C,$00,$00,$08
 $C2DA DEFB $00

; Sprite 22 - Walking plunger
;
; #CALL:print_graphic(#PC,2,Sprite_22)
b$C2DB DEFB $06,$02,$00,$02,$00,$02,$00,$02
 $C2E3 DEFB $00,$00,$00,$05,$00,$0B,$80,$0B
 $C2EB DEFB $80,$0A,$C0,$0D,$40,$0A,$C0,$08
 $C2F3 DEFB $40,$08,$00,$00,$A0,$15,$70,$2E
 $C2FB DEFB $00,$35,$60,$2A,$A0,$35,$60,$20
 $C303 DEFB $20,$20,$00,$00,$50,$50,$B8,$B8
 $C30B DEFB $00,$1A,$80,$15,$80,$1A,$80,$10
 $C313 DEFB $80,$00,$80,$28,$00,$5D,$40,$02
 $C31B DEFB $E0

; Sprite 21 - Upside down crawling thing
;
; #CALL:print_graphic(#PC,4,Sprite_21)
b$C31C DEFB $0B,$50,$00,$05,$20,$28,$02,$20
 $C324 DEFB $10,$02,$18,$08,$04,$06,$00,$04
 $C32C DEFB $01,$BC,$08,$00,$5B,$30,$00,$3C
 $C334 DEFB $C0,$00,$3C,$00,$00,$7E,$00,$18
 $C33C DEFB $7E,$18,$24,$CB,$3C,$27,$81,$F4
 $C344 DEFB $14,$52,$28,$08,$3C,$10,$00,$00
 $C34C DEFB $00,$A0,$50,$0A,$40,$20,$04,$20
 $C354 DEFB $10,$04,$1C,$08,$08,$03,$3C,$08
 $C35C DEFB $00,$DA,$70,$00,$3D,$80,$00,$3C
 $C364 DEFB $00,$00,$7E,$00,$00,$7E,$00,$18
 $C36C DEFB $D7,$18,$2D,$81,$BC,$27,$4A,$E4
 $C374 DEFB $14,$7E,$28,$08,$00,$10,$00,$00
 $C37C DEFB $00,$00,$00,$28,$05,$14,$10,$02
 $C384 DEFB $08,$20,$02,$08,$20,$02,$00,$40
 $C38C DEFB $01,$3C,$80,$00,$DB,$00,$00,$3C
 $C394 DEFB $00,$00,$3C,$00,$00,$7E,$00,$18
 $C39C DEFB $7E,$18,$3C,$D5,$34,$27,$81,$E4
 $C3A4 DEFB $14,$56,$28,$08,$3C,$10,$00,$00
 $C3AC DEFB $00,$14,$00,$00,$08,$05,$0A,$04
 $C3B4 DEFB $02,$04,$04,$00,$04,$02,$3C,$04
 $C3BC DEFB $01,$DA,$08,$00,$3D,$10,$00,$3C
 $C3C4 DEFB $E0,$00,$7E,$00,$00,$7E,$00,$18
 $C3CC DEFB $FF,$18,$2D,$A5,$A4,$27,$4A,$E4
 $C3D4 DEFB $14,$7E,$28,$08,$00,$10,$00,$00
 $C3DC DEFB $00

; Sprite 26 - Dart
;
; #CALL:print_graphic(#PC,4,Sprite_26)
b$C3DD DEFB $0E,$78,$8F,$7C,$9F,$7E,$BF,$7E
 $C3E5 DEFB $BF,$7E,$BF,$7C,$9F,$38,$9E,$38
 $C3ED DEFB $AE,$10,$B4,$14,$B4,$0B,$78,$0B
 $C3F5 DEFB $F8,$00,$00,$17,$FC,$17,$FC,$17
 $C3FD DEFB $FC,$17,$FC,$0B,$F8,$0B,$F8,$06
 $C405 DEFB $F0,$01,$C0,$00,$80,$00,$80,$00
 $C40D DEFB $80,$16,$38,$16,$38,$17,$78,$17
 $C415 DEFB $78,$17,$78,$17,$78,$0A,$30,$0A
 $C41D DEFB $B0,$02,$D0,$00,$D0,$09,$E8,$0B
 $C425 DEFB $F8,$00,$00,$17,$FC,$17,$FC,$17
 $C42D DEFB $FC,$17,$FC,$0B,$F8,$0B,$F8,$06
 $C435 DEFB $F0,$01,$C0,$00,$80,$00,$80,$00
 $C43D DEFB $80

; Sprite 23 - Devil face
;
; #CALL:print_graphic(#PC,2,Sprite_23)
b$C43E DEFB $0E,$08,$10,$10,$08,$08,$10,$10
 $C446 DEFB $08,$2C,$34,$10,$08,$2F,$F4,$1F
 $C44E DEFB $F8,$13,$C8,$5D,$BA,$6F,$F6,$9D
 $C456 DEFB $B9,$4F,$F2,$5F,$FA,$2F,$F4,$0E
 $C45E DEFB $70,$0F,$F0,$07,$E0,$05,$60,$04
 $C466 DEFB $20,$04,$20,$06,$A0,$07,$E0,$03
 $C46E DEFB $C0,$08,$10,$10,$08,$08,$10,$10
 $C476 DEFB $08,$2C,$34,$10,$08,$2F,$F4,$1B
 $C47E DEFB $D8,$1B,$D8,$5D,$BA,$6F,$F6,$9D
 $C486 DEFB $B9,$4F,$F2,$5F,$FA,$2F,$F4,$0E
 $C48E DEFB $70,$0F,$F0,$07,$E0,$07,$E0,$05
 $C496 DEFB $60,$06,$A0,$07,$E0,$07,$E0,$03
 $C49E DEFB $C0

; Sprite 27 - Mermaid
;
; #CALL:print_graphic(#PC,2,Sprite_27)
b$C49F DEFB $0E,$0A,$80,$15,$40,$28,$20,$13
 $C4A7 DEFB $D0,$2A,$A0,$57,$D0,$2B,$C0,$55
 $C4AF DEFB $80,$AB,$00,$55,$80,$AB,$00,$53
 $C4B7 DEFB $00,$07,$81,$1F,$C5,$3D,$A2,$35
 $C4BF DEFB $BC,$2B,$40,$6F,$81,$67,$86,$42
 $C4C7 DEFB $8C,$41,$54,$A2,$AE,$81,$53,$00
 $C4CF DEFB $80,$0A,$80,$15,$40,$28,$20,$13
 $C4D7 DEFB $D0,$2A,$A0,$57,$D0,$2B,$C0,$55
 $C4DF DEFB $80,$AB,$00,$55,$80,$AB,$00,$53
 $C4E7 DEFB $00,$07,$82,$1F,$CA,$3D,$A4,$35
 $C4EF DEFB $B8,$2B,$40,$6F,$84,$67,$88,$22
 $C4F7 DEFB $88,$31,$5D,$2A,$AE,$21,$50,$00
 $C4FF DEFB $80

; Sprite 29 - Alien scanner
;
; #CALL:print_graphic(#PC,4,Sprite_29)
b$C500 DEFB $09,$00,$00,$99,$6E,$99,$99,$6E
 $C508 DEFB $18,$00,$3C,$18,$7E,$3C,$D9,$47
 $C510 DEFB $64,$00,$5A,$2C,$5A,$5A,$2C,$18
 $C518 DEFB $18,$00,$3C,$18,$7E,$18,$26,$E2
 $C520 DEFB $83,$24,$18,$34,$34,$18,$18,$18
 $C528 DEFB $18,$00,$3C,$18,$7E,$3C,$D9,$47
 $C530 DEFB $64,$00,$5A,$3C,$5A,$5A,$3C,$18
 $C538 DEFB $18,$00,$3C,$18,$7E,$18,$26,$E2
 $C540 DEFB $83

; Sprite 3B - Winged devil
;
; #CALL:print_graphic(#PC,2,Sprite_3B)
b$C541 DEFB $0F,$00,$81,$00,$00,$42,$00,$38
 $C549 DEFB $BD,$1C,$7C,$99,$3E,$72,$42,$4E
 $C551 DEFB $E9,$3C,$97,$FE,$A5,$7F,$FF,$99
 $C559 DEFB $FF,$FF,$C3,$FF,$FE,$E7,$7F,$FE
 $C561 DEFB $FF,$7F,$7E,$7E,$7E,$7E,$7E,$7E
 $C569 DEFB $7C,$7E,$3E,$3C,$3C,$3C,$3C,$3C
 $C571 DEFB $3C,$3C,$18,$3C,$1C,$24,$38,$18
 $C579 DEFB $66,$18,$18,$82,$18,$09,$41,$10
 $C581 DEFB $09,$22,$90,$02,$22,$40,$00,$04
 $C589 DEFB $40,$00,$00,$00,$00,$42,$00,$18
 $C591 DEFB $42,$18,$3C,$BD,$3C,$32,$99,$4C
 $C599 DEFB $69,$42,$96,$7E,$3C,$7E,$7F,$A5
 $C5A1 DEFB $FE,$7F,$99,$FE,$7E,$C3,$7E,$7E
 $C5A9 DEFB $E7,$7E,$3E,$7E,$7C,$3E,$7E,$7C
 $C5B1 DEFB $3C,$7E,$3C,$1C,$3C,$38,$1C,$3C
 $C5B9 DEFB $38,$1C,$18,$38,$0C,$24,$30,$08
 $C5C1 DEFB $66,$10,$08,$41,$10,$08,$82,$90
 $C5C9 DEFB $09,$44,$90,$02,$44,$40,$02,$20
 $C5D1 DEFB $00

; Sprite 3C - Big alien scanner
;
; #CALL:print_graphic(#PC,4,Sprite_3C)
b$C5D2 DEFB $0B,$00,$C3,$86,$01,$3B,$79,$00
 $C5DA DEFB $C3,$86,$00,$00,$00,$00,$03,$80
 $C5E2 DEFB $00,$03,$80,$00,$03,$80,$00,$03
 $C5EA DEFB $7C,$00,$FB,$8C,$00,$C3,$80,$00
 $C5F2 DEFB $03,$8C,$00,$C3,$96,$01,$63,$80
 $C5FA DEFB $00,$01,$2F,$02,$F1,$2F,$02,$F0
 $C602 DEFB $00,$00,$37,$60,$00,$46,$90,$00
 $C60A DEFB $37,$60,$00,$00,$00,$00,$07,$00
 $C612 DEFB $00,$07,$00,$00,$07,$00,$00,$06
 $C61A DEFB $FC,$03,$F7,$04,$03,$07,$00,$00
 $C622 DEFB $07,$0C,$03,$07,$16,$05,$82,$00
 $C62A DEFB $00,$02,$2F,$0B,$C2,$2F,$0B,$C0
 $C632 DEFB $00,$00,$00,$00,$00,$0E,$00,$00
 $C63A DEFB $0E,$00,$00,$0E,$00,$00,$00,$00
 $C642 DEFB $00,$0E,$00,$00,$0E,$00,$00,$0E
 $C64A DEFB $00,$0F,$ED,$FC,$0C,$0E,$0C,$00
 $C652 DEFB $0E,$00,$16,$0E,$0C,$00,$0E,$16
 $C65A DEFB $2F,$0E,$00,$2F,$04,$2F,$00,$04
 $C662 DEFB $2F,$00,$00,$00,$00,$DD,$80,$01
 $C66A DEFB $2C,$40,$00,$DD,$80,$00,$00,$00
 $C672 DEFB $00,$1C,$00,$00,$1C,$00,$00,$1C
 $C67A DEFB $00,$0F,$DB,$F0,$0C,$1C,$30,$00
 $C682 DEFB $1C,$00,$16,$1C,$30,$00,$1C,$58
 $C68A DEFB $2F,$1C,$00,$2F,$08,$BC,$00,$08
 $C692 DEFB $BC

; Sprite 28 - Doll
;
; #CALL:print_graphic(#PC,2,Sprite_28)
b$C693 DEFB $0A,$05,$50,$2A,$A8,$15,$54,$28
 $C69B DEFB $08,$57,$E4,$25,$AA,$13,$C4,$2A
 $C6A3 DEFB $4A,$01,$80,$02,$40,$07,$E4,$5F
 $C6AB DEFB $FA,$23,$C0,$02,$40,$03,$30,$06
 $C6B3 DEFB $60,$0A,$A8,$55,$54,$2A,$A8,$50
 $C6BB DEFB $04,$27,$EA,$55,$A4,$23,$CA,$12
 $C6C3 DEFB $54,$02,$40,$01,$80,$26,$60,$5F
 $C6CB DEFB $FA,$03,$C4,$02,$40,$0C,$C0,$06
 $C6D3 DEFB $60

; Sprite 2A - Insect face
;
; #CALL:print_graphic(#PC,2,Sprite_2A)
b$C6D4 DEFB $0E,$00,$00,$00,$00,$00,$06,$60
 $C6DC DEFB $09,$90,$10,$08,$10,$08,$10,$04
 $C6E4 DEFB $20,$04,$20,$05,$A0,$21,$84,$53
 $C6EC DEFB $CA,$A7,$E5,$57,$EA,$A7,$E5,$52
 $C6F4 DEFB $4A,$A0,$05,$51,$8A,$22,$44,$04
 $C6FC DEFB $20,$02,$40,$01,$80,$00,$00,$00
 $C704 DEFB $00,$00,$00,$00,$00,$60,$00,$90
 $C70C DEFB $06,$08,$09,$08,$10,$08,$10,$04
 $C714 DEFB $20,$04,$20,$05,$A0,$01,$80,$23
 $C71C DEFB $C4,$57,$EA,$A7,$E5,$57,$EA,$A2
 $C724 DEFB $45,$50,$0A,$21,$84,$02,$40,$04
 $C72C DEFB $20,$03,$C0,$00,$00,$00,$00,$00
 $C734 DEFB $00

; Sprite 2C - Donna
;
; #CALL:print_graphic(#PC,4,Sprite_2C)
b$C735 DEFB $0D,$2A,$55,$AA,$55,$AE,$5A,$2F
 $C73D DEFB $56,$2E,$48,$A0,$5C,$98,$1C,$36
 $C745 DEFB $73,$78,$38,$00,$28,$48,$00,$86
 $C74D DEFB $C4,$2A,$55,$AA,$55,$AE,$5A,$2F
 $C755 DEFB $56,$2E,$48,$A0,$5C,$98,$1C,$34
 $C75D DEFB $76,$78,$38,$00,$10,$10,$00,$10
 $C765 DEFB $18,$2A,$55,$AA,$55,$AE,$5A,$2F
 $C76D DEFB $56,$2E,$48,$A0,$5C,$98,$1C,$36
 $C775 DEFB $73,$78,$78,$00,$50,$48,$00,$46
 $C77D DEFB $64,$00,$2A,$55,$AA,$55,$AE,$5A
 $C785 DEFB $2F,$56,$2E,$40,$AC,$58,$9C,$34
 $C78D DEFB $76,$78,$38,$00,$10,$10,$00,$10
 $C795 DEFB $18

; Sprite 32 - Engine shaft
;
; #CALL:print_graphic(#PC,2,Sprite_32)
b$C796 DEFB $0B,$00,$E0,$00,$00,$E0,$00,$00
 $C79E DEFB $00,$00,$00,$47,$00,$08,$47,$10
 $C7A6 DEFB $2A,$40,$54,$2A,$02,$54,$2A,$F8
 $C7AE DEFB $54,$2A,$3F,$54,$2A,$40,$54,$2A
 $C7B6 DEFB $42,$54,$08,$45,$10,$00,$47,$00
 $C7BE DEFB $00,$00,$00,$00,$E0,$00,$00,$E0
 $C7C6 DEFB $00,$00,$07,$00,$00,$07,$00,$00
 $C7CE DEFB $00,$00,$00,$E2,$00,$20,$E2,$04
 $C7D6 DEFB $A8,$02,$15,$A8,$40,$15,$AB,$1F
 $C7DE DEFB $D5,$AB,$FC,$D5,$A8,$02,$15,$A8
 $C7E6 DEFB $42,$15,$20,$A2,$04,$00,$E2,$00
 $C7EE DEFB $00,$00,$00,$00,$07,$00,$00,$07

; Unused
s$C7F6 DEFS $0A

; Main entry point
c$C800 DI            ; Disable interrupts.
 $C801 LD SP,$FFFF   ; Put the stack somewhere safe.
; This entry point is used by the routines at #R$CDD3 and #R$E62F.
*$C804 CALL $CA5B    ; Display the intro screen and wait for a game to start.
 $C807 CALL $C881    ; Start the game.
; Main loop starts here
*$C80A CALL $D9EC    ; Update the raft.
 $C80D CALL $E592    ; Move all objects in the room.
 $C810 CALL $E93F    ; Toggle the colours on test tubes and dynamite.
 $C813 CALL $CFD9    ; Update Dan and check for movement.
 $C816 CALL $EF7C    ; Draw any glowing objects.
 $C819 CALL $CC89    ; Move the lift.
 $C81C CALL $C92A    ; Update the main status area.
 $C81F CALL $DA8D    ; Play any sound effects.
 $C822 CALL $CC5F    ; Animate the river.
 $C825 CALL $E5E8    ; Launch the blimp if Dan is in it with the plans.
 $C828 CALL $E663    ; Update any teleporters.
 $C82B CALL $E6DC    ; Update any lasers in the room.
 $C82E CALL $CEAD    ; Perform any special actions in the room.
 $C831 CALL $DE52    ; Update aerosol immunity.
 $C834 LD BC,$0400   ; { Pause for a time so the game has the right speed.
 $C837 CALL $D4AF    ; }
; Pause the game if "P" was pressed
 $C83A LD A,$DF      ;
 $C83C IN A,($FE)    ;
 $C83E RRA           ;
 $C83F JR C,$C858    ;
*$C841 XOR A         ;
 $C842 IN A,($FE)    ;
 $C844 CPL           ;
 $C845 AND $1F       ;
 $C847 JR NZ,$C841   ;
*$C849 LD A,$DF      ;
 $C84B IN A,($FE)    ;
 $C84D RRA           ;
 $C84E JR C,$C849    ;
*$C850 XOR A         ;
 $C851 IN A,($FE)    ;
 $C853 CPL           ;
 $C854 AND $1F       ;
 $C856 JR NZ,$C850   ;
; Abort the game if "Q" was pressed
*$C858 LD A,$FB      ; { Get 'Q' - 'T' keys.
 $C85A IN A,($FE)    ; }
 $C85C RRA           ; { Jump to the beginning of the routine
 $C85D JR C,$C80A    ; if 'Q' was pressed. }
 $C85F LD HL,$C87F   ; { Set the laser to fire.
 $C862 SET 7,(HL)    ; }
 $C864 JR $C804      ; Run the main loop again.

; Current score
g$C866 DEFB $00,$00,$00,$00,$FF

; Amount pending to add onto the current score
g$C86B DEFB $00

; Number of lives
g$C86C DEFB $0A

; Current energy (0-8)
g$C86D DEFB $01

; Current energy (duplicate?)
g$C86E DEFB $03

; Number of frames until one energy bar lost
g$C86F DEFB $C8

; Number of frames until it's time to increment the score
g$C870 DEFB $84,$03

; Dan's Y co-ordinate
g$C872 DEFB $16

; Dan's X co-ordinate
g$C873 DEFB $10

; Various flags
;
; If bit 0 is set, Dan is jumping
; .
; If bit 5 is set, Dan is safe; if reset, he has touched a moving object and
; will lose a life
; .
; If bit 7 is set, Dan is above water; if reset, he has fallen in the river
g$C874 DEFB $22

; Current animation frame
;
; 0-3 = left, 4-7 = right
g$C875 DEFB $00

; Height (in lines) fallen by
g$C876 DEFB $00

; Height for the next jump
;
; This is normally $0B, but can be increased when on a trampoline
g$C877 DEFB $0B

; Number of dynamite sticks collected
g$C878 DEFB $00

; Height when landing on a trampoline without jumping
g$C879 DEFB $00

; Lift flags
g$C87A DEFB $64

; Lift flags
;
; If bit 2 is set, Dan is standing on the lift
g$C87B DEFB $01

; Current lift y co-ordinate
g$C87C DEFB $40

; Room the lift is in
g$C87D DEFB $2D

; Various flags
;
; If bit 0 is set, the safe is still locked
; .
; If bit 1 is set, Dan has got the plans
; .
; If bit 5 if set, Dan has got an aerosol and has brief immunity
; .
; If bit 6 is set, Dan has got an oxygen tank and can survive drowning
; .
; If bit 7 is reset, Dan has got the plans and is in the blimp
g$C87E DEFB $00

; Set bit 7 if a laser is firing
g$C87F DEFB $00

; Frames left in the "touched moving object" sequence
g$C880 DEFB $00

; Start the game
;
; Used by the routine at #R$C800.
c$C881 CALL $E801    ; Clear the screen.
 $C884 LD HL,$69EA   ; Get the flags (offset 4) for the first room.
 $C887 LD DE,$000C   ; Increment by #N$0C bytes per room.
 $C88A LD B,$30      ; Number of rooms to set up.
*$C88C SET 3,(HL)    ; Set bit 3 for this room
 $C88E ADD HL,DE     ; Move to the next room.
 $C88F DJNZ $C88C    ; Loop until all rooms are done.
 $C891 CALL $EF1E    ; { Make all moving objects visible.
 $C894 CALL $F345    ; }
 $C897 LD HL,$C866   ;
 $C89A LD DE,$C925   ;
 $C89D LD B,$04      ;
*$C89F LD A,(DE)     ;
 $C8A0 CP (HL)       ;
 $C8A1 JR C,$C8AB    ;
 $C8A3 JR NZ,$C8B6   ;
 $C8A5 INC DE        ;
 $C8A6 INC HL        ;
 $C8A7 DJNZ $C89F    ;
 $C8A9 JR $C8B6      ;
*$C8AB LD HL,$C866   ;
 $C8AE LD DE,$C925   ;
 $C8B1 LD BC,$0004   ;
 $C8B4 LDIR          ;
*$C8B6 CALL $D378    ;
 $C8B9 LD HL,$CE56   ;
 $C8BC LD (HL),$00   ;
 $C8BE DEC HL        ;
 $C8BF LD (HL),$27   ;
 $C8C1 LD HL,$C8D2   ;
 $C8C4 LD DE,$C866   ;
 $C8C7 LD BC,$001B   ;
 $C8CA LDIR          ;
 $C8CC LD A,$2B      ;
 $C8CE CALL $CBBD    ;
 $C8D1 RET           ;

; Default values for game status buffers
b$C8D2 DEFB $00,$00,$00,$00,$FF,$00,$0A,$01
 $C8DA DEFB $03,$C8,$84,$03,$16,$10,$22,$00
 $C8E2 DEFB $00,$0B,$00,$00,$64,$01,$40,$2D
 $C8EA DEFB $00,$00,$00

; Attributes for energy bar
b$C8ED DEFB $47,$46,$43,$07,$06,$02,$05,$04

; Attributes for lives
b$C8F5 DEFB $45,$04,$07,$02,$43,$02,$03,$06
 $C8FD DEFB $05,$44

; Put Dan in the correct place when entering a room
;
; Used by the routine at #R$CBBD.
c$C8FF LD DE,($C872) ;
 $C903 LD HL,$62D6   ;
 $C906 LD A,$0E      ;
*$C908 EX AF,AF'     ;
 $C909 PUSH DE       ;
 $C90A CALL $E8D2    ;
 $C90D LD C,$02      ;
*$C90F PUSH DE       ;
 $C910 LD B,$03      ;
*$C912 LD A,(DE)     ;
 $C913 LD (HL),A     ;
 $C914 INC HL        ;
 $C915 INC E         ;
 $C916 DJNZ $C912    ;
 $C918 POP DE        ;
 $C919 INC D         ;
 $C91A DEC C         ;
 $C91B JR NZ,$C90F   ;
 $C91D POP DE        ;
 $C91E INC E         ;
 $C91F INC E         ;
 $C920 EX AF,AF'     ;
 $C921 DEC A         ;
 $C922 JR NZ,$C908   ;
 $C924 RET           ;

; Current high score
g$C925 DEFB $00,$00,$00,$00,$FF

; Update the main status area
;
; Used by the routines at #R$C800 and #R$CDD3.
c$C92A LD HL,($C870) ;
 $C92D DEC HL        ;
 $C92E LD A,L        ;
 $C92F OR H          ;
 $C930 JR NZ,$C939   ;
 $C932 LD HL,$C86B   ;
 $C935 INC (HL)      ;
 $C936 LD HL,$0384   ;
*$C939 LD ($C870),HL ;
 $C93C LD HL,$C86F   ;
 $C93F DEC (HL)      ;
 $C940 JR Z,$C95D    ;
 $C942 LD A,($C86D)  ;
 $C945 CP $01        ;
 $C947 JR NZ,$C956   ;
 $C949 LD A,(HL)     ;
 $C94A AND $07       ;
 $C94C JR NZ,$C956   ;
 $C94E LD A,$2E      ;
 $C950 CALL $DB01    ;
 $C953 XOR A         ;
 $C954 JR $C958      ;
*$C956 LD A,$07      ;
*$C958 LD ($C8ED),A  ;
 $C95B JR $C967      ;
*$C95D LD (HL),$C8   ;
 $C95F XOR A         ;
 $C960 CALL $DB01    ;
 $C963 LD HL,$C86D   ;
 $C966 DEC (HL)      ;
*$C967 LD HL,$C86E   ;
 $C96A DEC (HL)      ;
 $C96B JR NZ,$C997   ;
 $C96D LD (HL),$03   ;
 $C96F LD HL,$C86B   ;
 $C972 LD A,(HL)     ;
 $C973 AND A         ;
 $C974 JR Z,$C997    ;
 $C976 DEC (HL)      ;
 $C977 LD A,($C87E)  ;
 $C97A BIT 5,A       ;
 $C97C JR NZ,$C984   ;
 $C97E LD HL,$DAC8   ;
 $C981 LD ($DA8B),HL ;
; Increase the score by 1
*$C984 LD HL,$C869   ;
 $C987 LD B,$04      ;
*$C989 LD A,(HL)     ;
 $C98A CP $09        ;
 $C98C JR NZ,$C995   ;
 $C98E XOR A         ;
 $C98F LD (HL),A     ;
 $C990 DEC HL        ;
 $C991 DJNZ $C989    ;
 $C993 JR $C997      ;
*$C995 INC A         ;
 $C996 LD (HL),A     ;
*$C997 LD HL,$5AA0   ;
 $C99A LD DE,$C8ED   ;
 $C99D LD A,($C86D)  ;
 $C9A0 LD B,A        ;
 $C9A1 LD C,A        ;
 $C9A2 AND A         ;
 $C9A3 JR NZ,$C9B3   ;
 $C9A5 LD A,($C874)  ;
 $C9A8 BIT 5,A       ;
 $C9AA JR NZ,$C9C5   ;
 $C9AC LD (HL),$00   ;
 $C9AE CALL $CD8A    ;
 $C9B1 JR $C9C5      ;
*$C9B3 LD A,(DE)     ;
 $C9B4 LD (HL),A     ;
 $C9B5 INC L         ;
 $C9B6 INC DE        ;
 $C9B7 DJNZ $C9B3    ;
 $C9B9 LD A,$08      ;
 $C9BB SUB C         ;
 $C9BC AND A         ;
 $C9BD JR Z,$C9C5    ;
 $C9BF LD B,A        ;
 $C9C0 XOR A         ;
*$C9C1 LD (HL),A     ;
 $C9C2 INC L         ;
 $C9C3 DJNZ $C9C1    ;
*$C9C5 LD HL,$C866   ;
 $C9C8 LD DE,$51B0   ;
 $C9CB CALL $EEF9    ;
 $C9CE LD A,($5AE7)  ;
 $C9D1 LD C,A        ;
 $C9D2 LD HL,$5AE0   ;
 $C9D5 LD B,$08      ;
*$C9D7 LD A,(HL)     ;
 $C9D8 LD (HL),C     ;
 $C9D9 INC L         ;
 $C9DA LD C,A        ;
 $C9DB DJNZ $C9D7    ;
 $C9DD LD BC,$0502   ;
 $C9E0 LD HL,$5A96   ;
 $C9E3 LD DE,$C8F5   ;
 $C9E6 LD A,($C86C)  ;
 $C9E9 CP $1A        ;
 $C9EB JP NC,$0000   ;
 $C9EE CP $0B        ;
 $C9F0 JR C,$C9F4    ;
 $C9F2 LD A,$0A      ;
*$C9F4 EX AF,AF'     ;
*$C9F5 EX AF,AF'     ;
 $C9F6 AND A         ;
 $C9F7 JR Z,$C9FC    ;
 $C9F9 DEC A         ;
 $C9FA JR $C9FF      ;
*$C9FC LD DE,$3D00   ;
*$C9FF EX AF,AF'     ;
 $CA00 PUSH BC       ;
 $CA01 PUSH HL       ;
 $CA02 LD A,(DE)     ;
 $CA03 LD (HL),A     ;
 $CA04 INC L         ;
 $CA05 LD (HL),A     ;
 $CA06 DEC L         ;
 $CA07 LD BC,$0020   ;
 $CA0A ADD HL,BC     ;
 $CA0B LD (HL),A     ;
 $CA0C INC L         ;
 $CA0D LD (HL),A     ;
 $CA0E POP HL        ;
 $CA0F INC L         ;
 $CA10 INC L         ;
 $CA11 INC DE        ;
 $CA12 POP BC        ;
 $CA13 DJNZ $C9F5    ;
 $CA15 DEC C         ;
 $CA16 RET Z         ;
 $CA17 LD HL,$5AD6   ;
 $CA1A LD B,$05      ;
 $CA1C JR $C9F5      ;

; "Good luck!"
;
; #CALL:print_string(#PC,goodluck)
b$CA1E DEFB $12,$0B,$10,$00,$00,$0D,$27,$15
 $CA26 DEFB $1D,$0C,$14,$28,$FF

; Attributes for intro screen
b$CA2B DEFB $03,$07,$02,$05,$06,$03,$04,$07
 $CA33 DEFB $02,$01,$05,$02,$07,$03,$04,$02
 $CA3B DEFB $06,$05

; Moving object data for intro screen
;
; Used by the routine at #R$CA5B
b$CA3D DEFB $15,$2C,$2C,$2C,$11,$00

; Movement table for objects in intro screen
b$CA43 DEFB $0A,$06,$05,$0D,$02,$43,$01,$02
 $CA4B DEFB $0A,$19,$05,$0D,$81,$46,$01,$02

; Laser movement for the intro screen
b$CA53 DEFB $00,$46,$5A,$14

; Pointer to the current tune block being played
g$CA57 DEFW $EA05

; Number of blocks in the tune currently being played
g$CA59 DEFB $12

; Currently selected row that should flash
g$CA5A DEFB $07

; Display the intro screen and wait for the game to start
;
; Used by the routines at #R$C800 and #R$DCF6.
c$CA5B CALL $E801    ; Clear the screen.
 $CA5E LD HL,$EFBC   ; { Print the intro screen UDGS. (#R$EFBC)
 $CA61 CALL $ED06    ; }
 $CA64 LD HL,$EC26   ; { Print the intro text. (#R$EC26)
 $CA67 CALL $EEF1    ; }
 $CA6A LD DE,$0A07   ; Start at location #N$0A , #N07.
 $CA6D LD A,$02      ; Start by drawing red on black.
*$CA6F PUSH DE       ; { Store #REGde and #REGaf.
 $CA70 PUSH AF       ; }
 $CA71 LD BC,$0E01   ; { Fill #N0E columns and 1 row with this attribute.
 $CA74 CALL $E8BA    ; }
 $CA77 POP AF        ; { Restore #REGaf and #REGde. 
 $CA78 POP DE        ; }
 $CA79 INC E         ; { Move forward two columns.
 $CA7A INC E         ; }
 $CA7B INC A         ; Move to the next ink colour?
 $CA7C CP $07        ; Have we reached white yet?
 $CA7E JR NZ,$CA6F   ; No, so loop back and colour some more.
 $CA80 LD BC,$0012   ; { Copy the intro screen's attributes.
 $CA83 LD DE,$5867   ;
 $CA86 LD HL,$CA2B   ;
 $CA89 LDIR          ; }
 $CA8B LD HL,$DA8A   ; { Switch to playing a tune.
 $CA8E LD (HL),$00   ; }
 $CA90 LD IY,$CA3D   ; Point #REGiy at the moving object data for the intro screen.
 $CA94 CALL $E54D    ; Display moving objects, directly.
 $CA97 LD HL,$E6D9   ; { Set the laser tick count (#R$E6D9) to #N$7F (fire next loop).
 $CA9A LD (HL),$7F   ; }
 $CA9C INC HL        ; { Default to drawing the last bolt in black.
 $CA9D LD (HL),$00   ; }
 $CA9F LD HL,$EA05   ; Point #REGhl at the theme tune. (#R$EA05)
 $CAA2 LD ($CA57),HL ; Store it as the current one. (#R$CA57).
 $CAA5 LD A,$12      ; { Set #N$12 blocks in the tune.
 $CAA7 LD ($CA59),A  ; }
; Loop round the theme tune blocks and play them.
*$CAAA LD HL,($CA57) ; Get the current theme tune block.
 $CAAD LD A,(HL)     ; { Load the pointer to the tune block into #REGhl.
 $CAAE INC HL        ;
 $CAAF LD H,(HL)     ;
 $CAB0 LD L,A        ; }
 $CAB1 CALL $DB0B    ; Play the tune.
*$CAB4 LD A,$FD      ; { Scan for 'A' - 'G' on the keyboard.
 $CAB6 IN A,($FE)    ; }
 $CAB8 BIT 2,A       ; { Was 'D' pressed?}
 $CABA JP Z,$DB63    ; If so, move forward to define the keys.
; Move the sprites on screen.
 $CABD LD IY,$CA43   ; Point #REGiy at the moving object data for the intro screen.
 $CAC1 CALL $E59F    ; Move the objects.
 $CAC4 CALL $EDA2    ; Rotate the colours on the main message.
 $CAC7 CALL $DA8D    ; Play a note of the tune.
 $CACA CALL $DAFA    ; Pause for one second.
 $CACD LD HL,($DA88) ; { Have we reached the end of the tune block?
 $CAD0 LD A,(HL)     ;
 $CAD1 CP $FF        ; }
 $CAD3 JR NZ,$CAEE   ; Jump forward if not.
; Reached the end of this tune block, move to the next one.
 $CAD5 LD HL,($CA57) ; { Move onto the next tune block. (#R$CA57)
 $CAD8 INC HL        ;
 $CAD9 INC HL        ; }
 $CADA LD A,($CA59)  ; { Decrement the number of blocks left to play.
 $CADD DEC A         ; }
 $CADE AND A         ; Are there no blocks left?
 $CADF JR NZ,$CAE6   ; If there are, then jump forward.
; Reached the end of all tune blocks, start the tune from the beginning.
 $CAE1 LD A,$12      ; #N$12 blocks left to play.
 $CAE3 LD HL,$EA05   ; { Point back to the first block.
*$CAE6 LD ($CA57),HL ; }
 $CAE9 LD ($CA59),A  ; Set the number of blocks.
 $CAEC JR $CAAA      ; Loop back to play more of the theme tune.
; Flash the selected row on the title screen.
*$CAEE LD A,($CA5A)  ; { Put the current row in #REGe.
 $CAF1 LD E,A        ; }
 $CAF2 LD D,$0A      ; Always starting at column #N0A.
 $CAF4 CALL $E8E3    ; { Get the attribute at this location
 $CAF7 EX DE,HL      ; and put it in #REGhl. }
 $CAF8 LD B,$0A      ; Loop for #N$0A columns.
*$CAFA SET 7,(HL)    ; Set the flash bit.
 $CAFC INC L         ; Move to the next column.
 $CAFD DJNZ $CAFA    ; Loop while there are more columns.
; Detect Sinclair joystick.
 $CAFF LD A,$FD      ; { Scan for 'A' - 'G' on the keyboard.
 $CB01 IN A,($FE)    ; }
 $CB03 AND $02       ; Was 'D' pressed?
 $CB05 JR NZ,$CB1E   ; Move forward if not.
 $CB07 LD A,($CA5A)  ; Get the currently selected row to flash.
 $CB0A CP $0B        ; Is it #N0B?
 $CB0C JR Z,$CAB4    ; Jump back if is.
 $CB0E CALL $CB8D    ; Otherwise change the option.
 $CB11 LD HL,$E9DB   ; { Change input to Sinclair joystick.
 $CB14 LD ($E9BA),HL ; }
 $CB17 LD A,$0B      ; { Set #N0B as the row to flash.
*$CB19 LD ($CA5A),A  ; }
 $CB1C JR $CAB4      ; Jump back.
; Detect keyboard
*$CB1E LD A,$BF      ; { Scan for 'ENTER' - 'H' on the keyboard.
 $CB20 IN A,($FE)    ; }
 $CB22 LD B,A        ; Remember this in #REGb.
 $CB23 AND $04       ; Was 'K' pressed?
 $CB25 JR NZ,$CB3B   ; Jump forward if not.
 $CB27 LD A,($CA5A)  ; Get the currently selected row to flash.
 $CB2A CP $07        ; Is it 07?
 $CB2C JR Z,$CAB4    ; Jump back if it is.
 $CB2E CALL $CB8D    ; Otherwise change the option.
 $CB31 LD HL,$F271   ; { Change input to keyboard.
 $CB34 LD ($E9BA),HL ; }
 $CB37 LD A,$07      ; { Set 07 as the row to flash and jump back.
 $CB39 JR $CB19      ; }
; Detect Kempston joystick
*$CB3B LD A,B        ; Get the keys pressed earlier.
 $CB3C AND $08       ; Was 'J' pressed?
 $CB3E JR NZ,$CB55   ; Jump forward if not.
 $CB40 LD A,($CA5A)  ; Get the currently selected row to flash.
 $CB43 CP $09        ; Is it 09?
 $CB45 JP Z,$CAB4    ; Jump back if it is.
 $CB48 CALL $CB8D    ; Otherwise change the option.
 $CB4B LD HL,$E9C0   ; { Change input to Kempston joystick.
 $CB4E LD ($E9BA),HL ; }
 $CB51 LD A,$09      ; { Set 09 as the row to flash and jump back.
 $CB53 JR $CB19      ; }
; No change in input routine, check for another option.
*$CB55 LD A,$DF      ; { Scan 'P' - 'Y' on the keyboard.
 $CB57 IN A,($FE)    ; }
 $CB59 BIT 2,A       ; Was 'I' pressed?
 $CB5B JP Z,$DCF6    ; If so, display the instructions.
 $CB5E CALL $CB9C    ; Check if ENTER or FIRE was pressed.
 $CB61 JP NZ,$CAB4   ; Jump back if it it wasn't.
; ENTER or FIRE was pressed. Time to start the game.
 $CB64 LD HL,$DA8A   ; { Stop the tune playing (#R$DA8A).
 $CB67 RES 0,(HL)    ; }
*$CB69 LD IY,$CA53   ; Point #REGiy at the laser movement for the intro screen (#R$CA53)
 $CB6D CALL $E6F6    ; Update the laser.
 $CB70 CALL $DA8D    ; Play the laser sound effect.
 $CB73 CALL $DAFA    ; Pause for one second.
 $CB76 CALL $EDA2    ; Rotate the colours for the main message / laser.
 $CB79 LD IY,$CA43   ; Point #REGiy at the moving object data for the intro screen.
 $CB7D CALL $E59F    ; Move all objects.
 $CB80 LD A,($E6DA)  ; Is the current laser colour 0?
 $CB83 AND A         ; { If not, loop back to redraw it.
 $CB84 JR NZ,$CB69   ; }
 $CB86 LD HL,$CA1E   ; { Print "Good luck" (#R$CA1E) on screen and return.
 $CB89 CALL $DDE0    ;
 $CB8C RET           ; }

; Turn a flashing option on the intro screen off
;
; Used by the routine at #R$CA5B.
;
; A The row to flash
c$CB8D LD E,A        ; Put the row to flash in #REGe.
 $CB8E LD D,$0A      ; The column is always #N$0A.
 $CB90 CALL $E8E3    ; { Convert this to an attribute address and put it in #REGhl.
 $CB93 EX DE,HL      ; }
 $CB94 LD B,$0A      ; Loop for #N$0A columns.
*$CB96 RES 7,(HL)    ; Switch the flash attribute off.
 $CB98 INC L         ; Move to the next column.
 $CB99 DJNZ $CB96    ; { Loop until all columns are done.
 $CB9B RET           ; }

; Set the zero flag if ENTER or the fire button was pressed
;
; Used by the routines at #R$CA5B and #R$DD8D.
c$CB9C LD A,($CA5A)  ; { Has Kempston been selected as the input method?
 $CB9F CP $09        ; }
 $CBA1 JR NZ,$CBAB   ; Jump forward if not.
; Test for FIRE on Kempston.
 $CBA3 IN A,($1F)    ; Read the Kempston joystick.
 $CBA5 CPL           ; Invert so successful reads have bits set.
 $CBA6 BIT 4,A       ; Was FIRE pressed?
 $CBA8 RET Z         ; Return if so.
 $CBA9 JR $CBB6      ; Otherwise jump forward.
; Test for FIRE on Sinclair.
*$CBAB CP $0B        ; Has Sinclair been selected as the input method?
 $CBAD JR NZ,$CBB6   ; Jump forward if not.
 $CBAF LD A,$EF      ; { Read '0' - '6' from the keyboard.
 $CBB1 IN A,($FE)    ;  }
 $CBB3 BIT 0,A       ; Was '0' pressed?
 $CBB5 RET Z         ; Return if so.
; Test for ENTER on Keyboard.
*$CBB6 LD A,$BF      ; { Read 'ENTER' - H' from the keyboard.
 $CBB8 IN A,($FE)    ; }
 $CBBA BIT 0,A       ; Was 'ENTER' pressed?
 $CBBC RET           ; Return with the zero flag also set if it was.

; Switch to a new room
;
; Used by the routines at #R$C881, #R$D3EC, #R$D4B5, #R$D567, #R$D607, #R$DBEE
; and #R$E663.
;
; A New room
c$CBBD LD ($CFCA),A   ; Get the current room. (#R$CFCA).
 $CBC0 ADD A,A        ; { Multiply it by 4 and put it in #REGhl.
 $CBC1 ADD A,A        ;
 $CBC2 LD L,A         ;
 $CBC3 LD H,$00       ; }
 $CBC5 LD C,L         ; { Copy #REGhl to #REGbc.
 $CBC6 LD B,H         ; }
 $CBC7 ADD HL,HL      ; { Multiply the address by 4 to get a suitable offset.
 $CBC8 ADD HL,BC      ; }
 $CBC9 LD DE,$69E6    ; { Add the base address for room offsets (#R$69E6)
 $CBCC ADD HL,DE      ; }
 $CBCD PUSH HL        ; { Put the pointer to the actual room in #REGix.
 $CBCE POP IX         ; }
 $CBD0 LD A,(IX+$04)  ; Get the flags for this room?
 $CBD3 AND $C0        ; Get bits 6-7 (wall information).
 $CBD5 RRCA           ; { Shift this three bits to the right to get a suitable
 $CBD6 RRCA           ; offset and put it in #REGbc.
 $CBD7 RRCA           ;
 $CBD8 LD C,A         ; }
 $CBD9 LD HL,$6C26    ; { Add the base address for wall data. (#R$6C26).
 $CBDC ADD HL,BC      ; }
 $CBDD LD BC,$0008    ; 8 bytes to copy.
 $CBE0 LD DE,$CFD1    ; { Copy to the working buffer. (#R$CFD1)
 $CBE3 LDIR           ; }
 $CBE5 EXX            ; { Store the shadow set of #REGhl, #REGde and #REGbc.
 $CBE6 PUSH HL        ;
 $CBE7 PUSH DE        ;
 $CBE8 PUSH BC        ;
 $CBE9 EXX            ; }
 $CBEA CALL $E820     ; Clear the screen.
 $CBED CALL $ED00     ; Print the room's UDGs.
 $CBF0 CALL $DCC1     ; Draw any food.
 $CBF3 CALL $CC36     ; Draw the river if it's here.
 $CBF6 CALL $E544     ; Display moving objects.
 $CBF9 CALL $CE76     ; Draw any additional objects if relevant.
 $CBFC LD A,($CFCA)   ; { Put the current room in #REGb.
 $CBFF LD B,A         ; }
 $CC00 CALL $F3EC     ; Draw any bank cards.
 $CC03 CALL $C8FF     ; Put Dan in the right place.
 $CC06 LD HL,$C87C    ; { Get the lift co-ordinate.
 $CC09 LD A,(HL)      ; }
 $CC0A CP $1C         ; { If it's greater than the maximum #N$1C,
 $CC0C JR NC,$CC10    ; then set it to that.
 $CC0E LD (HL),$1C    ; }
; Handle if the room has been visited, and if not, increment the running total.
*$CC10 BIT 7,(IX+$0B) ; Has the room been visited?
 $CC14 JR NZ,$CC30    ; Jump forward if it has.
 $CC16 SET 7,(IX+$0B) ; Set the "room visited" flag.
 $CC1A LD HL,$CE56    ; Set #REGhl to the relevant part of the "screens visited" message (#R$CE53).
 $CC1D LD A,(HL)      ; { Is the current digit 9?
 $CC1E CP $09         ; }
 $CC20 JR Z,$CC25     ; If so, need to accomodate decimal overflow.
 $CC22 INC (HL)       ; { Otherwise increment number of screens visited and move on.
 $CC23 JR $CC30       ; }
; Accomodate decimal overflow in the number of screens visited.
*$CC25 LD (HL),$00    ; Set the digit to 0.
 $CC27 DEC HL         ; Move to the previous digit (ie: more significant)
 $CC28 INC (HL)       ; Increment that.
 $CC29 LD A,(HL)      ; { Have we reached the maximum of #N$280?
 $CC2A CP $28         ; }
 $CC2C JR NZ,$CC30    ; Jump forward if we haven't.
 $CC2E LD (HL),$01    ; Otherwise something's gone wrong, either a bug or hacking, so set back to 1.
; All done with setting up the room.
*$CC30 EXX            ; { Restore the shadow registers and return.
 $CC31 POP BC         ;
 $CC32 POP DE         ;
 $CC33 POP HL         ;
 $CC34 EXX            ;
 $CC35 RET            ; }

; Draw the river
;
; Used by the routine at #R$CBBD.
c$CC36 LD A,($CFCA)  ;
 $CC39 CP $08        ;
 $CC3B RET NC        ;
 $CC3C LD HL,$6985   ;
 $CC3F LD DE,$5060   ;
 $CC42 LD C,$03      ;
*$CC44 PUSH DE       ;
 $CC45 LD B,$20      ;
*$CC47 LD A,(HL)     ;
 $CC48 LD (DE),A     ;
 $CC49 INC HL        ;
 $CC4A INC E         ;
 $CC4B DJNZ $CC47    ;
 $CC4D POP DE        ;
 $CC4E INC D         ;
 $CC4F DEC C         ;
 $CC50 JR NZ,$CC44   ;
 $CC52 LD DE,$5A60   ;
 $CC55 LD A,$4F      ;
 $CC57 LD B,$20      ;
*$CC59 LD (DE),A     ;
 $CC5A INC E         ;
 $CC5B DJNZ $CC59    ;
 $CC5D RET           ;

; Current animation frame for the river (1-3)
;
; Used by the routine at #R$CC5F
g$CC5E DEFB $03

; Animate the river
;
; Used by the routine at #R$C800.
c$CC5F LD A,($CFCA)  ;
 $CC62 CP $08        ;
 $CC64 RET NC        ;
 $CC65 LD HL,$CC5E   ;
 $CC68 DEC (HL)      ;
 $CC69 JR Z,$CC6C    ;
 $CC6B RET           ;
*$CC6C LD (HL),$03   ;
 $CC6E LD DE,$5060   ;
 $CC71 LD C,$03      ;
*$CC73 PUSH DE       ;
 $CC74 LD A,(DE)     ;
 $CC75 LD H,A        ;
 $CC76 INC E         ;
 $CC77 LD B,$1F      ;
*$CC79 LD A,(DE)     ;
 $CC7A DEC E         ;
 $CC7B LD (DE),A     ;
 $CC7C INC E         ;
 $CC7D INC E         ;
 $CC7E DJNZ $CC79    ;
 $CC80 DEC E         ;
 $CC81 LD A,H        ;
 $CC82 LD (DE),A     ;
 $CC83 POP DE        ;
 $CC84 INC D         ;
 $CC85 DEC C         ;
 $CC86 JR NZ,$CC73   ;
 $CC88 RET           ;

; Move the lift
;
; Used by the routine at #R$C800.
c$CC89 CALL $DC71    ;
 $CC8C LD BC,($C87A) ;
 $CC90 LD A,($CFCA)  ;
 $CC93 LD H,A        ;
 $CC94 LD DE,($C87C) ;
 $CC98 LD A,C        ;
 $CC99 AND A         ;
 $CC9A JR Z,$CCA8    ;
 $CC9C DEC C         ;
 $CC9D LD A,H        ;
 $CC9E CP D          ;
 $CC9F JP NZ,$CD1B   ;
*$CCA2 CALL $CD2B    ;
 $CCA5 JP $CD1B      ;
*$CCA8 BIT 1,B       ;
 $CCAA JR NZ,$CCA2   ;
 $CCAC BIT 0,B       ;
 $CCAE JR NZ,$CCE5   ;
 $CCB0 DEC E         ;
 $CCB1 DEC E         ;
 $CCB2 LD A,E        ;
 $CCB3 CP $FE        ;
 $CCB5 JR NZ,$CCC5   ;
 $CCB7 LD A,D        ;
 $CCB8 ADD A,$08     ;
 $CCBA LD D,A        ;
 $CCBB LD E,$9E      ;
 $CCBD SUB $08       ;
 $CCBF CP H          ;
 $CCC0 JR NZ,$CCC5   ;
 $CCC2 XOR A         ;
 $CCC3 JR $CCE0      ;
*$CCC5 CALL $D1B2    ;
 $CCC8 LD A,D        ;
 $CCC9 CP H          ;
 $CCCA JR Z,$CCD7    ;
 $CCCC SUB H         ;
 $CCCD JR C,$CD1B    ;
 $CCCF CP $10        ;
 $CCD1 JR C,$CD1B    ;
 $CCD3 SET 0,B       ;
 $CCD5 JR $CD1B      ;
*$CCD7 CALL $CD2B    ;
 $CCDA CALL $CD5C    ;
 $CCDD LD A,E        ;
 $CCDE INC A         ;
 $CCDF INC A         ;
*$CCE0 CALL $CD24    ;
 $CCE3 JR $CD1B      ;
*$CCE5 INC E         ;
 $CCE6 INC E         ;
 $CCE7 LD A,E        ;
 $CCE8 CP $A0        ;
 $CCEA JR NZ,$CCFD   ;
 $CCEC LD A,D        ;
 $CCED SUB $08       ;
 $CCEF LD D,A        ;
 $CCF0 LD E,$00      ;
 $CCF2 ADD A,$08     ;
 $CCF4 CP H          ;
 $CCF5 JR NZ,$CCFD   ;
 $CCF7 LD E,$1A      ;
 $CCF9 LD A,$9E      ;
 $CCFB JR $CD18      ;
*$CCFD CALL $D1B2    ;
 $CD00 LD A,H        ;
 $CD01 CP D          ;
 $CD02 JR Z,$CD0F    ;
 $CD04 SUB D         ;
 $CD05 JR C,$CD1B    ;
 $CD07 CP $10        ;
 $CD09 JR C,$CD1B    ;
 $CD0B RES 0,B       ;
 $CD0D JR $CD1B      ;
*$CD0F CALL $CD2B    ;
 $CD12 CALL $CD5C    ;
 $CD15 LD A,E        ;
 $CD16 DEC A         ;
 $CD17 DEC A         ;
*$CD18 CALL $CD24    ;
*$CD1B LD ($C87C),DE ;
 $CD1F LD ($C87A),BC ;
 $CD23 RET           ;

; Redraw the lift
;
; Used by the routines at #R$CC89 and #R$D16F.
;
; DE New lift position
c$CD24 EXX           ;
 $CD25 LD E,A        ;
 $CD26 LD HL,$CD7E   ;
 $CD29 JR $CD31      ;
; This entry point is used by the routines at #R$CC89 and #R$D16F.
*$CD2B LD A,E        ;
 $CD2C EXX           ;
 $CD2D LD E,A        ;
 $CD2E LD HL,$CD84   ; Point #REGhl to the lift graphic.
*$CD31 LD D,$0F      ;
 $CD33 LD C,$02      ; Draw 2 rows.
 $CD35 CALL $E8D2    ; Convert the co-ordinate to a screen address.
*$CD38 PUSH DE       ; Remember #REGde.
 $CD39 LD B,$03      ; Draw 3 columns.
*$CD3B LD A,(HL)     ; Get the graphic data.
 $CD3C LD (DE),A     ; Put it on screen.
 $CD3D INC HL        ; Move to the next graphic data.
 $CD3E INC E         ; Move forward a column.
 $CD3F DJNZ $CD3B    ; Loop if there are more columns on this row to draw.
 $CD41 POP DE        ; Restore #REGde.
 $CD42 INC D         ; Move down a row.
 $CD43 DEC C         ; { Loop back if there are more rows to draw.
 $CD44 JR NZ,$CD38   ; }
 $CD46 EXX           ;
 $CD47 LD A,C        ;
 $CD48 AND A         ;
 $CD49 RET NZ        ;
 $CD4A BIT 1,B       ;
 $CD4C RET NZ        ;
 $CD4D BIT 1,E       ;
 $CD4F RET NZ        ;
 $CD50 LD A,E        ;
 $CD51 RRA           ;
 $CD52 AND $0F       ;
 $CD54 ADD A,$03     ;
 $CD56 PUSH HL       ;
 $CD57 CALL $DB01    ;
 $CD5A POP HL        ;
 $CD5B RET           ;

; Update lift's attributes
;
; Used by the routines at #R$CC89 and #R$D16F.
;
; DE New lift position
c$CD5C LD A,E        ;
 $CD5D AND $07       ;
 $CD5F AND A         ;
 $CD60 RET NZ        ;
 $CD61 LD A,E        ;
 $CD62 EXX           ;
 $CD63 LD E,A        ;
 $CD64 LD D,$0E      ;
 $CD66 CALL $E909    ;
 $CD69 LD A,(DE)     ;
 $CD6A LD B,A        ;
 $CD6B INC E         ;
 $CD6C INC E         ;
 $CD6D INC E         ;
 $CD6E INC E         ;
 $CD6F LD A,(DE)     ;
 $CD70 LD C,A        ;
 $CD71 LD E,$04      ;
 $CD73 CALL $D9AA    ;
 $CD76 JR Z,$CD7A    ;
 $CD78 EXX           ;
 $CD79 RET           ;
*$CD7A EXX           ;
 $CD7B LD C,$64      ;
 $CD7D RET           ;

; Lift graphic
b$CD7E DEFB $00,$00,$00,$00,$00,$00

; Lift graphic
;
; #UDGARRAY3,7,,3($CD84-$CD86;$CD87-$CD89)(lift)
b$CD84 DEFB $66,$66,$66,$7F,$FF,$FE

; Something bad has happened - set the "lose a life" flag
;
; Used by the routines at #R$C92A, #R$CF77, #R$D1CE, #R$D895 and #R$E782.
c$CD8A LD A,$08      ; { Set 8 frames to run in the "touched" object sequence. (#R$C880)
 $CD8C LD ($C880),A  ; }
 $CD8F LD HL,$C874   ; Point #REGhl to the game flags (#R$C874).
 $CD92 SET 5,(HL)    ; Set bit 5 (lose a life).
 $CD94 LD HL,$DA8A   ; Point #REGhl to the current tune data. (#R$DA8A)
 $CD97 SET 1,(HL)    ; Set bit 1 (play "lose a life" effect)
 $CD99 RET           ; Return.

; Run a frame in the "lose a life" sequence
;
; Used by the routine at #R$CFD9.
c$CD9A LD HL,$C880   ;
 $CD9D LD A,(HL)     ;
 $CD9E AND A         ;
 $CD9F JR Z,$CDA3    ;
 $CDA1 DEC (HL)      ;
 $CDA2 RET           ;
*$CDA3 LD HL,$DA8A   ;
 $CDA6 RES 1,(HL)    ;
 $CDA8 LD HL,$C86D   ;
 $CDAB LD A,(HL)     ;
 $CDAC CP $08        ;
 $CDAE JR Z,$CDB9    ;
 $CDB0 INC (HL)      ;
 $CDB1 SLA A         ;
 $CDB3 SLA A         ;
 $CDB5 CALL $DB01    ;
 $CDB8 RET           ;
; All frames have been run, now remove one life.
*$CDB9 LD HL,$C86C   ; Point #REGhl at the number of lives.
 $CDBC LD A,$19      ; { Have we got #N$19 lives?
 $CDBE CP (HL)       ; }
 $CDBF JP C,$0000    ; If so, reset the game, looks like someone's been hacking.
 $CDC2 LD A,(HL)     ; { Have we got any lives?
 $CDC3 AND A         ; }
 $CDC4 JR Z,$CDD3    ; If not, the game's over.
 $CDC6 DEC (HL)      ; Decrease the number of lives.
 $CDC7 LD HL,$C874   ; Point #REGhl to the game flags (#R$C874).
 $CDCA RES 5,(HL)    ; Reset bit 5 (lose a life).
 $CDCC LD HL,$EE88   ; Set #REGhl to the "lose a life" effect.
 $CDCF CALL $DB0B    ; Play it.
 $CDD2 RET           ;

; Display the "game over" sequence
;
; Used by the routine at #R$CD9A.
c$CDD3 POP HL        ;
 $CDD4 POP HL        ;
 $CDD5 LD HL,$C87F   ;
 $CDD8 SET 7,(HL)    ;
; This entry point is used by the routine at #R$DBEE.
*$CDDA CALL $E820    ;
 $CDDD LD HL,$E800   ;
 $CDE0 LD A,(HL)     ;
 $CDE1 AND $F8       ;
 $CDE3 LD (HL),A     ;
 $CDE4 OUT ($FE),A   ;
 $CDE6 LD HL,$DA8A   ;
 $CDE9 LD (HL),$00   ;
 $CDEB LD HL,$CE68   ;
 $CDEE CALL $ED06    ;
 $CDF1 LD HL,$E6D9   ;
 $CDF4 LD (HL),$7F   ;
 $CDF6 INC HL        ;
 $CDF7 LD (HL),$00   ;
 $CDF9 LD IY,$CE72   ;
*$CDFD CALL $E6F6    ;
 $CE00 LD HL,$DA8A   ;
 $CE03 RES 1,(HL)    ;
 $CE05 CALL $DA8D    ;
 $CE08 LD A,($E6DA)  ;
 $CE0B CALL $F021    ;
 $CE0E CALL $C92A    ;
 $CE11 LD A,($E6DA)  ;
 $CE14 AND A         ;
 $CE15 JR NZ,$CDFD   ;
 $CE17 LD A,$B8      ;
*$CE19 PUSH AF       ;
 $CE1A CALL $F3D3    ;
 $CE1D LD DE,$0209   ;
 $CE20 CALL $E84E    ;
 $CE23 CALL $DAFA    ;
 $CE26 CALL $C92A    ;
 $CE29 CALL $DA8D    ;
 $CE2C POP AF        ;
 $CE2D INC A         ;
 $CE2E CP $BB        ;
 $CE30 JR NZ,$CE19   ;
*$CE32 CALL $C92A    ;
 $CE35 CALL $DA8D    ;
 $CE38 CALL $DAFA    ; Pause.
 $CE3B LD A,($C86B)  ;
 $CE3E AND A         ;
 $CE3F JR NZ,$CE32   ;
 $CE41 LD HL,$CE53   ; Point #REGhl at the "screens visited" message. (#R$CE53)
 $CE44 CALL $DDE0    ; Print the message.
 $CE47 LD B,$32      ;
*$CE49 PUSH BC       ;
 $CE4A CALL $DAFA    ; Pause.
 $CE4D POP BC        ;
 $CE4E DJNZ $CE49    ;
 $CE50 JP $C804      ;

; Screens visited message
;
; "00 SCREENS VISITED"
; .
; The numerical value at $NCE55 / $RNE56 is updated by the routine at #R$CBBD
;
; .
;
; #CALL:print_string( #PC, screensvisited )
b$CE53 DEFB $0A,$07,$00,$00,$27,$1B,$0C,$1A
 $CE5B DEFB $0E,$0E,$17,$1B,$27,$1E,$12,$1B
 $CE63 DEFB $12,$1C,$0E,$0D,$FF

; Dr Blitzen on "game over" screen, shooting Dan
;
; Used by the routine at #R$CDD3
b$CE68 DEFB $0C,$02,$B7,$12,$1B,$15,$0E,$1B
 $CE70 DEFB $18,$FF

; Data for laser fired by Dr Blitzen on "game over" screen
;
; Used by the routine at #R$CDD3
b$CE72 DEFB $00,$46,$59,$16

; Draw extra objects in the safe room if relevant
;
; Used by the routine at #R$CBBD.
c$CE76 LD A,($CFCA)  ; Get the current room. (#R$CFCA)
 $CE79 CP $1B        ; Is it the room with the safe?
 $CE7B RET NZ        ; Return if it's not.
; This is the safe room, see if there's anything extra to draw.
 $CE7C LD A,($C87E)  ; { Is the safe locked?
 $CE7F BIT 0,A       ; }
 $CE81 JR NZ,$CE8C   ; Jump forward if not.
; The safe's locked, so need's drawing.
 $CE83 LD DE,$140A   ; Set #REGde to the position.
 $CE86 LD HL,$EBDC   ; Set #REGhl to the graphic. (#R$EBDC)
 $CE89 CALL $E84E    ; Draw the graphic.
; Has Dan got the plans?
*$CE8C LD A,($C87E)  ; { Has Dan got the plans?
 $CE8F BIT 1,A       ; }
 $CE91 RET NZ        ; Return if he has.
; Dan hasn't got the plans, they need drawing.
 $CE92 LD DE,$0506   ; Set #REGde to the position.
 $CE95 LD HL,$EB89   ; Set #REGhl to the graphic. (#R$EB89)
 $CE98 CALL $E84E    ; Draw the graphic.
 $CE9B LD A,($C86C)  ; { Is the number of lives greater than #N$1A?
 $CE9E CP $1A        ; }
 $CEA0 JP NC,$0000   ; If so, reset - either a bug or someone's hacking the game.
 $CEA3 RET           ; Otherwise return.

; Room for action 1
b$CEA4 DEFB $23

; Pointer to action 1
w$CEA5 DEFW $CEDC   ; #R$CEDC

; Room for action 2
b$CEA7 DEFB $1D

; Pointer to action 2
w$CEA8 DEFW $CEE1   ; #R$CEE1

; Room for action 3
b$CEAA DEFB $1B     ; #R$CF77

; Pointer for action 3
w$CEAB DEFW $CF77

; Perform special actions
;
; Used by the routine at #R$C800.
c$CEAD LD B,$03      ; Number of rooms to check.
 $CEAF LD HL,$CEA4   ; Point #REGhl to the first action.
 $CEB2 LD A,($CFCA)  ; Get the current room.
*$CEB5 CP (HL)       ; Is the special action in this room?
 $CEB6 JR Z,$CEBE    ; Jump forward if it is.
 $CEB8 INC HL        ; { Move to the next entry.
 $CEB9 INC HL        ;
 $CEBA INC HL        ; }
 $CEBB DJNZ $CEB5    ; { Loop until all actions have been considered.
 $CEBD RET           ; }
; A special action was found in this room, so act on it.
*$CEBE INC HL        ; { Put the pointer to the action in #REGhl.
 $CEBF LD A,(HL)     ;
 $CEC0 INC HL        ;
 $CEC1 LD H,(HL)     ;
 $CEC2 LD L,A        ; }
 $CEC3 JP (HL)       ; Do it.

; Rainbow lift data in room 23
b$CEC4 DEFB $ED,$58,$06,$08,$7E,$0D,$1C,$28

; Rainbow lift data in room 1D
b$CECC DEFB $F4,$58,$04,$06,$6E,$14,$1D,$2C

; Rainbow lift data in room 1B
b$CED4 DEFB $89,$58,$04,$03,$66,$09,$12,$28

; Special actions on room 23
c$CEDC LD HL,$CEC4   ;
 $CEDF JR $CEF0      ;

; Special actions on room 1D
c$CEE1 LD HL,$CECC   ;
 $CEE4 JR $CEF0      ;

; Current attribute to set on a rainbow lift
g$CEE6 DEFB $01

; Set bit 7 to make rainbow lift active and pull up Dan
g$CEE7 DEFB $00

; Current screen position to set a rainbow lift colour
g$CEE8 DEFB $ED,$58

; Current height of rainbow lift
;
; Used be the routine at #R$CEF0
g$CEEA DEFB $06,$08

; Trigger positions for rainbow lifts
g$CEEC DEFB $7E,$0D,$1C,$28

; Move the rainbow lifts
;
; Used by the routines at #R$CEDC, #R$CEE1 and #R$CF77.
c$CEF0 LD DE,$CEE8   ;
 $CEF3 LD BC,$0008   ;
 $CEF6 LDIR          ;
 $CEF8 LD HL,$CEE7   ;
 $CEFB INC (HL)      ;
 $CEFC LD A,(HL)     ;
 $CEFD LD HL,$CEE6   ;
 $CF00 BIT 7,A       ;
 $CF02 JR NZ,$CF0E   ;
 $CF04 INC (HL)      ;
 $CF05 LD A,(HL)     ;
 $CF06 CP $08        ;
 $CF08 JR NZ,$CF19   ;
 $CF0A LD (HL),$01   ;
 $CF0C JR $CF19      ;
*$CF0E BIT 0,A       ;
 $CF10 JR Z,$CF19    ;
 $CF12 DEC (HL)      ;
 $CF13 LD A,(HL)     ;
 $CF14 AND A         ;
 $CF15 JR NZ,$CF19   ;
 $CF17 LD (HL),$07   ;
*$CF19 LD A,($CEE6)  ;
 $CF1C LD HL,($CEE8) ;
 $CF1F LD BC,($CEEA) ;
 $CF23 LD DE,$0020   ;
*$CF26 PUSH BC       ;
 $CF27 PUSH HL       ;
*$CF28 LD (HL),A     ;
 $CF29 ADD HL,DE     ;
 $CF2A INC A         ;
 $CF2B CP $08        ;
 $CF2D JR NZ,$CF31   ;
 $CF2F LD A,$01      ;
*$CF31 DJNZ $CF28    ;
 $CF33 POP HL        ;
 $CF34 POP BC        ;
 $CF35 INC L         ;
 $CF36 INC L         ;
 $CF37 INC L         ;
 $CF38 DEC C         ;
 $CF39 JR NZ,$CF26   ;
 $CF3B LD HL,$CEE7   ;
 $CF3E BIT 7,(HL)    ;
 $CF40 RET NZ        ;
 $CF41 LD A,(HL)     ;
 $CF42 AND $70       ;
 $CF44 RRCA          ;
 $CF45 RRCA          ;
 $CF46 DEC HL        ;
 $CF47 LD B,(HL)     ;
 $CF48 SLA B         ;
 $CF4A SUB B         ;
 $CF4B OR $20        ;
 $CF4D AND $2E       ;
 $CF4F CALL $DB01    ;
 $CF52 LD DE,($C872) ;
 $CF56 LD HL,$CEEC   ;
 $CF59 LD A,E        ;
 $CF5A CP (HL)       ;
 $CF5B RET NZ        ;
 $CF5C LD A,D        ;
 $CF5D INC HL        ;
 $CF5E LD B,(HL)     ;
 $CF5F DEC B         ;
 $CF60 CP B          ;
 $CF61 RET C         ;
 $CF62 INC HL        ;
 $CF63 LD B,(HL)     ;
 $CF64 CP B          ;
 $CF65 RET NC        ;
 $CF66 LD A,($C876)  ;
 $CF69 AND A         ;
 $CF6A RET NZ        ;
 $CF6B LD A,($C874)  ;
 $CF6E BIT 5,A       ;
 $CF70 RET NZ        ;
 $CF71 LD HL,$C87F   ;
 $CF74 SET 0,(HL)    ;
 $CF76 RET           ;

; Special actions on room 1B (safe room)
c$CF77 LD HL,$CED4   ; { Draw the rainbow lifts (#R$CED4).
 $CF7A CALL $CEF0    ; }
 $CF7D CALL $62A3    ; Blow the safe up.
 $CF80 LD A,($62A2)  ; Get the frame count. (#R$62A2)
 $CF83 CP $50        ; Is it #N$50?
 $CF85 JR NZ,$CFB5   ; Jump forward if it is.
 $CF87 LD A,($C872)  ; Get Dan's Y co-ordinate. (#R$C872)
 $CF8A CP $3E        ; Is it #N$3E?
 $CF8C RET NZ        ; Return if is isn't.
 $CF8D LD A,($C873)  ; Get Dan's X co-ordinate. (#R$C873)
 $CF90 CP $15        ; Is it #N$15?
 $CF92 RET NZ        ; Return if it isn't.
 $CF93 LD A,($C875)  ; Get Dan's frame count. (#R$C875)
 $CF96 CP $05        ; Is it 5?
 $CF98 RET NZ        ; Return if it isn't.
 $CF99 LD A,($C87E)  ; Get some flags.
 $CF9C BIT 0,A       ; Is the safe still locked?
 $CF9E RET NZ        ; Return if not.
; Dan is next to the safe and it's locked. Can it be blown up?
 $CF9F LD A,($C878)  ; Get the number of dynamite sticks. (#R$C878)
 $CFA2 CP $08        ; Has Dan got all 8?
 $CFA4 RET NZ        ; Return if not.
; Dan's got all 8 dynamite sticks, so blow the safe up!
 $CFA5 XOR A         ; { Start at frame 0. (#R$62A2)
 $CFA6 LD ($62A2),A  ; }
 $CFA9 LD HL,$C87E   ; { Set that the safe has been blown up.
 $CFAC SET 0,(HL)    ; }
 $CFAE LD HL,$6E0E   ; { Play the "blown the safe door" tune and return.
 $CFB1 CALL $DB0B    ; 
 $CFB4 RET           ; }
; The safe is being blown up or has been blown up.
*$CFB5 CP $40        ; Is the frame count #N40?
 $CFB7 RET NZ        ; Return if it is.
 $CFB8 LD A,($C86C)  ; Otherwise check the number of lives. 
 $CFBB CP $1A        ; Are there more than #N$1A?
 $CFBD JP NC,$0000   ; If so, somebody's been hacking or there's a bug, so reset the system.
 $CFC0 LD A,($C873)  ; Get Dan's X co-ordinate.
 $CFC3 CP $17        ; Is it greater than #N$17?
 $CFC5 RET NC        ; Return if it is.
 $CFC6 JP $CD8A      ; Otherwise Dan got caught in the blast range - oops - so lose a life.

; Attribute marking the food item in this room
g$CFC9 DEFB $00

; Current room
g$CFCA DEFB $00

; Current note to play while moving through the air
g$CFCB DEFB $00

; Attributes marking floors (global)
b$CFCC DEFB $03,$04,$05,$06,$07

; Attributes marking floors (custom)
g$CFD1 DEFB $00,$00

; Attributes marking walls
g$CFD3 DEFB $00,$00,$00,$00,$00,$00

; Update Dan's status and check for movement
;
; Used by the routine at #R$C800.
c$CFD9 LD A,($C87E)  ;
 $CFDC BIT 7,A       ;
 $CFDE RET NZ        ;
 $CFDF LD A,($C874)  ;
 $CFE2 BIT 7,A       ;
 $CFE4 JP NZ,$DBEE   ;
 $CFE7 BIT 5,A       ;
 $CFE9 CALL NZ,$CD9A ;
 $CFEC LD A,($C87F)  ;
 $CFEF BIT 0,A       ;
 $CFF1 JP NZ,$D08A   ;
 $CFF4 CALL $DC71    ;
 $CFF7 CALL $D895    ;
 $CFFA LD A,($C87A)  ;
 $CFFD AND A         ;
 $CFFE JR NZ,$D008   ;
 $D000 LD A,($C87B)  ;
 $D003 BIT 2,A       ;
 $D005 JP NZ,$D16F   ;
*$D008 LD A,($C874)  ;
 $D00B BIT 4,A       ;
 $D00D JP NZ,$D0DC   ;
 $D010 BIT 7,A       ;
 $D012 JP NZ,$DBEE   ;
 $D015 BIT 0,A       ;
 $D017 JP NZ,$D123   ;
 $D01A BIT 6,A       ;
 $D01C JR NZ,$D079   ;
 $D01E CALL $E9BC    ;
 $D021 LD A,C        ;
 $D022 CP $05        ;
 $D024 JR Z,$D076    ;
 $D026 CP $04        ;
 $D028 JR Z,$D044    ;
 $D02A CP $03        ;
 $D02C JR Z,$D03E    ;
 $D02E CP $02        ;
 $D030 JR Z,$D05B    ;
 $D032 CP $01        ;
 $D034 JR Z,$D038    ;
 $D036 JR $D04B      ;
; Move right
*$D038 CALL $D4B5    ;
 $D03B JP $D1CE      ;
; Move left
*$D03E CALL $D3EC    ;
 $D041 JP $D1CE      ;
; Jump
*$D044 LD HL,$C874   ;
 $D047 SET 0,(HL)    ;
 $D049 JR $D069      ;
; Jump right
*$D04B LD A,($C874)  ;
 $D04E BIT 1,A       ;
 $D050 JR Z,$D038    ;
 $D052 AND $20       ;
 $D054 ADD A,$0B     ;
 $D056 LD ($C874),A  ;
 $D059 JR $D069      ;
; Jump left
*$D05B LD A,($C874)  ;
 $D05E BIT 1,A       ;
 $D060 JR NZ,$D03E   ;
 $D062 AND $20       ;
 $D064 ADD A,$09     ;
 $D066 LD ($C874),A  ;
*$D069 LD A,$0C      ;
 $D06B LD ($CFCB),A  ;
 $D06E LD A,$0E      ;
 $D070 LD ($DBED),A  ;
 $D073 JP $D123      ;
; No action
*$D076 JP $D1CE      ;

; Increase the height fallen and adjust position
;
; Used by the routine at #R$CFD9.
c$D079 LD HL,$C876   ;
 $D07C LD A,(HL)     ;
 $D07D CP $FF        ;
 $D07F JR NZ,$D083   ;
 $D081 LD (HL),$1C   ;
*$D083 INC (HL)      ;
 $D084 CALL $D607    ;
 $D087 JP $D1CE      ;

; Move Dan up a rainbow lift
;
; Used by the routine at #R$CFD9.
c$D08A LD A,$0E      ;
 $D08C LD ($DBED),A  ;
 $D08F LD A,($C875)  ;
 $D092 AND A         ;
 $D093 JR Z,$D09B    ;
 $D095 CP $07        ;
 $D097 JR Z,$D09B    ;
 $D099 JR $D0A5      ;
*$D09B CALL $D567    ;
 $D09E LD A,($CEE7)  ;
 $D0A1 BIT 7,A       ;
 $D0A3 JR NZ,$D0D0   ;
*$D0A5 LD DE,($C872) ;
 $D0A9 LD A,($CEEC)  ;
 $D0AC CP E          ;
 $D0AD JR NZ,$D0C5   ;
 $D0AF LD A,($CEEE)  ;
 $D0B2 DEC A         ;
 $D0B3 DEC A         ;
 $D0B4 LD B,A        ;
 $D0B5 LD A,D        ;
 $D0B6 CP B          ;
 $D0B7 JR C,$D0BF    ;
 $D0B9 CALL $D3EC    ;
 $D0BC JP $D1CE      ;
*$D0BF CALL $D4B5    ;
 $D0C2 JP $D1CE      ;
*$D0C5 LD HL,$C876   ;
 $D0C8 INC (HL)      ;
 $D0C9 LD A,($CEEF)  ;
 $D0CC CP (HL)       ;
 $D0CD JP NZ,$D1CE   ;
*$D0D0 XOR A         ;
 $D0D1 LD ($C876),A  ;
 $D0D4 LD HL,$C87F   ;
 $D0D7 RES 0,(HL)    ;
 $D0D9 JP $D1CE      ;

; Adjust height while on a trampoline
;
; Used by the routine at #R$CFD9.
c$D0DC LD A,($C874)  ;
 $D0DF LD B,A        ;
 $D0E0 LD A,($C876)  ;
 $D0E3 LD L,A        ;
 $D0E4 BIT 2,B       ;
 $D0E6 JR NZ,$D0FA   ;
 $D0E8 LD A,($C879)  ;
 $D0EB CP L          ;
 $D0EC JR NZ,$D0F4   ;
 $D0EE SET 2,B       ;
 $D0F0 LD L,$00      ;
 $D0F2 JR $D108      ;
*$D0F4 CALL $D567    ;
 $D0F7 INC L         ;
 $D0F8 JR $D108      ;
*$D0FA LD A,($C877)  ;
 $D0FD SUB $02       ;
 $D0FF CP L          ;
 $D100 JR NZ,$D104   ;
 $D102 RES 4,B       ;
*$D104 CALL $D607    ;
 $D107 INC L         ;
*$D108 BIT 3,B       ;
 $D10A JR Z,$D118    ;
 $D10C BIT 1,B       ;
 $D10E JR NZ,$D115   ;
 $D110 CALL $D3EC    ;
 $D113 JR $D118      ;
*$D115 CALL $D4B5    ;
*$D118 LD A,B        ;
 $D119 LD ($C874),A  ;
 $D11C LD A,L        ;
 $D11D LD ($C876),A  ;
 $D120 JP $D1CE      ;

; Make Dan jump
;
; Used by the routine at #R$CFD9.
c$D123 LD A,($C876)  ;
 $D126 LD L,A        ;
 $D127 LD A,($C874)  ;
 $D12A LD B,A        ;
 $D12B LD A,($C877)  ;
 $D12E LD H,A        ;
 $D12F BIT 2,B       ;
 $D131 JR NZ,$D14B   ;
 $D133 LD A,L        ;
 $D134 CP H          ;
 $D135 JR NZ,$D145   ;
 $D137 SET 2,B       ;
 $D139 LD L,$00      ;
 $D13B PUSH HL       ;
 $D13C LD A,($CFCB)  ;
 $D13F CALL $DB01    ;
 $D142 POP HL        ;
 $D143 JR $D155      ;
*$D145 INC L         ;
 $D146 CALL $D567    ;
 $D149 JR $D155      ;
*$D14B INC L         ;
 $D14C CALL $D607    ;
 $D14F LD A,L        ;
 $D150 CP H          ;
 $D151 JR NZ,$D155   ;
 $D153 RES 0,B       ;
*$D155 BIT 3,B       ;
 $D157 JR Z,$D165    ;
 $D159 BIT 1,B       ;
 $D15B JR Z,$D162    ;
 $D15D CALL $D4B5    ;
 $D160 JR $D165      ;
*$D162 CALL $D3EC    ;
*$D165 LD A,B        ;
 $D166 LD ($C874),A  ;
 $D169 LD A,L        ;
 $D16A LD ($C876),A  ;
 $D16D JR $D1CE      ;

; Move Dan on the lift
;
; Used by the routine at #R$CFD9.
c$D16F LD A,($C87B)  ;
 $D172 BIT 0,A       ;
 $D174 JR Z,$D17B    ;
 $D176 CALL $D607    ;
 $D179 JR $D17E      ;
*$D17B CALL $D567    ;
*$D17E LD A,($C87C)  ;
 $D181 CALL $CD24    ;
 $D184 CALL $D1CE    ;
 $D187 LD DE,($C872) ;
 $D18B LD A,E        ;
 $D18C ADD A,$1A     ;
 $D18E LD E,A        ;
 $D18F LD ($C87C),A  ;
 $D192 LD A,($CFCA)  ;
 $D195 LD ($C87D),A  ;
 $D198 CALL $CD2B    ;
 $D19B LD DE,($C87C) ;
 $D19F LD BC,($C87A) ;
 $D1A3 CALL $CD5C    ;
 $D1A6 CALL $D1B2    ;
 $D1A9 LD ($C87C),DE ;
 $D1AD LD ($C87A),BC ;
 $D1B1 RET           ;

; Check if the lift has reached the top or bottom
;
; Used by the routines at #R$CC89 and #R$D16F.
c$D1B2 LD A,D        ;
 $D1B3 CP $05        ;
 $D1B5 JR NZ,$D1BE   ;
 $D1B7 LD A,E        ;
 $D1B8 CP $48        ;
 $D1BA JR NZ,$D1BE   ;
 $D1BC JR $D1C6      ;
*$D1BE LD A,D        ;
 $D1BF CP $2D        ;
 $D1C1 RET NZ        ;
 $D1C2 LD A,E        ;
 $D1C3 CP $40        ;
 $D1C5 RET NZ        ;
*$D1C6 LD C,$64      ;
 $D1C8 LD A,B        ;
 $D1C9 XOR $01       ;
 $D1CB LD B,A        ;
 $D1CC RET           ;

; Command flags
;
; Set bit 7 to gain an extra life
; .
; Set bit 6 to lose a life
b$D1CD DEFB $00

; Draw Dan and do any collision detection
;
; Used by the routines at #R$CFD9, #R$D079, #R$D08A, #R$D0DC, #R$D123, #R$D16F,
; #R$D2F0 and #R$DBEE.
c$D1CE LD A,($C880)   ; Get the frame count. (#R$C880)
 $D1D1 BIT 0,A        ; Is bit 0 set?
 $D1D3 JR Z,$D1DA     ; Jump forward if not.
 $D1D5 LD DE,$62D6    ; Re-use Dan's existing graphic.
 $D1D8 JR $D1E8       ; Move forward to do the drawing.
# Put a new frame for Dan in the graphic buffer.
*$D1DA LD A,($C875)   ; Get Dan's current graphic. (#R$C875)
 $D1DD ADD A,A        ; Double it to get a word offset.
 $D1DE LD C,A         ; { Put this in #REGbc.
 $D1DF LD B,$00       ; }
 $D1E1 LD HL,$632A    ; { Add the base offset for the graphic table. (#R$632A)
 $D1E4 ADD HL,BC      ; }
 $D1E5 LD E,(HL)      ; { Put the graphic address in #REGde.
 $D1E6 INC HL         ;
 $D1E7 LD D,(HL)      ; }
*$D1E8 LD HL,$62D6    ; Point #REGhl at the working graphic buffer. (#R$62D6)
; There is now a working sprite for Dan, so find the right place on screen to put it.
 $D1EB EXX            ; Swap #REGbc, #REGde and #REGhl.
 $D1EC LD DE,($C872)  ; Put Dan's co-ordinates in #REGde.
 $D1F0 LD A,($DBED)   ; Get the height to draw.
 $D1F3 LD B,A         ; Iterate for this number of rows.
*$D1F4 PUSH BC        ; { Store #REGbc and #REGde.
 $D1F5 PUSH DE        ; }
 $D1F6 CALL $E8D2     ; Convert the co-ordinates into a screen address.
 $D1F9 PUSH DE        ; Remember #REGde which holds the screen address.
 $D1FA CALL $E90C     ; Convert the screen address to an attribute address.
 $D1FD EX DE,HL       ; { Put the screen address in #REGhl
 $D1FE POP DE         ; and the attribute address in #REGde.}
; Found a place on screen to draw Dan, so do it.
 $D1FF LD C,$02       ;
*$D201 PUSH DE        ;
 $D202 PUSH HL        ;
 $D203 LD B,$03       ;
*$D205 LD A,(HL)      ;
 $D206 CP $45         ;
 $D208 JR NZ,$D210    ;
 $D20A EXX            ;
 $D20B XOR A          ;
 $D20C LD (HL),A      ;
 $D20D EXX            ;
 $D20E JR $D238       ;
*$D210 AND A          ;
 $D211 JR NZ,$D216    ;
 $D213 EXX            ;
 $D214 JR $D21F       ;
*$D216 AND $78        ;
 $D218 CP $40         ;
 $D21A JR NZ,$D238    ;
 $D21C EXX            ;
 $D21D XOR A          ;
 $D21E LD (HL),A      ;
*$D21F LD A,(DE)      ;
 $D220 INC DE         ;
 $D221 INC HL         ;
 $D222 EXX            ;
 $D223 EX DE,HL       ;
 $D224 PUSH AF        ;
 $D225 AND (HL)       ;
 $D226 JR Z,$D22E     ;
 $D228 LD A,(DE)      ;
 $D229 SET 7,A        ;
 $D22B LD ($D1CD),A   ;
*$D22E POP AF         ;
 $D22F OR (HL)        ;
 $D230 EX DE,HL       ;
 $D231 LD (DE),A      ;
 $D232 INC DE         ;
 $D233 INC L          ;
 $D234 DJNZ $D205     ;
 $D236 JR $D243       ;
*$D238 EXX            ;
 $D239 LD A,(DE)      ;
 $D23A OR (HL)        ;
 $D23B INC DE         ;
 $D23C INC HL         ;
 $D23D EXX            ;
 $D23E LD (DE),A      ;
 $D23F INC DE         ;
 $D240 INC L          ;
 $D241 DJNZ $D205     ;
*$D243 POP HL         ;
 $D244 POP DE         ;
 $D245 INC D          ;
 $D246 DEC C          ;
 $D247 JR NZ,$D201    ;
 $D249 POP DE         ;
 $D24A INC E          ;
 $D24B INC E          ;
 $D24C POP BC         ;
 $D24D DJNZ $D1F4     ;
 $D24F LD HL,$D1CD    ;
 $D252 BIT 7,(HL)     ;
 $D254 RET Z          ;
 $D255 RES 7,(HL)     ;
 $D257 LD A,(HL)      ;
 $D258 AND A          ;
 $D259 JP Z,$DE87     ;
; Dan has hit a moving object
 $D25C LD A,($CFCA)   ;
 $D25F CP $1B         ;
 $D261 JR NZ,$D270    ;
 $D263 LD A,($D1CD)   ;
 $D266 CP $43         ;
 $D268 JP Z,$CD8A     ;
 $D26B CP $47         ;
 $D26D JP Z,$CD8A     ;
*$D270 LD A,($C87E)   ;
 $D273 BIT 5,A        ;
 $D275 JR Z,$D286     ;
 $D277 LD HL,$FE71    ;
 $D27A CALL $DB0B     ;
 $D27D LD A,$14       ;
 $D27F LD HL,$C86B    ;
 $D282 ADD A,(HL)     ;
 $D283 LD (HL),A      ;
 $D284 JR $D289       ;
*$D286 CALL $CD8A     ;
*$D289 LD L,(IX+$07)  ;
 $D28C LD H,(IX+$08)  ;
 $D28F LD DE,$0006    ;
 $D292 ADD HL,DE      ;
 $D293 PUSH HL        ;
 $D294 POP IY         ;
 $D296 LD BC,($DED8)  ;
 $D29A LD A,($E540)   ;
 $D29D CALL $D2BF     ;
 $D2A0 LD BC,($DFCA)  ;
 $D2A4 LD A,($E541)   ;
 $D2A7 CALL $D2BF     ;
 $D2AA LD BC,($E0BC)  ;
 $D2AE LD A,($E542)   ;
 $D2B1 CALL $D2BF     ;
 $D2B4 LD BC,($E2FE)  ;
 $D2B8 LD A,($E543)   ;
 $D2BB CALL $D2BF     ;
 $D2BE RET            ;
*$D2BF AND A          ;
 $D2C0 RET Z          ;
 $D2C1 LD L,A         ;
*$D2C2 LD A,($D1CD)   ;
 $D2C5 CP (IY+$05)    ;
 $D2C8 JR NZ,$D2D5    ;
 $D2CA LD E,(IY+$00)  ;
 $D2CD LD D,(IY+$01)  ;
 $D2D0 CALL $DB38     ;
 $D2D3 JR C,$D2DE     ;
*$D2D5 LD DE,$0008    ;
 $D2D8 ADD IY,DE      ;
 $D2DA DEC L          ;
 $D2DB JR NZ,$D2C2    ;
 $D2DD RET            ;
*$D2DE LD D,(IY+$01)  ;
 $D2E1 LD A,(IY+$00)  ;
 $D2E4 ADD A,C        ;
 $D2E5 DEC A          ;
 $D2E6 LD E,A         ;
 $D2E7 SET 6,(IY+$04) ;
 $D2EB CALL $E897     ;
 $D2EE POP HL         ;
 $D2EF RET            ;

; Bounce off a trampoline
;
; Used by the routine at #R$D895.
c$D2F0 LD A,($C872)  ;
 $D2F3 AND $07       ;
 $D2F5 AND A         ;
 $D2F6 JP NZ,$D950   ;
 $D2F9 LD A,($C876)  ;
 $D2FC LD L,A        ;
 $D2FD LD A,($C874)  ;
 $D300 LD B,A        ;
 $D301 LD A,L        ;
 $D302 CP $03        ;
 $D304 JR NC,$D319   ;
 $D306 LD A,($C874)  ;
 $D309 AND $22       ;
 $D30B LD ($C874),A  ;
 $D30E XOR A         ;
 $D30F LD ($C876),A  ;
 $D312 CALL $D567    ;
 $D315 POP DE        ;
 $D316 JP $D1CE      ;
*$D319 PUSH HL       ;
 $D31A PUSH DE       ;
 $D31B PUSH BC       ;
 $D31C CALL $E9BC    ;
 $D31F LD A,C        ;
 $D320 POP BC        ;
 $D321 POP DE        ;
 $D322 POP HL        ;
 $D323 LD C,A        ;
 $D324 BIT 0,C       ;
 $D326 JR Z,$D32E    ;
 $D328 SRL L         ;
 $D32A INC L         ;
 $D32B LD A,L        ;
 $D32C JR $D332      ;
*$D32E LD A,L        ;
 $D32F SRL A         ;
 $D331 ADD A,L       ;
*$D332 LD ($C879),A  ;
 $D335 BIT 2,C       ;
 $D337 RES 3,B       ;
 $D339 JR NZ,$D361   ;
 $D33B SET 3,B       ;
 $D33D BIT 1,C       ;
 $D33F JR NZ,$D34A   ;
 $D341 BIT 1,B       ;
 $D343 JR NZ,$D361   ;
 $D345 CALL $D4B5    ;
 $D348 JR $D351      ;
*$D34A BIT 1,B       ;
 $D34C JR Z,$D361    ;
 $D34E CALL $D3EC    ;
*$D351 LD A,($C874)  ;
 $D354 AND $22       ;
 $D356 LD ($C874),A  ;
 $D359 LD A,$09      ;
 $D35B LD ($C876),A  ;
 $D35E JP $D1CE      ;
*$D361 SET 4,B       ;
 $D363 RES 2,B       ;
 $D365 LD A,B        ;
 $D366 LD ($C874),A  ;
 $D369 XOR A         ;
 $D36A LD ($C876),A  ;
 $D36D LD A,$0C      ;
 $D36F LD ($CFCB),A  ;
 $D372 LD A,$0E      ;
 $D374 LD ($DBED),A  ;
 $D377 RET           ;

; Print the display area
;
; Used by the routine at #R$C881.
c$D378 LD HL,$D3AC   ;
 $D37B CALL $ED06    ;
 $D37E LD HL,$D3D4   ;
 $D381 CALL $EEF1    ;
 $D384 LD A,$4F      ;
 $D386 LD BC,$0801   ;
 $D389 LD DE,$0016   ;
 $D38C CALL $E8BA    ;
 $D38F LD BC,$0A02   ;
 $D392 LD DE,$0A16   ;
 $D395 CALL $E8BA    ;
 $D398 LD HL,$5AE0   ;
 $D39B LD B,$07      ;
*$D39D LD (HL),B     ;
 $D39E INC L         ;
 $D39F DJNZ $D39D    ;
 $D3A1 LD (HL),B     ;
 $D3A2 LD HL,$C925   ;
 $D3A5 LD DE,$51D0   ;
 $D3A8 CALL $EEF9    ;
 $D3AB RET           ;

; UDGs for display area
b$D3AC DEFB $17,$14,$7C,$17,$09,$7D,$14,$0A
 $D3B4 DEFB $7E,$FE,$01,$0A,$17,$0B,$7F,$FE
 $D3BC DEFB $01,$09,$17,$0A,$80,$15,$00,$81
 $D3C4 DEFB $FE,$01,$08,$15,$16,$98,$FE,$02
 $D3CC DEFB $05,$17,$16,$98,$FE,$02,$05,$FF

; Text for display area
;
; "ENERGY" / "SC0RE:" / "HI:"
b$D3D4 DEFB $16,$02,$0E,$17,$0E,$1A,$10,$21
 $D3DC DEFB $FE,$15,$0A,$1B,$0C,$00,$1A,$0E
 $D3E4 DEFB $23,$FE,$16,$0D,$11,$12,$23,$FF

; Move Dan left
;
; Used by the routines at #R$CFD9, #R$D08A, #R$D0DC, #R$D123 and #R$D2F0.
c$D3EC EXX           ;
 $D3ED LD A,($C875)  ;
 $D3F0 LD H,A        ;
 $D3F1 LD A,($C873)  ;
 $D3F4 LD L,A        ;
 $D3F5 LD A,($C874)  ;
 $D3F8 BIT 1,A       ;
 $D3FA JR Z,$D417    ;
 $D3FC RES 1,A       ;
 $D3FE LD ($C874),A  ;
 $D401 LD A,H        ;
 $D402 CP $02        ;
 $D404 JR C,$D40B    ;
 $D406 INC H         ;
 $D407 INC H         ;
 $D408 JP $D4A5      ;
*$D40B ADD A,$06     ;
 $D40D LD H,A        ;
 $D40E DEC L         ;
 $D40F LD A,L        ;
 $D410 CP $FF        ;
 $D412 JR Z,$D43A    ;
 $D414 JP $D48E      ;
*$D417 LD A,H        ;
 $D418 CP $05        ;
 $D41A JR NZ,$D432   ;
 $D41C PUSH HL       ;
 $D41D LD D,L        ;
 $D41E CALL $D951    ;
 $D421 POP HL        ;
 $D422 JR NZ,$D482   ;
 $D424 EXX           ;
 $D425 RES 3,B       ;
 $D427 RES 4,B       ;
 $D429 BIT 0,B       ;
 $D42B JR NZ,$D42F   ;
 $D42D LD L,$00      ;
*$D42F EXX           ;
 $D430 JR $D4A5      ;
*$D432 CP $04        ;
 $D434 JR NZ,$D482   ;
 $D436 LD A,L        ;
 $D437 AND A         ;
 $D438 JR NZ,$D48B   ;
*$D43A LD A,$1D      ;
 $D43C LD ($C873),A  ;
 $D43F LD A,$07      ;
 $D441 LD ($C875),A  ;
 $D444 LD A,($CFCA)  ;
 $D447 LD B,A        ;
 $D448 AND $07       ;
 $D44A CP $07        ;
 $D44C JR NZ,$D453   ;
 $D44E LD A,B        ;
 $D44F SUB $07       ;
 $D451 JR $D455      ;
*$D453 LD A,B        ;
 $D454 INC A         ;
*$D455 PUSH AF       ;
 $D456 CALL $CBBD    ;
 $D459 LD A,($D9EA)  ;
 $D45C INC A         ;
 $D45D CP $08        ;
 $D45F JR NZ,$D462   ;
 $D461 XOR A         ;
*$D462 POP BC        ;
 $D463 CP B          ;
 $D464 JR NZ,$D478   ;
 $D466 LD A,($D9E9)  ;
 $D469 ADD A,$03     ;
 $D46B CP $05        ;
 $D46D JR NC,$D478   ;
 $D46F ADD A,$1B     ;
 $D471 LD ($D9E9),A  ;
 $D474 LD A,B        ;
 $D475 LD ($D9EA),A  ;
*$D478 LD A,$01      ;
 $D47A LD ($D9EB),A  ;
 $D47D CALL $D9EC    ;
 $D480 EXX           ;
 $D481 RET           ;
*$D482 DEC H         ;
 $D483 LD BC,$00EF   ;
 $D486 CALL $D4AF    ;
 $D489 JR $D4A5      ;
*$D48B DEC L         ;
 $D48C LD H,$07      ;
*$D48E PUSH HL       ;
 $D48F LD HL,$62D6   ;
 $D492 LD BC,$0053   ;
 $D495 ADD HL,BC     ;
 $D496 LD E,L        ;
 $D497 LD D,H        ;
 $D498 DEC HL        ;
 $D499 LDDR          ;
 $D49B INC HL        ;
 $D49C LD DE,($C872) ;
 $D4A0 DEC D         ;
 $D4A1 CALL $D550    ;
 $D4A4 POP HL        ;
*$D4A5 LD A,H        ;
 $D4A6 LD ($C875),A  ;
 $D4A9 LD A,L        ;
 $D4AA LD ($C873),A  ;
 $D4AD EXX           ;
 $D4AE RET           ;

; Pause
;
; Used by the routines at #R$C800, #R$D3EC, #R$D4B5, #R$DAB2 and #R$DAFA.
;
; BC Length to pause
c$D4AF DEC BC        ; Drecrement BC.
 $D4B0 LD A,B        ; { Loop while BC > 0.
 $D4B1 OR C          ;
 $D4B2 JR NZ,$D4AF   ; }
 $D4B4 RET           ; Otherwise return.

; Move Dan right
;
; Used by the routines at #R$CFD9, #R$D08A, #R$D0DC, #R$D123 and #R$D2F0.
c$D4B5 EXX           ;
 $D4B6 LD A,($C875)  ;
 $D4B9 LD H,A        ;
 $D4BA LD A,($C873)  ;
 $D4BD LD L,A        ;
 $D4BE LD A,($C874)  ;
 $D4C1 BIT 1,A       ;
 $D4C3 JR NZ,$D4DF   ;
 $D4C5 SET 1,A       ;
 $D4C7 LD ($C874),A  ;
 $D4CA LD A,H        ;
 $D4CB CP $06        ;
 $D4CD JR NC,$D4D4   ;
 $D4CF DEC H         ;
 $D4D0 DEC H         ;
 $D4D1 JP $D546      ;
*$D4D4 SUB $06       ;
 $D4D6 LD H,A        ;
 $D4D7 INC L         ;
 $D4D8 LD A,L        ;
 $D4D9 CP $1E        ;
 $D4DB JR Z,$D505    ;
 $D4DD JR $D52C      ;
*$D4DF LD A,H        ;
 $D4E0 CP $02        ;
 $D4E2 JR NZ,$D4FC   ;
 $D4E4 LD D,L        ;
 $D4E5 INC D         ;
 $D4E6 INC D         ;
 $D4E7 PUSH HL       ;
 $D4E8 CALL $D951    ;
 $D4EB POP HL        ;
 $D4EC JR NZ,$D520   ;
 $D4EE EXX           ;
 $D4EF RES 3,B       ;
 $D4F1 RES 4,B       ;
 $D4F3 BIT 0,B       ;
 $D4F5 JR NZ,$D4F9   ;
 $D4F7 LD L,$00      ;
*$D4F9 EXX           ;
 $D4FA JR $D546      ;
*$D4FC CP $03        ;
 $D4FE JR NZ,$D520   ;
 $D500 LD A,L        ;
 $D501 CP $1D        ;
 $D503 JR NZ,$D529   ;
*$D505 XOR A         ;
 $D506 LD ($C875),A  ;
 $D509 LD ($C873),A  ;
 $D50C LD A,($CFCA)  ;
 $D50F LD B,A        ;
 $D510 AND $07       ;
 $D512 JR NZ,$D519   ;
 $D514 LD A,B        ;
 $D515 ADD A,$07     ;
 $D517 JR $D51B      ;
*$D519 LD A,B        ;
 $D51A DEC A         ;
*$D51B CALL $CBBD    ;
 $D51E EXX           ;
 $D51F RET           ;
*$D520 INC H         ;
 $D521 LD BC,$00EF   ;
 $D524 CALL $D4AF    ;
 $D527 JR $D546      ;
*$D529 INC L         ;
 $D52A LD H,$00      ;
*$D52C PUSH HL       ;
 $D52D LD HL,$62D6   ;
 $D530 LD E,L        ;
 $D531 LD D,H        ;
 $D532 INC HL        ;
 $D533 PUSH HL       ;
 $D534 LD BC,$0053   ;
 $D537 LDIR          ;
 $D539 POP HL        ;
 $D53A INC HL        ;
 $D53B LD DE,($C872) ;
 $D53F INC D         ;
 $D540 INC D         ;
 $D541 INC D         ;
 $D542 CALL $D550    ;
 $D545 POP HL        ;
*$D546 LD A,H        ;
 $D547 LD ($C875),A  ;
 $D54A LD A,L        ;
 $D54B LD ($C873),A  ;
 $D54E EXX           ;
 $D54F RET           ;

; Copy Dan's sprite back to the working graphic buffer
;
; Used by the routines at #R$D3EC and #R$D4B5.
;
; DE Current co-ordinates of Dan
; HL Pointer to working graphic buffer
c$D550 LD C,$0E      ;
*$D552 PUSH DE       ;
 $D553 CALL $E8D2    ;
 $D556 LD B,$02      ;
*$D558 LD A,(DE)     ;
 $D559 LD (HL),A     ;
 $D55A INC D         ;
 $D55B INC HL        ;
 $D55C INC HL        ;
 $D55D INC HL        ;
 $D55E DJNZ $D558    ;
 $D560 POP DE        ;
 $D561 INC E         ;
 $D562 INC E         ;
 $D563 DEC C         ;
 $D564 JR NZ,$D552   ;
 $D566 RET           ;

; Move Dan upwards while jumping
;
; Used by the routines at #R$D08A, #R$D0DC, #R$D123, #R$D16F and #R$D2F0.
c$D567 EXX           ;
 $D568 LD DE,($C872) ;
 $D56C CALL $E909    ;
 $D56F LD A,($C875)  ;
 $D572 CP $02        ;
 $D574 PUSH AF       ;
 $D575 JR C,$D57C    ;
 $D577 CP $04        ;
 $D579 JR Z,$D57C    ;
 $D57B INC E         ;
*$D57C LD A,(DE)     ;
 $D57D LD B,A        ;
 $D57E INC E         ;
 $D57F LD A,(DE)     ;
 $D580 LD C,A        ;
 $D581 POP AF        ;
 $D582 JR Z,$D588    ;
 $D584 CP $05        ;
 $D586 JR NZ,$D589   ;
*$D588 LD C,B        ;
*$D589 LD HL,$CFD3   ;
 $D58C BIT 7,B       ;
 $D58E JP NZ,$DDF4   ;
 $D591 BIT 7,C       ;
 $D593 JP NZ,$DDF4   ;
 $D596 LD D,$06      ;
*$D598 LD E,(HL)     ;
 $D599 CALL $D9AA    ;
 $D59C JR Z,$D5F8    ;
 $D59E INC HL        ;
 $D59F DEC D         ;
 $D5A0 JR NZ,$D598   ;
 $D5A2 LD A,($C872)  ;
 $D5A5 AND A         ;
 $D5A6 JR NZ,$D5B7   ;
 $D5A8 LD A,$82      ;
 $D5AA LD ($C872),A  ;
 $D5AD LD A,($CFCA)  ;
 $D5B0 ADD A,$08     ;
 $D5B2 CALL $CBBD    ;
 $D5B5 EXX           ;
 $D5B6 RET           ;
*$D5B7 DEC A         ;
 $D5B8 DEC A         ;
 $D5B9 LD ($C872),A  ;
 $D5BC LD A,($C87F)  ;
 $D5BF BIT 0,A       ;
 $D5C1 JR NZ,$D5DA   ;
 $D5C3 LD A,($C87B)  ;
 $D5C6 BIT 2,A       ;
 $D5C8 JR NZ,$D5DA   ;
 $D5CA LD A,($CFCB)  ;
 $D5CD INC A         ;
 $D5CE CP $35        ;
 $D5D0 JR NZ,$D5D4   ;
 $D5D2 LD A,$28      ;
*$D5D4 LD ($CFCB),A  ;
 $D5D7 CALL $DB01    ;
*$D5DA LD HL,$62D6   ;
 $D5DD LD BC,$0053   ;
 $D5E0 ADD HL,BC     ;
 $D5E1 PUSH HL       ;
 $D5E2 LD BC,$0006   ;
 $D5E5 AND A         ;
 $D5E6 SBC HL,BC     ;
 $D5E8 POP DE        ;
 $D5E9 LD BC,$004E   ;
 $D5EC LDDR          ;
 $D5EE LD DE,($C872) ;
 $D5F2 INC HL        ;
 $D5F3 CALL $D655    ;
 $D5F6 JR $D605      ;
*$D5F8 EXX           ;
 $D5F9 RES 0,B       ;
 $D5FB RES 4,B       ;
 $D5FD LD L,$00      ;
 $D5FF EXX           ;
 $D600 LD A,$0D      ;
 $D602 LD ($DBED),A  ;
*$D605 EXX           ;
 $D606 RET           ;

; Fall through the air, moving onto one screen down if necessary
;
; Used by the routines at #R$D079, #R$D0DC, #R$D123 and #R$D16F.
c$D607 EXX           ;
 $D608 LD A,($C872)  ;
 $D60B CP $84        ;
 $D60D JR NZ,$D61E   ;
 $D60F LD A,$02      ;
 $D611 LD ($C872),A  ;
 $D614 LD A,($CFCA)  ;
 $D617 SUB $08       ;
 $D619 CALL $CBBD    ;
 $D61C EXX           ;
 $D61D RET           ;

; Fall through the air one frame
;
; Used by the routines at #R$D607 and #R$DBEE.
c$D61E INC A         ;
 $D61F INC A         ;
 $D620 LD ($C872),A  ;
 $D623 LD A,($C87B)  ;
 $D626 BIT 2,A       ;
 $D628 JR NZ,$D639   ;
 $D62A LD A,($CFCB)  ;
 $D62D DEC A         ;
 $D62E AND A         ;
 $D62F JR NZ,$D633   ;
 $D631 LD A,$0C      ;
*$D633 LD ($CFCB),A  ;
 $D636 CALL $DB01    ;
*$D639 LD HL,$62D6   ;
 $D63C PUSH HL       ;
 $D63D LD BC,$0006   ;
 $D640 ADD HL,BC     ;
 $D641 POP DE        ;
 $D642 LD BC,$004E   ;
 $D645 LDIR          ;
 $D647 EX DE,HL      ;
 $D648 LD DE,($C872) ;
 $D64C LD A,$1A      ;
 $D64E ADD A,E       ;
 $D64F LD E,A        ;
 $D650 CALL $D655    ;
 $D653 EXX           ;
 $D654 RET           ;

; Copy a sprite to a working buffer
;
; Used by the routines at #R$D567 and #R$D61E.
;
; DE Co-ordinates of the sprite
; HL Address to copy to
c$D655 CALL $E8D2    ;
 $D658 LD C,$02      ;
*$D65A PUSH DE       ;
 $D65B LD B,$03      ;
*$D65D LD A,(DE)     ;
 $D65E LD (HL),A     ;
 $D65F INC HL        ;
 $D660 INC E         ;
 $D661 DJNZ $D65D    ;
 $D663 POP DE        ;
 $D664 INC D         ;
 $D665 DEC C         ;
 $D666 JR NZ,$D65A   ;
 $D668 RET           ;

; Convert a sprite ID to its graphic address
;
; Used by the routine at #R$E544.
;
; A The sprite ID
; DE On exit, holds a pointer to the graphic
c$D669 ADD A,A       ; Double the ID to get an appropriate word offset.
 $D66A LD E,A        ; { Put this in #REGde.
 $D66B LD D,$00      ; }
 $D66D LD HL,$AE60   ; { Add the base offset for the sprite buffer at #R$AE60.
 $D670 ADD HL,DE     ; }
 $D671 LD E,(HL)     ; { Put the found address in #REGde.
 $D672 INC HL        ;
 $D673 LD D,(HL)     ; }
 $D674 RET           ; Return.

; Length (in bytes) of one frame of the currently processing sprite
g$D675 DEFB $00,$00

; Copy a sprite's data to a graphic buffer
;
; Used by the routine at #R$E544.
;
; DE The sprite data
; HL The buffer to copy the data to
c$D677 LD A,(DE)     ; Get the first byte
 $D678 AND $0C       ; { Extract bits 2-3 (the height) and store it #REGc.
 $D67A RRCA          ;
 $D67B RRCA          ;
 $D67C LD C,A        ; }
 $D67D INC A         ; { Copy this plus one into the graphic data.
 $D67E LD (HL),A     ; }
 $D67F INC HL        ; Move to the next position in the buffer. 
 $D680 LD A,(DE)     ; { Extract bits 0-2 (the width) into #REGb
 $D681 AND $03       ;
 $D683 LD B,A        ; }
 $D684 LD (HL),A     ; Copy this into the graphic data.
 $D685 SLA C         ; { Multiply #REGc by 8 and store it in #REGa.
 $D687 SLA C         ;
 $D689 SLA C         ;
 $D68B XOR A         ;
*$D68C ADD A,C       ; }
 $D68D DJNZ $D68C    ; Loop back while there is more to do.
 $D68F LD C,A        ; { Put the height in #REGbc.
 $D690 LD B,$00      ; }
 $D692 LD ($D675),BC ; Store this in #R$D675.
 $D696 INC HL        ; { Move to the next position in the buffer and store it.
 $D697 PUSH HL       ; }
 $D698 LD B,$F0      ; { Initialize the next #N$F0 bytes in the buffer with 0.L
 $D69A XOR A         ; 
*$D69B LD (HL),A     ; 
 $D69C INC HL        ; 
 $D69D DJNZ $D69B    ; }
 $D69F POP HL        ; Restore #REGhl which points to the next place in the buffer.
 $D6A0 PUSH HL       ; Store this.
 $D6A1 LD BC,$0018   ; Increment by #N$18 for each iteration.
 $D6A4 ADD HL,BC     ; Add the next offset.
 $D6A5 INC DE        ; Move to the next byte in the sprite data.
 $D6A6 EX DE,HL      ; Copy from the sprite data to the buffer.
 $D6A7 LD BC,($D675) ; Get the length.
 $D6AB LDIR          ; Do the copy.
 $D6AD EX DE,HL      ; Make #REGde the next place to copy from.
 $D6AE POP HL        ; Restore #REGhl.
 $D6AF LD BC,$0090   ; Increment by #N$90 for each iteration.
 $D6B2 ADD HL,BC     ; Add the next offset.
 $D6B3 EX DE,HL      ; Copy from the sprite data to the buffer.
 $D6B4 LD BC,($D675) ; Get the length.
 $D6B8 LDIR          ; { Do the copy and return.
 $D6BA RET           ; }

; Current X co-ordinate for the vertical sprite being drawn
g$D6BB DEFB $00

; Current Y co-ordinate for the vertical sprite being drawn
;
; Used by the routine at #R$D7E7
g$D6BC DEFB $00

; Pointer to current vertical sprite being drawn
;
; Used by the routine at #R$D7E7
w$D6BD DEFW $DEDA

; Move vertical objects in the room
;
; Used by the routine at #R$E592.
;
; A Flags for the object
; IY Pointer to the room's sprite table
c$D6BF AND A         ;
 $D6C0 RET Z         ;
 $D6C1 LD B,A        ;
*$D6C2 PUSH BC       ;
 $D6C3 LD D,(IY+$04) ;
 $D6C6 LD E,(IY+$00) ;
 $D6C9 DEC (IY+$06)  ;
 $D6CC JR NZ,$D716   ;
 $D6CE LD A,(IY+$07) ;
 $D6D1 LD (IY+$06),A ;
 $D6D4 BIT 7,D       ;
 $D6D6 JR NZ,$D6FA   ;
 $D6D8 LD A,D        ;
 $D6D9 AND $07       ;
 $D6DB JR Z,$D6E0    ;
 $D6DD DEC D         ;
 $D6DE JR $D716      ;
*$D6E0 LD A,E        ;
 $D6E1 CP (IY+$02)   ;
 $D6E4 JR NZ,$D6EA   ;
 $D6E6 LD D,$81      ;
 $D6E8 JR $D716      ;
*$D6EA PUSH DE       ;
 $D6EB LD A,($D6BB)  ;
 $D6EE DEC A         ;
 $D6EF ADD A,E       ;
 $D6F0 LD E,A        ;
 $D6F1 CALL $D7D6    ;
 $D6F4 POP DE        ;
 $D6F5 DEC E         ;
 $D6F6 LD D,$03      ;
 $D6F8 JR $D716      ;
*$D6FA LD A,D        ;
 $D6FB AND $07       ;
 $D6FD CP $04        ;
 $D6FF JR Z,$D704    ;
 $D701 INC D         ;
 $D702 JR $D716      ;
*$D704 LD A,E        ;
 $D705 CP (IY+$03)   ;
 $D708 JR NZ,$D70E   ;
 $D70A LD D,$03      ;
 $D70C JR $D716      ;
*$D70E PUSH DE       ;
 $D70F CALL $D7D6    ;
 $D712 POP DE        ;
 $D713 LD D,$81      ;
 $D715 INC E         ;
*$D716 LD (IY+$00),E ;
 $D719 LD A,(IY+$04) ;
 $D71C AND $40       ;
 $D71E OR D          ;
 $D71F LD (IY+$04),A ;
 $D722 CALL $D7E7    ;
 $D725 POP BC        ;
 $D726 LD DE,$0008   ;
 $D729 ADD IY,DE     ;
 $D72B DJNZ $D6C2    ;
 $D72D RET           ;

; Current X co-ordinate for the horizontal sprite being drawn
g$D72E DEFB $00

; Current Y co-ordinate for the horizontal sprite being drawn
g$D72F DEFB $00

; Pointer to current horizontal sprite being drawn
w$D730 DEFW $E0BE

; Move horizontal objects in the room
;
; Used by the routine at #R$E592.
;
; A Flags for the object
; IY Pointer to the room's sprite table
c$D732 AND A         ;
 $D733 RET Z         ;
 $D734 LD B,A        ;
*$D735 PUSH BC       ;
 $D736 LD E,(IY+$04) ;
 $D739 LD D,(IY+$01) ;
 $D73C DEC (IY+$06)  ;
 $D73F JR NZ,$D78A   ;
 $D741 LD A,(IY+$07) ;
 $D744 LD (IY+$06),A ;
 $D747 BIT 7,E       ;
 $D749 JR NZ,$D76E   ;
 $D74B LD A,E        ;
 $D74C AND $07       ;
 $D74E CP $07        ;
 $D750 JR Z,$D755    ;
 $D752 INC E         ;
 $D753 JR $D78A      ;
*$D755 LD A,D        ;
 $D756 CP (IY+$02)   ;
 $D759 JR NZ,$D75F   ;
 $D75B LD E,$80      ;
 $D75D JR $D78A      ;
*$D75F DEC D         ;
 $D760 PUSH DE       ;
 $D761 LD A,($D72F)  ;
 $D764 ADD A,D       ;
 $D765 LD D,A        ;
 $D766 CALL $D7A2    ;
 $D769 POP DE        ;
 $D76A LD E,$04      ;
 $D76C JR $D78A      ;
*$D76E LD A,E        ;
 $D76F AND $07       ;
 $D771 CP $03        ;
 $D773 JR Z,$D778    ;
 $D775 INC E         ;
 $D776 JR $D78A      ;
*$D778 LD A,D        ;
 $D779 CP (IY+$03)   ;
 $D77C JR NZ,$D782   ;
 $D77E LD E,$04      ;
 $D780 JR $D78A      ;
*$D782 PUSH DE       ;
 $D783 CALL $D7A2    ;
 $D786 POP DE        ;
 $D787 LD E,$80      ;
 $D789 INC D         ;
*$D78A LD (IY+$01),D ;
 $D78D LD A,(IY+$04) ;
 $D790 AND $40       ;
 $D792 OR E          ;
 $D793 LD (IY+$04),A ;
 $D796 CALL $D7B7    ;
 $D799 POP BC        ;
 $D79A LD DE,$0008   ;
 $D79D ADD IY,DE     ;
 $D79F DJNZ $D735    ;
 $D7A1 RET           ;

; Colour in a sprite vertically
;
; Used by the routine at #R$D732.
;
; IY Pointer to the sprite attribute data
c$D7A2 LD E,(IY+$00) ;
 $D7A5 CALL $E8E3    ;
 $D7A8 EX DE,HL      ;
 $D7A9 LD DE,$0020   ;
 $D7AC LD A,($D72E)  ;
 $D7AF LD B,A        ;
 $D7B0 LD A,$45      ;
*$D7B2 LD (HL),A     ;
 $D7B3 ADD HL,DE     ;
 $D7B4 DJNZ $D7B2    ;
 $D7B6 RET           ;

; Draw a horizontally moving sprite
;
; Used by the routine at #R$D732.
;
; E The nth sprite to draw
c$D7B7 LD A,E        ;
 $D7B8 AND $07       ;
 $D7BA ADD A,A       ;
 $D7BB ADD A,A       ;
 $D7BC ADD A,A       ;
 $D7BD LD C,A        ;
 $D7BE LD B,$00      ;
 $D7C0 LD L,A        ;
 $D7C1 LD H,B        ;
 $D7C2 ADD HL,HL     ;
 $D7C3 ADD HL,HL     ;
 $D7C4 ADD HL,HL     ;
 $D7C5 ADD HL,BC     ;
 $D7C6 LD BC,($D730) ;
 $D7CA ADD HL,BC     ;
 $D7CB LD E,(IY+$00) ;
 $D7CE LD BC,($D72E) ;
 $D7D2 CALL $E96B    ;
 $D7D5 RET           ;

; Colour in a sprite horizontally
;
; Used by the routine at #R$D6BF.
;
; IY pointer to sprite attribute data
c$D7D6 LD D,(IY+$01) ;
 $D7D9 CALL $E8E3    ;
 $D7DC LD A,($D6BC)  ;
 $D7DF LD B,A        ;
 $D7E0 LD A,$45      ;
*$D7E2 LD (DE),A     ;
 $D7E3 INC E         ;
 $D7E4 DJNZ $D7E2    ;
 $D7E6 RET           ;

; Draw a vertically moving sprite
;
; Used by the routine at #R$D6BF.
;
; DE Position to draw the sprite
c$D7E7 LD A,($D6BC)  ;
 $D7EA LD B,A        ;
 $D7EB LD HL,($D6BD) ;
 $D7EE LD A,D        ;
 $D7EF AND $07       ;
 $D7F1 ADD A,A       ;
 $D7F2 LD C,A        ;
 $D7F3 XOR A         ;
*$D7F4 ADD A,C       ;
 $D7F5 DJNZ $D7F4    ;
 $D7F7 LD C,A        ;
 $D7F8 BIT 0,D       ;
 $D7FA JR NZ,$D803   ;
 $D7FC LD A,$18      ;
 $D7FE SUB C         ;
 $D7FF LD C,A        ;
 $D800 ADD HL,BC     ;
 $D801 JR $D808      ;
*$D803 LD A,$90      ;
 $D805 SUB C         ;
 $D806 LD C,A        ;
 $D807 ADD HL,BC     ;
*$D808 LD D,(IY+$01) ;
 $D80B LD BC,($D6BB) ;
 $D80F CALL $E96B    ;
 $D812 RET           ;

; Offset for current moving object table
w$D813 DEFW $0000

; Copy a sprite's graphic into a working buffer
;
; Used by the routine at #R$E544.
;
; HL Buffer to copy the sprite to
; DE Address of the sprite's graphic data
; BC Location of the sprite
c$D815 LD A,(DE)     ;
 $D816 AND $0C       ;
 $D818 RRCA          ;
 $D819 RRCA          ;
 $D81A LD C,A        ;
 $D81B LD (HL),A     ;
 $D81C INC HL        ;
 $D81D LD A,(DE)     ;
 $D81E AND $03       ;
 $D820 INC A         ;
 $D821 LD B,A        ;
 $D822 LD (HL),A     ;
 $D823 LD ($D72E),BC ;
 $D827 LD A,C        ;
 $D828 ADD A,A       ;
 $D829 ADD A,A       ;
 $D82A ADD A,A       ;
 $D82B LD ($D813),A  ;
 $D82E LD C,A        ;
 $D82F XOR A         ;
*$D830 ADD A,C       ;
 $D831 DJNZ $D830    ;
 $D833 LD ($D814),A  ;
 $D836 INC DE        ;
 $D837 PUSH DE       ;
 $D838 INC HL        ;
 $D839 LD ($D730),HL ;
 $D83C LD E,L        ;
 $D83D LD D,H        ;
 $D83E INC DE        ;
 $D83F LD (HL),$00   ;
 $D841 LD BC,$023F   ;
 $D844 LDIR          ;
 $D846 POP DE        ;
 $D847 LD A,$04      ;
 $D849 LD HL,($D730) ;
 $D84C LD BC,$0048   ;
*$D84F EX AF,AF'     ;
 $D850 PUSH BC       ;
 $D851 PUSH HL       ;
 $D852 CALL $DB83    ;
 $D855 POP HL        ;
 $D856 POP BC        ;
 $D857 ADD HL,BC     ;
 $D858 EX AF,AF'     ;
 $D859 DEC A         ;
 $D85A JR NZ,$D84F   ;
 $D85C LD BC,$0048   ;
 $D85F LD HL,($D730) ;
 $D862 LD A,$02      ;
*$D864 EX AF,AF'     ;
 $D865 PUSH BC       ;
 $D866 PUSH HL       ;
 $D867 CALL $DB9B    ;
 $D86A POP HL        ;
 $D86B POP BC        ;
 $D86C ADD HL,BC     ;
 $D86D EX AF,AF'     ;
 $D86E ADD A,$02     ;
 $D870 CP $0A        ;
 $D872 JR NZ,$D864   ;
 $D874 LD A,$04      ;
 $D876 LD HL,($D730) ;
 $D879 LD D,H        ;
 $D87A LD E,L        ;
 $D87B LD BC,$0120   ;
 $D87E ADD HL,BC     ;
 $D87F LD BC,$0048   ;
*$D882 EX AF,AF'     ;
 $D883 PUSH BC       ;
 $D884 PUSH DE       ;
 $D885 PUSH HL       ;
 $D886 CALL $D9B0    ;
 $D889 POP HL        ;
 $D88A POP DE        ;
 $D88B POP BC        ;
 $D88C ADD HL,BC     ;
 $D88D EX DE,HL      ;
 $D88E ADD HL,BC     ;
 $D88F EX DE,HL      ;
 $D890 EX AF,AF'     ;
 $D891 DEC A         ;
 $D892 JR NZ,$D882   ;
 $D894 RET           ;

; Respond to Dan moving
;
; Used by the routine at #R$CFD9.
c$D895 LD A,($C87B)  ;
 $D898 BIT 2,A       ;
 $D89A JP NZ,$D92C   ;
 $D89D LD DE,($C872) ;
 $D8A1 LD A,$1A      ;
 $D8A3 ADD A,E       ;
 $D8A4 LD E,A        ;
 $D8A5 CALL $E909    ;
 $D8A8 LD A,($C875)  ;
 $D8AB CP $04        ;
 $D8AD JR Z,$D8B4    ;
 $D8AF CP $03        ;
 $D8B1 JR C,$D8B4    ;
 $D8B3 INC E         ;
*$D8B4 LD A,(DE)     ;
 $D8B5 LD B,A        ;
 $D8B6 INC E         ;
 $D8B7 LD A,(DE)     ;
 $D8B8 LD C,A        ;
 $D8B9 LD HL,$CFCC   ;
 $D8BC LD D,$07      ;
*$D8BE LD E,(HL)     ;
 $D8BF CALL $D9AA    ;
 $D8C2 JR Z,$D917    ;
 $D8C4 INC HL        ;
 $D8C5 DEC D         ;
 $D8C6 JR NZ,$D8BE   ;
 $D8C8 LD A,($CFC9)  ;
 $D8CB LD E,A        ;
 $D8CC CALL $D9AA    ;
 $D8CF JP Z,$DBB8    ;
 $D8D2 LD E,$38      ;
 $D8D4 CALL $D9AA    ;
 $D8D7 JP Z,$DE0B    ;
 $D8DA LD E,$68      ;
 $D8DC CALL $D9AA    ;
 $D8DF JP Z,$DE1B    ;
 $D8E2 LD E,$60      ;
 $D8E4 CALL $D9AA    ;
 $D8E7 JP Z,$DE28    ;
 $D8EA LD E,$02      ;
 $D8EC CALL $D9AA    ;
 $D8EF JR NZ,$D8FE   ;
 $D8F1 LD A,($CFCA)  ;
 $D8F4 CP $08        ;
 $D8F6 JP NC,$D2F0   ;
 $D8F9 LD A,$0D      ;
 $D8FB JP $D919      ;
*$D8FE LD E,$4F      ;
 $D900 CALL $D9AA    ;
 $D903 JR Z,$D938    ;
 $D905 LD A,($C874)  ;
 $D908 LD B,A        ;
 $D909 AND $51       ;
 $D90B JR NZ,$D912   ;
 $D90D LD A,$18      ;
 $D90F LD ($CFCB),A  ;
*$D912 LD A,B        ;
 $D913 SET 6,A       ;
 $D915 JR $D94D      ;
*$D917 LD A,$0E      ;
*$D919 LD ($DBED),A  ;
 $D91C LD A,($C872)  ;
 $D91F AND $07       ;
 $D921 CP $06        ;
 $D923 JR NZ,$D950   ;
 $D925 LD A,($C874)  ;
 $D928 AND $11       ;
 $D92A JR NZ,$D944   ;
*$D92C LD A,($C876)  ;
 $D92F CP $1C        ;
 $D931 JR C,$D944    ;
 $D933 CALL $CD8A    ;
 $D936 JR $D944      ;
*$D938 LD A,$0D      ;
 $D93A LD ($DBED),A  ;
 $D93D LD A,($C874)  ;
 $D940 SET 7,A       ;
 $D942 JR $D94D      ;
*$D944 XOR A         ;
 $D945 LD ($C876),A  ;
 $D948 LD A,($C874)  ;
 $D94B AND $22       ;
*$D94D LD ($C874),A  ;
; This entry point is used by the routine at #R$D2F0.
*$D950 RET           ;

; Move into a new 8x8 cell
;
; Used by the routines at #R$D3EC and #R$D4B5.
c$D951 LD A,($C872)  ;
 $D954 LD E,A        ;
 $D955 INC E         ;
 $D956 INC E         ;
 $D957 CALL $E909    ;
 $D95A EX DE,HL      ;
 $D95B LD DE,$0020   ;
 $D95E LD A,($C876)  ;
 $D961 CP $05        ;
 $D963 JR C,$D96F    ;
 $D965 LD A,($C872)  ;
 $D968 AND $07       ;
 $D96A CP $06        ;
 $D96C JR Z,$D96F    ;
 $D96E ADD HL,DE     ;
*$D96F LD B,(HL)     ;
 $D970 ADD HL,DE     ;
 $D971 LD C,(HL)     ;
 $D972 ADD HL,DE     ;
 $D973 LD D,(HL)     ;
 $D974 LD HL,$CFD3   ;
 $D977 LD A,$06      ;
*$D979 EX AF,AF'     ;
 $D97A LD E,(HL)     ;
 $D97B CALL $D9A7    ;
 $D97E RET Z         ;
 $D97F INC HL        ;
 $D980 EX AF,AF'     ;
 $D981 DEC A         ;
 $D982 JR NZ,$D979   ;
 $D984 LD E,$38      ;
 $D986 CALL $D9A7    ;
 $D989 JP Z,$DE0B    ;
 $D98C LD E,$68      ;
 $D98E CALL $D9A7    ;
 $D991 JP Z,$DE1B    ;
 $D994 LD E,$60      ;
 $D996 CALL $D9A7    ;
 $D999 JP Z,$DE28    ;
 $D99C LD A,($CFC9)  ;
 $D99F LD E,A        ;
 $D9A0 CALL $D9A7    ;
 $D9A3 JP Z,$DBB8    ;
 $D9A6 RET           ;

; Set the zero flag if D equals E
;
; Used by the routine at #R$D951.
c$D9A7 LD A,D        ;
 $D9A8 CP E          ;
 $D9A9 RET Z         ;

; Set the zero flag if B or C equals E
;
; Used by the routines at #R$CD5C, #R$D567 and #R$D895.
c$D9AA LD A,C        ;
 $D9AB CP E          ;
 $D9AC RET Z         ;
 $D9AD LD A,B        ;
 $D9AE CP E          ;
 $D9AF RET           ;

; Reverse direction of a horizontally moving sprite
;
; Used by the routine at #R$D815.
c$D9B0 PUSH HL       ;
 $D9B1 LD A,($D72F)  ;
 $D9B4 LD B,A        ;
 $D9B5 PUSH HL       ;
 $D9B6 EXX           ;
 $D9B7 POP HL        ;
 $D9B8 LD C,A        ;
 $D9B9 LD B,$00      ;
 $D9BB ADD HL,BC     ;
 $D9BC DEC HL        ;
 $D9BD PUSH HL       ;
 $D9BE EXX           ;
 $D9BF POP HL        ;
 $D9C0 LD A,($D813)  ;
 $D9C3 LD C,A        ;
*$D9C4 PUSH BC       ;
*$D9C5 LD A,(DE)     ;
 $D9C6 LD (HL),A     ;
 $D9C7 DEC HL        ;
 $D9C8 INC DE        ;
 $D9C9 DJNZ $D9C5    ;
 $D9CB EXX           ;
 $D9CC ADD HL,BC     ;
 $D9CD PUSH HL       ;
 $D9CE EXX           ;
 $D9CF POP HL        ;
 $D9D0 POP BC        ;
 $D9D1 DEC C         ;
 $D9D2 JR NZ,$D9C4   ;
 $D9D4 POP HL        ;
 $D9D5 LD A,($D814)  ;
 $D9D8 LD C,A        ;
 $D9D9 LD E,$08      ;
*$D9DB LD B,E        ;
 $D9DC LD A,(HL)     ;
*$D9DD RRA           ;
 $D9DE RL D          ;
 $D9E0 DJNZ $D9DD    ;
 $D9E2 LD (HL),D     ;
 $D9E3 INC HL        ;
 $D9E4 DEC C         ;
 $D9E5 JR NZ,$D9DB   ;
 $D9E7 RET           ;

; x co-ordinate of the raft
g$D9E8 DEFB $00

; Animation frame of the raft (0-3)
g$D9E9 DEFB $00

; Current room the raft is in
g$D9EA DEFB $00,$01

; Update the raft
;
; Used by the routines at #R$C800 and #R$D3EC.
c$D9EC LD A,($D9EA)  ;
 $D9EF LD B,A        ;
 $D9F0 LD A,($CFCA)  ;
 $D9F3 LD C,A        ;
 $D9F4 LD DE,($D9E8) ;
 $D9F8 LD HL,$D9EB   ;
 $D9FB DEC (HL)      ;
 $D9FC JR NZ,$DA1B   ;
 $D9FE LD (HL),$03   ;
 $DA00 INC E         ;
 $DA01 LD A,E        ;
 $DA02 CP $04        ;
 $DA04 JR NZ,$DA37   ;
 $DA06 LD E,$00      ;
 $DA08 DEC D         ;
 $DA09 LD A,D        ;
 $DA0A CP $FC        ;
 $DA0C JR NZ,$DA37   ;
 $DA0E LD D,$1C      ;
 $DA10 INC B         ;
 $DA11 LD A,B        ;
 $DA12 AND $07       ;
 $DA14 LD B,A        ;
 $DA15 LD A,C        ;
 $DA16 CP B          ;
 $DA17 JR NZ,$DA1B   ;
 $DA19 LD D,$1F      ;
*$DA1B LD A,C        ;
 $DA1C CP $08        ;
 $DA1E JR NC,$DA33   ;
 $DA20 INC A         ;
 $DA21 CP B          ;
 $DA22 JR C,$DA2E    ;
 $DA24 LD A,B        ;
 $DA25 CP $02        ;
 $DA27 JR C,$DA33    ;
 $DA29 LD A,C        ;
 $DA2A DEC A         ;
 $DA2B CP B          ;
 $DA2C JR C,$DA33    ;
*$DA2E LD A,C        ;
 $DA2F DEC A         ;
 $DA30 AND $07       ;
 $DA32 LD B,A        ;
*$DA33 LD A,B        ;
 $DA34 LD ($D9EA),A  ;
*$DA37 LD ($D9E8),DE ;
 $DA3B LD A,C        ;
 $DA3C CP B          ;
 $DA3D RET NZ        ;
; The raft is in the current room, so draw it
 $DA3E LD A,E        ; Get the X co-ordinate of the raft graphic.
 $DA3F ADD A,A       ; { Multiply by 32 to get an appropriate offset.
 $DA40 ADD A,A       ;
 $DA41 ADD A,A       ;
 $DA42 ADD A,A       ;
 $DA43 ADD A,A       ; }
 $DA44 LD C,A        ; { Put this in #REGbc.
 $DA45 LD B,$00      ; }
 $DA47 LD HL,$6899   ; { Add the offset of the raft graphic. (#R$6899)
 $DA4A ADD HL,BC     ; }
 $DA4B LD C,D        ; Get the y co-ordinate of the raft.
 $DA4C LD DE,$5040   ; Get the basic y screen position of the raft.
 $DA4F EX DE,HL      ;
 $DA50 LD A,C        ;
 $DA51 CP $20        ;
 $DA53 JR NC,$DA56   ;
 $DA55 ADD HL,BC     ;
*$DA56 LD B,$04      ;
*$DA58 LD A,C        ;
 $DA59 CP $20        ;
 $DA5B JR C,$DA66    ;
 $DA5D PUSH HL       ;
 $DA5E LD HL,$0008   ;
 $DA61 ADD HL,DE     ;
 $DA62 EX DE,HL      ;
 $DA63 POP HL        ;
 $DA64 JR $DA7A      ;
*$DA66 PUSH BC       ;
 $DA67 PUSH HL       ;
 $DA68 LD B,$08      ;
*$DA6A LD A,(DE)     ;
 $DA6B LD (HL),A     ;
 $DA6C INC H         ;
 $DA6D INC DE        ;
 $DA6E DJNZ $DA6A    ;
 $DA70 POP HL        ;
 $DA71 POP BC        ;
 $DA72 LD H,$5A      ;
 $DA74 LD A,$02      ;
 $DA76 LD (HL),A     ;
 $DA77 LD H,$50      ;
 $DA79 INC L         ;
*$DA7A INC C         ;
 $DA7B DJNZ $DA58    ;
 $DA7D LD A,C        ;
 $DA7E CP $20        ;
 $DA80 RET NC        ;
 $DA81 LD H,$5A      ;
 $DA83 LD A,$45      ;
 $DA85 LD (HL),A     ;
 $DA86 RET           ;

; Current type of tune being played
b$DA87 DEFB $05

; Current note in a tune being played
b$DA88 DEFB $46,$EE

; Current state of playing a sound (used by #R$DA8D)
;
; If bit 0 is not set, play a tune instead
; .
; If bit 1 is not set, the "lose a life" effect should be played instead
b$DA8A DEFB $00

; Next action to take during playing a sound (used by #R$DA8D)
w$DA8B DEFW $DAFA

; Play a note or a sound effect
;
; Used by the routines at #R$C800, #R$CA5B, #R$CDD3 and #R$DD8D.
c$DA8D LD A,($DA8A)  ;
 $DA90 BIT 1,A       ;
 $DA92 JP NZ,$DAE5   ;
 $DA95 BIT 0,A       ;
 $DA97 JP NZ,$DB17   ;
 $DA9A LD HL,($DA8B) ;
 $DA9D JP (HL)       ;

; Play a sound
c$DA9E LD HL,$DAFA   ;
 $DAA1 LD ($DA8B),HL ;
 $DAA4 LD A,($DA87)  ;
; This entry point is used by the routine at #R$DB17.
*$DAA7 ADD A,A       ;
 $DAA8 LD E,A        ;
 $DAA9 LD D,$00      ;
 $DAAB LD HL,$6919   ;
 $DAAE ADD HL,DE     ;
 $DAAF LD E,(HL)     ;
 $DAB0 INC HL        ;
 $DAB1 LD B,(HL)     ;

; Beep
;
; Used by the routines at #R$DAE5 and #R$DDE0.
;
; B Frequency
; DE Length
c$DAB2 LD A,($E800)  ;
*$DAB5 PUSH DE       ;
 $DAB6 XOR $10       ;
 $DAB8 OUT ($FE),A   ;
 $DABA LD C,A        ;
*$DABB DEC DE        ;
 $DABC LD A,D        ;
 $DABD OR E          ;
 $DABE JR NZ,$DABB   ;
 $DAC0 POP DE        ;
 $DAC1 LD A,C        ;
 $DAC2 DJNZ $DAB5    ;
 $DAC4 LD ($E800),A  ;
 $DAC7 RET           ;
 $DAC8 LD HL,$DAFA   ;
 $DACB LD ($DA8B),HL ;
 $DACE LD DE,$000A   ;
 $DAD1 LD B,$1E      ;
 $DAD3 CALL $DAB2    ;
 $DAD6 LD BC,$0740   ;
 $DAD9 CALL $D4AF    ;
 $DADC LD DE,$0014   ;
 $DADF LD B,$14      ;
 $DAE1 CALL $DAB2    ;
 $DAE4 RET           ;

; Start the "lose a life" sound effect
;
; Used by the routine at #R$DA8D.
c$DAE5 LD HL,$EE34   ;
 $DAE8 LD B,$09      ;
*$DAEA LD E,(HL)     ;
 $DAEB LD D,$00      ;
 $DAED INC HL        ;
 $DAEE LD B,(HL)     ;
 $DAEF PUSH HL       ;
 $DAF0 PUSH BC       ;
 $DAF1 CALL $DAB2    ;
 $DAF4 POP BC        ;
 $DAF5 POP HL        ;
 $DAF6 INC HL        ;
 $DAF7 DJNZ $DAEA    ;
 $DAF9 RET           ;

; Pause for one second
;
; Used by the routines at #R$CA5B, #R$CDD3, #R$DB17 and #R$DD8D.
c$DAFA LD BC,$0A84   ; Load #REGbc with about one second's worth of pause.
 $DAFD CALL $D4AF    ; { Pause and return.
 $DB00 RET           ; }

; Select a sound effect to play
;
; Used by the routines at #R$C92A, #R$CD24, #R$CD9A, #R$CEF0, #R$D123, #R$D567,
; #R$D61E, #R$DE52, #R$E663 and #R$E775.
;
; A Type of sound effect
c$DB01 LD ($DA87),A  ;
 $DB04 LD HL,$DA9E   ;
 $DB07 LD ($DA8B),HL ;
 $DB0A RET           ;

; Select a tune to play
;
; Used by the routines at #R$CA5B, #R$CD9A, #R$CF77, #R$D1CE, #R$DBB8, #R$DBEE,
; #R$DE28 and #R$DE87.
;
; HL Pointer to the tune data
c$DB0B LD ($DA88),HL ;
 $DB0E LD A,($DA8A)  ;
 $DB11 SET 0,A       ;
 $DB13 LD ($DA8A),A  ;
 $DB16 RET           ;

; Play a note of a tune
;
; Used by the routine at #R$DA8D.
c$DB17 LD HL,($DA88) ;
 $DB1A LD A,(HL)     ;
 $DB1B INC HL        ;
 $DB1C LD ($DA88),HL ;
 $DB1F CP $FF        ;
 $DB21 JR Z,$DB29    ;
 $DB23 AND A         ;
 $DB24 JR Z,$DAFA    ;
 $DB26 JP $DAA7      ;
*$DB29 LD HL,$DAFA   ;
 $DB2C LD ($DA8B),HL ;
 $DB2F LD A,($DA8A)  ;
 $DB32 RES 0,A       ;
 $DB34 LD ($DA8A),A  ;
 $DB37 RET           ;

; Return with the carry flag set if Dan has moved over a glowing item
;
; Used by the routines at #R$D1CE and #R$DE87.
;
; DE Current co-ordinates.
c$DB38 PUSH HL       ;
 $DB39 LD HL,($C872) ;
 $DB3C LD A,H        ;
 $DB3D SUB D         ;
 $DB3E ADD A,$03     ;
 $DB40 CP $07        ;
 $DB42 JR NC,$DB50   ;
 $DB44 LD A,L        ;
 $DB45 SRL A         ;
 $DB47 SRL A         ;
 $DB49 SRL A         ;
 $DB4B SUB E         ;
 $DB4C ADD A,$03     ;
 $DB4E CP $07        ;
*$DB50 POP HL        ;
 $DB51 RET           ;

; Redefine keys confirmation text
;
; "GO AHEAD"
b$DB52 DEFB $17,$0C,$10,$00,$27,$0A,$11,$0E
 $DB5A DEFB $0A,$0D,$FF

; Redefine keys instructions attributes
b$DB5D DEFB $01,$4E,$0B,$01,$00,$0A

; Display the redefine keys instructions
;
; Used by the routine at #R$CA5B.
c$DB63 CALL $E801    ;
 $DB66 LD HL,$FD93   ;
 $DB69 CALL $EEF1    ;
 $DB6C LD HL,$DB5D   ;
 $DB6F CALL $F470    ;
 $DB72 LD HL,$DA8A   ;
 $DB75 LD (HL),$00   ;
 $DB77 CALL $DD8D    ;
 $DB7A LD HL,$DB52   ;
 $DB7D CALL $DDE0    ;
 $DB80 JP $F2BE      ;

; Draw a horizontally moving sprite
;
; Used by the routine at #R$D815.
c$DB83 LD A,($D72F)  ;
 $DB86 DEC A         ;
 $DB87 LD B,A        ;
 $DB88 LD A,($D813)  ;
 $DB8B LD C,A        ;
*$DB8C PUSH BC       ;
*$DB8D LD A,(DE)     ;
 $DB8E LD (HL),A     ;
 $DB8F INC HL        ;
 $DB90 INC DE        ;
 $DB91 DJNZ $DB8D    ;
 $DB93 INC HL        ;
 $DB94 XOR A         ;
 $DB95 LD (HL),A     ;
 $DB96 POP BC        ;
 $DB97 DEC C         ;
 $DB98 JR NZ,$DB8C   ;
 $DB9A RET           ;

; Clear area after a horizontal sprite has moved
;
; Used by the routine at #R$D815.
c$DB9B LD A,($D72F)  ;
 $DB9E LD D,A        ;
 $DB9F LD A,($D813)  ;
 $DBA2 LD C,A        ;
 $DBA3 EX AF,AF'     ;
 $DBA4 LD E,A        ;
 $DBA5 EX AF,AF'     ;
*$DBA6 PUSH HL       ;
 $DBA7 PUSH BC       ;
*$DBA8 AND A         ;
 $DBA9 LD B,D        ;
*$DBAA RR (HL)       ;
 $DBAC INC HL        ;
 $DBAD DJNZ $DBAA    ;
 $DBAF DEC C         ;
 $DBB0 JR NZ,$DBA8   ;
 $DBB2 POP BC        ;
 $DBB3 POP HL        ;
 $DBB4 DEC E         ;
 $DBB5 JR NZ,$DBA6   ;
 $DBB7 RET           ;

; Picked up food
;
; Each item of food scores (ID + 1) * 5 points
;
; Pointer to current room data
c$DBB8 LD E,(IX+$05)  ;
 $DBBB LD D,(IX+$06)  ;
 $DBBE RES 3,(IX+$04) ;
 $DBC2 LD A,(IX+$04)  ;
 $DBC5 AND $07        ;
 $DBC7 PUSH AF        ;
 $DBC8 CALL $DCE8     ;
 $DBCB LD B,(HL)      ;
 $DBCC INC HL         ;
 $DBCD LD C,(HL)      ;
 $DBCE CALL $E897     ;
 $DBD1 POP AF         ;
 $DBD2 INC A          ;
 $DBD3 LD B,A         ;
 $DBD4 ADD A,A        ;
 $DBD5 ADD A,A        ;
 $DBD6 ADD A,B        ;
 $DBD7 LD HL,$C86B    ;
 $DBDA ADD A,(HL)     ;
 $DBDB LD (HL),A      ;
 $DBDC LD HL,$EE46    ;
 $DBDF CALL $DB0B     ;
 $DBE2 LD A,$08       ;
 $DBE4 LD ($C86D),A   ;
 $DBE7 LD A,$C8       ;
 $DBE9 LD ($C86F),A   ;
 $DBEC RET            ;

; Height (in lines) of Dan above the river waterline
g$DBED DEFB $0E

; Dan has fallen in the river
;
; Used by the routine at #R$CFD9.
c$DBEE LD HL,$DA8A   ;
 $DBF1 RES 1,(HL)    ;
 $DBF3 LD HL,$C874   ;
 $DBF6 RES 5,(HL)    ;
 $DBF8 XOR A         ;
 $DBF9 LD ($C880),A  ;
 $DBFC LD HL,$DBED   ;
 $DBFF DEC (HL)      ;
 $DC00 JR NZ,$DC0A   ;
 $DC02 LD HL,$EE63   ;
 $DC05 CALL $DB0B    ;
 $DC08 JR $DC18      ;
*$DC0A LD A,(HL)     ;
 $DC0B CP $0F        ;
 $DC0D JR NC,$DC18   ;
 $DC0F LD A,($C872)  ;
 $DC12 CALL $D61E    ;
 $DC15 JP $D1CE      ;
*$DC18 CP $DC        ;
 $DC1A JR NZ,$DC45   ;
 $DC1C LD A,$0E      ;
 $DC1E LD ($DBED),A  ;
 $DC21 LD HL,$C87E   ;
 $DC24 BIT 6,(HL)    ;
 $DC26 JR Z,$DC41    ;
 $DC28 BIT 1,(HL)    ;
 $DC2A JR NZ,$DC41   ;
 $DC2C RES 6,(HL)    ;
 $DC2E LD HL,$1016   ;
 $DC31 LD ($C872),HL ;
 $DC34 LD HL,$C874   ;
 $DC37 LD A,(HL)     ;
 $DC38 AND $02       ;
 $DC3A LD (HL),A     ;
 $DC3B LD A,$2B      ;
 $DC3D CALL $CBBD    ;
 $DC40 RET           ;
; Dan has drowned. Game over.
*$DC41 POP HL        ;
 $DC42 JP $CDDA      ;
; Dan is submerged; display the "air bubble" graphic while drowning
*$DC45 LD A,($DBED)  ;
 $DC48 CPL           ;
 $DC49 SRL A         ;
 $DC4B CP $0C        ;
 $DC4D JR C,$DC51    ;
 $DC4F LD A,$0B      ;
*$DC51 ADD A,A       ;
 $DC52 ADD A,A       ;
 $DC53 ADD A,A       ;
 $DC54 LD C,A        ;
 $DC55 LD B,$00      ;
 $DC57 LD HL,$F485   ;
 $DC5A ADD HL,BC     ;
 $DC5B LD A,($C873)  ;
 $DC5E INC A         ;
 $DC5F LD D,A        ;
 $DC60 LD E,$12      ;
 $DC62 LD BC,$0101   ;
 $DC65 CALL $E87A    ;
 $DC68 RET           ;

; List of Dan's frames that mark the lift as moving
b$DC69 DEFB $03,$05,$06,$07

; List of Dan's frames that mark the lift as stopped
b$DC6D DEFB $00,$01,$02,$04

; Check if Dan is standing by the lift
;
; Used by the routines at #R$CC89 and #R$CFD9.
c$DC71 LD DE,($C87C) ;
 $DC75 LD HL,($C872) ;
 $DC78 LD A,($C87B)  ;
 $DC7B AND $01       ;
 $DC7D LD C,A        ;
 $DC7E LD A,($CFCA)  ;
 $DC81 CP D          ;
 $DC82 JR NZ,$DCBC   ;
 $DC84 LD A,L        ;
 $DC85 ADD A,$1A     ;
 $DC87 CP E          ;
 $DC88 JR NZ,$DCBC   ;
 $DC8A LD A,H        ;
 $DC8B SUB $0D       ;
 $DC8D CP $05        ;
 $DC8F JR NC,$DCBC   ;
 $DC91 SET 1,C       ;
 $DC93 LD A,H        ;
 $DC94 CP $0F        ;
 $DC96 JR Z,$DCB5    ;
 $DC98 LD HL,$DC69   ;
 $DC9B CP $0E        ;
 $DC9D JR Z,$DCA8    ;
 $DC9F LD HL,$DC6D   ;
 $DCA2 CP $10        ;
 $DCA4 JR Z,$DCA8    ;
 $DCA6 JR $DCBC      ;
*$DCA8 LD B,$04      ;
 $DCAA LD A,($C875)  ;
*$DCAD CP (HL)       ;
 $DCAE JR Z,$DCB5    ;
 $DCB0 INC HL        ;
 $DCB1 DJNZ $DCAD    ;
 $DCB3 JR $DCBC      ;
*$DCB5 SET 2,C       ;
 $DCB7 LD A,$0D      ;
 $DCB9 LD ($DBED),A  ;
*$DCBC LD A,C        ;
 $DCBD LD ($C87B),A  ;
 $DCC0 RET           ;

; Draw a food item
;
; Used by the routine at #R$CBBD.
;
; IX Pointer to room data
c$DCC1 LD A,(IX+$04) ;
 $DCC4 BIT 3,A       ;
 $DCC6 JR NZ,$DCCC   ;
 $DCC8 LD A,$FF      ;
 $DCCA JR $DCE4      ;
; This entry point is used by the routine at #R$DCF6.
*$DCCC AND $07       ;
 $DCCE PUSH AF       ;
 $DCCF CALL $DCE8    ;
 $DCD2 LD E,(IX+$05) ;
 $DCD5 LD D,(IX+$06) ;
 $DCD8 CALL $E84E    ;
 $DCDB POP AF        ;
 $DCDC LD C,A        ;
 $DCDD LD B,$00      ;
 $DCDF LD HL,$65EA   ;
 $DCE2 ADD HL,BC     ;
 $DCE3 LD A,(HL)     ;
*$DCE4 LD ($CFC9),A  ;
 $DCE7 RET           ;

; Convert a food item ID to its graphic address
;
; Used by the routines at #R$DBB8 and #R$DCC1.
;
; R A ID of the food item
; HL On return, holds the address for the graphic data
c$DCE8 ADD A,A       ;
 $DCE9 LD C,A        ;
 $DCEA LD B,$00      ;
 $DCEC LD HL,$65DA   ;
 $DCEF ADD HL,BC     ;
 $DCF0 LD A,(HL)     ;
 $DCF1 INC HL        ;
 $DCF2 LD H,(HL)     ;
 $DCF3 LD L,A        ;
 $DCF4 RET           ;

; Set bit 0 to denote items are only being drawn for instructions
b$DCF5 DEFB $00

; Display instructions
;
; Used by the routine at #R$CA5B.
c$DCF6 LD HL,$DA8A   ;
 $DCF9 RES 0,(HL)    ;
; Page 1
 $DCFB CALL $E801    ;
 $DCFE LD HL,$F8C7   ;
 $DD01 CALL $EEF1    ;
 $DD04 LD HL,$F525   ;
 $DD07 CALL $F470    ;
 $DD0A CALL $DD8D    ;
 $DD0D LD HL,$F5A0   ;
 $DD10 CALL $DDE0    ;
; Page 2
 $DD13 CALL $E801    ;
 $DD16 LD HL,$FB66   ;
 $DD19 CALL $EEF1    ;
 $DD1C LD HL,$F562   ;
 $DD1F CALL $F470    ;
 $DD22 CALL $DD8D    ;
 $DD25 LD HL,$F5AD   ;
 $DD28 CALL $DDE0    ;
; Page 3
 $DD2B CALL $E801    ;
 $DD2E LD HL,$FCAA   ;
 $DD31 CALL $EEF1    ;
 $DD34 LD HL,$F577   ;
 $DD37 CALL $F470    ;
 $DD3A LD IX,$F505   ;
 $DD3E XOR A         ;
*$DD3F PUSH AF       ;
 $DD40 CALL $DCCC    ;
 $DD43 INC IX        ;
 $DD45 INC IX        ;
 $DD47 POP AF        ;
 $DD48 INC A         ;
 $DD49 CP $08        ;
 $DD4B JR NZ,$DD3F   ;
 $DD4D CALL $DD8D    ;
 $DD50 LD HL,$F5C9   ;
 $DD53 CALL $DDE0    ;
; Page 4
 $DD56 CALL $E801    ;
 $DD59 LD HL,$FD1D   ;
 $DD5C CALL $EEF1    ;
 $DD5F LD HL,$F587   ;
 $DD62 CALL $F470    ;
 $DD65 LD A,$01      ;
 $DD67 LD ($DCF5),A  ;
 $DD6A LD IX,$F51A   ;
 $DD6E LD HL,$F592   ;
 $DD71 CALL $ED06    ;
 $DD74 LD HL,$EB89   ;
 $DD77 LD DE,$0614   ;
 $DD7A CALL $E84E    ;
 $DD7D CALL $DD8D    ;
 $DD80 LD HL,$F5D5   ;
 $DD83 CALL $DDE0    ;
 $DD86 XOR A         ;
 $DD87 LD ($DCF5),A  ;
 $DD8A JP $CA5B      ;

; Wait for the user to press ENTER, then fire a laser ray
;
; Used by the routines at #R$DB63, #R$DCF6 and #R$E62F.
c$DD8D LD HL,$F4E5   ;
 $DD90 CALL $EEF1    ;
 $DD93 LD HL,$F4FE   ;
 $DD96 CALL $ED06    ;
 $DD99 LD BC,$1601   ;
 $DD9C LD DE,$0517   ;
 $DD9F LD A,$B0      ;
 $DDA1 CALL $E8BA    ;
 $DDA4 LD HL,$E6D9   ;
 $DDA7 LD (HL),$7F   ;
 $DDA9 INC HL        ;
 $DDAA LD (HL),$00   ;
 $DDAC LD IY,$F59C   ;
*$DDB0 LD A,($DCF5)  ;
 $DDB3 AND A         ;
 $DDB4 JR Z,$DDBF    ;
 $DDB6 CALL $EF7C    ;
 $DDB9 CALL $DAFA    ;
 $DDBC CALL $E93F    ;
*$DDBF CALL $CB9C    ;
 $DDC2 JR NZ,$DDB0   ;
*$DDC4 CALL $E6F6    ;
 $DDC7 CALL $DA8D    ;
 $DDCA CALL $DAFA    ;
 $DDCD LD A,($DCF5)  ;
 $DDD0 AND A         ;
 $DDD1 JR Z,$DDD9    ;
 $DDD3 CALL $E93F    ;
 $DDD6 CALL $EF7C    ;
*$DDD9 LD A,($E6DA)  ;
 $DDDC AND A         ;
 $DDDD JR NZ,$DDC4   ;
 $DDDF RET           ;

; Display a message and beep
;
; Used by the routines at #R$CA5B, #R$CDD3, #R$DB63 and #R$DCF6.
;
; HL Pointer to message graphic data
c$DDE0 CALL $EEF1    ;
 $DDE3 LD DE,$00FF   ;
 $DDE6 LD B,$AA      ;
 $DDE8 CALL $DAB2    ;
 $DDEB LD DE,$00FF   ;
 $DDEE LD B,$FF      ;
 $DDF0 CALL $DAB2    ;
 $DDF3 RET           ;

; Picked up the plans
;
; Used by the routine at #R$D567.
c$DDF4 LD DE,$0506   ;
 $DDF7 LD BC,$0303   ;
 $DDFA CALL $E897    ;
 $DDFD LD A,$C8      ;
 $DDFF LD HL,$C86B   ;
 $DE02 ADD A,(HL)    ;
 $DE03 LD (HL),A     ;
 $DE04 LD HL,$C87E   ;
 $DE07 SET 1,(HL)    ;
 $DE09 EXX           ;
 $DE0A RET           ;

; Picked up an oxygen tank
;
; Used by the routines at #R$D895 and #R$D951.
c$DE0B RES 0,(IX+$0B) ;
 $DE0F LD HL,$C87E    ;
 $DE12 SET 6,(HL)     ;
 $DE14 LD A,$4B       ;
 $DE16 LD DE,$FE2B    ;
 $DE19 JR $DE3A       ;

; Picked up a credit card
;
; Used by the routines at #R$D895 and #R$D951.
c$DE1B RES 1,(IX+$0B) ;
 $DE1F LD A,R         ;
 $DE21 AND $7F        ;
 $DE23 LD DE,$FE45    ;
 $DE26 JR $DE3A       ;

; Picked up an aerosol
;
; Used by the routines at #R$D895 and #R$D951.
c$DE28 RES 2,(IX+$0B) ;
 $DE2C XOR A          ;
 $DE2D LD ($DE51),A   ;
 $DE30 LD HL,$C87E    ;
 $DE33 SET 5,(HL)     ;
 $DE35 LD A,$19       ;
 $DE37 LD DE,$FE65    ;
; This entry point is used by the routines at #R$DE0B and #R$DE1B.
*$DE3A LD HL,$C86B    ;
 $DE3D ADD A,(HL)     ;
 $DE3E LD (HL),A      ;
 $DE3F EX DE,HL       ;
 $DE40 CALL $DB0B     ;
 $DE43 LD A,($CFCA)   ;
 $DE46 CALL $F3E0     ;
 $DE49 LD BC,$0202    ;
 $DE4C CALL $E897     ;
 $DE4F OR A           ;
 $DE50 RET            ;

; Time left for the aerosol to run
b$DE51 DEFB $00

; Update "aerosol immunity" if it is still active
;
; Used by the routine at #R$C800.
c$DE52 LD HL,$C87E   ;
 $DE55 BIT 5,(HL)    ;
 $DE57 RET Z         ;
 $DE58 BIT 7,(HL)    ;
 $DE5A RET NZ        ;
 $DE5B EX DE,HL      ;
 $DE5C LD HL,$DE51   ;
 $DE5F DEC (HL)      ;
 $DE60 LD A,(HL)     ;
 $DE61 AND A         ;
 $DE62 JR NZ,$DE67   ;
 $DE64 EX DE,HL      ;
 $DE65 RES 5,(HL)    ;
*$DE67 AND $07       ;
 $DE69 LD C,A        ;
 $DE6A LD A,($E800)  ;
 $DE6D AND $F8       ;
 $DE6F OR C          ;
 $DE70 OUT ($FE),A   ;
 $DE72 LD ($E800),A  ;
 $DE75 LD A,C        ;
 $DE76 AND $04       ;
 $DE78 RRA           ;
 $DE79 ADD A,$05     ;
 $DE7B CALL $DB01    ;
 $DE7E RET           ;

; Dynamite graphic in status area
b$DE7F DEFB $00,$02,$09,$18,$30,$60,$C0,$80

; Picked up a special item (test tube or dynamite)
;
; Used by the routine at #R$D1CE.
;
; IX Pointer to current room data
c$DE87 LD E,(IX+$09)  ;
 $DE8A LD D,(IX+$0A)  ;
 $DE8D DEC E          ;
 $DE8E DEC E          ;
 $DE8F CALL $DB38     ;
 $DE92 JR NC,$DEB8    ;
 $DE94 RES 5,(IX+$04) ;
 $DE98 INC E          ;
 $DE99 INC E          ;
 $DE9A LD BC,$0201    ;
 $DE9D CALL $E897     ;
 $DEA0 LD HL,$C878    ;
 $DEA3 LD A,(HL)      ;
 $DEA4 INC (HL)       ;
 $DEA5 LD E,$17       ;
 $DEA7 LD D,A         ;
 $DEA8 LD BC,$0101    ;
 $DEAB LD HL,$DE7F    ;
 $DEAE CALL $E87A     ;
 $DEB1 LD A,$64       ;
 $DEB3 LD HL,$EE8B    ;
 $DEB6 JR $DED1       ;
*$DEB8 LD E,(IX+$02)  ;
 $DEBB LD D,(IX+$03)  ;
 $DEBE LD BC,$0102    ;
 $DEC1 CALL $E897     ;
 $DEC4 RES 4,(IX+$04) ;
 $DEC8 LD HL,$C86C    ;
 $DECB INC (HL)       ;
 $DECC LD A,$32       ;
 $DECE LD HL,$EEBD    ;
*$DED1 LD ($C86B),A   ;
 $DED4 CALL $DB0B     ;
 $DED7 RET            ;

; Moving graphics buffer 0
;
; Used by the routine at #R$D677
g$DED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFC8 DEFB $00,$00

; Moving graphics buffer 1
;
; Used by the routine at #R$D677
g$DFCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E002 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E00A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E012 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E01A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E022 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E02A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E032 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E03A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E042 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E04A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E052 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E05A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E062 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E06A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E072 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E07A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E082 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E08A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E092 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E09A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0BA DEFB $00,$00

; Moving graphics buffer 2
;
; Used by the routine at #R$D815
g$E0BC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0CC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0D4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0DC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0EC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0FC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E104 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E10C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E114 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E11C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E124 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E12C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E134 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E13C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E144 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E14C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E154 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E15C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E164 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E16C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E174 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E17C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E184 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E18C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E194 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E19C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1AC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1B4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1BC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1CC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1D4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1DC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1EC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1FC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E204 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E20C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E214 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E21C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E224 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E22C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E234 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E23C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E244 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E24C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E254 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E25C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E264 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E26C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E274 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E27C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E284 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E28C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E294 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E29C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2AC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2B4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2BC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2CC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2D4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2DC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2EC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2FC DEFB $00,$00

; Moving graphics buffer 3
;
; Used by the routine at #R$D815
g$E2FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E306 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E30E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E316 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E31E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E326 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E32E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E336 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E33E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E346 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E34E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E356 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E35E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E366 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E36E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E376 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E37E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E386 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E38E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E396 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E39E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3A6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3AE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3B6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3BE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E3FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E406 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E40E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E416 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E41E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E426 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E42E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E436 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E43E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E446 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E44E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E456 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E45E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E466 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E46E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E476 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E47E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E486 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E48E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E496 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E49E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4A6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4AE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4B6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4BE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E4FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E506 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E50E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E516 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E51E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E526 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E52E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E536 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E53E DEFB $00,$00

; Count of moving objects in the room
;
; These are set up in the routine at #R$E544 and accessed in the routine at
; #R$E592
g$E540 DEFB $00,$00,$00,$00

; Display moving objects
;
; Used by the routine at #R$CBBD.
;
; IX Pointer to moving room data
c$E544 LD L,(IX+$07) ; { Get the pointer to moving object data
 $E547 LD H,(IX+$08) ; and put it in #REGhl. }
 $E54A PUSH HL       ; { Copy this to #REGiy.
 $E54B POP IY        ; }
; This entry point is used by the routine at #R$CA5B.
; Get the first object
*$E54D LD A,(IY+$00) ; Get the first sprite ID.
 $E550 CALL $D669    ; Get the graphic for this and put it in #REGde.
 $E553 LD HL,$DED8   ; Set #REGhl to the first moving graphics buffer (#R$DED8).
 $E556 CALL $D677    ; Copy the object.
; Get the second object
 $E559 LD A,(IY+$01) ; Get the second sprite ID.
 $E55C CALL $D669    ; Get the graphic for this and put it in #REGde.
 $E55F LD HL,$DFCA   ; Set #REGhl to the second moving graphics buffer (#R$DED8).
 $E562 CALL $D677    ; Copy the object.
; Get the third object
 $E565 LD A,(IY+$02) ; Get the third sprite ID.
 $E568 CALL $D669    ; Get the graphic for this and put it in #REGde.
 $E56B LD HL,$E0BC   ; Set #REGhl to the third moving graphics buffer (#R$DED8).
 $E56E CALL $D815    ; Copy the object.
; Get the fourth object
 $E571 LD A,(IY+$03) ; Get the fourth sprite ID.
 $E574 CALL $D669    ; Get the graphic for this and put it in #REGde.
 $E577 LD HL,$E2FE   ; Set #REGhl to the fourth moving graphics buffer (#R$DED8).
 $E57A CALL $D815    ; Copy the object.
; Now get the instances of each object.
 $E57D LD A,(IY+$04) ; Load the first byte.
 $E580 CALL $E9F8    ; Convert into two bytes in #REGbc.
 $E583 LD ($E540),BC ; Store this in #R$E540.
 $E587 LD A,(IY+$05) ; Load the second byte.
 $E58A CALL $E9F8    ; Convert into two bytes in #REGbc.
 $E58D LD ($E542),BC ; Store this in #R$E540.
 $E591 RET           ; Return.

; Move all objects in the room
;
; Used by the routine at #R$C800.
;
; IY Pointer to moving object data
c$E592 LD L,(IX+$07) ;
 $E595 LD H,(IX+$08) ;
 $E598 LD DE,$0006   ;
 $E59B ADD HL,DE     ;
 $E59C PUSH HL       ;
 $E59D POP IY        ;
; This entry point is used by the routine at #R$CA5B.
*$E59F LD HL,($DED8) ;
 $E5A2 LD ($D6BB),HL ;
 $E5A5 LD HL,$DEDA   ;
 $E5A8 LD ($D6BD),HL ;
 $E5AB LD A,($E540)  ;
 $E5AE CALL $D6BF    ;
 $E5B1 LD HL,($DFCA) ;
 $E5B4 LD ($D6BB),HL ;
 $E5B7 LD HL,$DFCC   ;
 $E5BA LD ($D6BD),HL ;
 $E5BD LD A,($E541)  ;
 $E5C0 CALL $D6BF    ;
 $E5C3 LD HL,($E0BC) ;
 $E5C6 LD ($D72E),HL ;
 $E5C9 LD HL,$E0BE   ;
 $E5CC LD ($D730),HL ;
 $E5CF LD A,($E542)  ;
 $E5D2 CALL $D732    ;
 $E5D5 LD HL,($E2FE) ;
 $E5D8 LD ($D72E),HL ;
 $E5DB LD HL,$E300   ;
 $E5DE LD ($D730),HL ;
 $E5E1 LD A,($E543)  ;
 $E5E4 CALL $D732    ;
 $E5E7 RET           ;

; See if Dan is in the blimp with the plans, and if so, launch it
;
; Used by the routine at #R$C800.
c$E5E8 LD HL,$C87E   ; Get the game flags. (#R$C87E)
 $E5EB BIT 7,(HL)    ; Is the blimp been launched?
 $E5ED JR NZ,$E62F   ; Display the winning text if so.
 $E5EF LD A,($CFCA)  ; Get the current room. (#R$CFCA)
 $E5F2 CP $2B        ; Is it the start room? (#N$2B)?
 $E5F4 RET NZ        ; Return if not.
 $E5F5 LD A,$02      ; 
 $E5F7 LD ($CFD3),A  ;
 $E5FA LD A,($C872)  ; { Is the Y co-ordinate #N$16?
 $E5FD CP $16        ; }
 $E5FF RET NZ        ; Return if not.
 $E600 LD A,($C873)  ; { Is the X co-ordinate
 $E603 SUB $0C       ; between 08 and #N$14? 
 $E605 CP $08        ; }
 $E607 RET NC        ; Return if not.
 $E608 BIT 1,(HL)    ; Does Dan have the plans?
 $E60A RET Z         ; Return if not.
; Dan is in the blimp and has the plans. Launch it.
 $E60B LD (HL),$80   ; Set bit 7 to denote Dan has the plans, clear all other flags.
 $E60D LD HL,$40B0   ; Starting screen address.
 $E610 LD B,$08      ; Loop 8 times.
 $E612 LD A,$FF      ; Load #REGa with all bits set.
*$E614 PUSH HL       ; Remember the current screen address.
 $E615 LD (HL),A     ; { Set the next three columns
 $E616 INC L         ; to this.
 $E617 LD (HL),A     ;
 $E618 INC L         ;
 $E619 LD (HL),A     ; }
 $E61A POP HL        ; Restore the screen address.
 $E61B INC H         ; Move down a row.
 $E61C DJNZ $E614    ; Loop until the number of rows has been scrolled.
 $E61E LD HL,$5855   ; Starting attribute address.
 $E621 LD (HL),$06   ; Set yellow on black.
 $E623 LD BC,$0904   ; Fill for 9 columns, 4 rows.
 $E626 LD DE,$0C05   ; Start at co-ordinate #N$0C, #N$05.
 $E629 LD A,$05      ; { Fill with cyan on black.
 $E62B CALL $E8BA    ; }
 $E62E RET           ; Return for another run round the main loop.

; Display the winning game text
;
; Used by the routine at #R$E5E8.
;
; HL Points to the game flags (#R$C87E).
c$E62F INC (HL)      ; Set bit 1 to denote Dan has the plans.
 $E630 BIT 6,(HL)    ; Does Dan have an oxygen tank?
 $E632 JR Z,$E644    ; Launch the blimp if not.
 $E634 CALL $E801    ; Clear the screen.
 $E637 LD HL,$FE77   ; Point #REGhl to the winning text. (#R$FE77)
 $E63A CALL $EEF1    ; Print it.
 $E63D CALL $DD8D    ; Wait for the user to acknowledge the message.
 $E640 POP HL        ; { Tidy the stack and restart the game.
 $E641 JP $C804      ; }

; Launch the blimp
;
; Used by the routine at #R$E62F.
c$E644 CALL $E916    ; Update the blimp.
 $E647 LD A,($C87E)  ; Get the game flags. (#R$C87E)
 $E64A AND $07       ; Ensure bits 1 - 3 are set.
 $E64C RET NZ        ; Return if not.
 $E64D LD HL,$5820   ; { Scroll the attributes up one row.
 $E650 LD DE,$5800   ;
 $E653 LD BC,$00C0   ; 
 $E656 LDIR          ; }
 $E658 LD HL,$C878   ; Get the height landed.
 $E65B LD A,$08      ; { If it's greater than 8, reset the machine.
 $E65D CP (HL)       ;
 $E65E JP C,$0000    ; }
 $E661 RET           ; Otherwise return.

; Current colour sequence for this room's teleporter
g$E662 DEFB $00

; Update any teleporter in this room
;
; Used by the routine at #R$C800.
c$E663 LD IY,$EDBC   ;
 $E667 LD B,$0A      ;
 $E669 LD A,($CFCA)  ;
*$E66C CP (IY+$00)   ;
 $E66F JR Z,$E679    ;
 $E671 LD DE,$0006   ;
 $E674 ADD IY,DE     ;
 $E676 DJNZ $E66C    ;
 $E678 RET           ;
; This room has a teleporter, update it
*$E679 LD HL,$E662   ;
 $E67C INC (HL)      ;
 $E67D LD A,(HL)     ;
 $E67E LD L,(IY+$01) ;
 $E681 LD H,(IY+$02) ;
 $E684 LD B,$04      ;
*$E686 AND $07       ;
 $E688 JR NZ,$E68B   ;
 $E68A INC A         ;
*$E68B LD (HL),A     ;
 $E68C INC A         ;
 $E68D INC L         ;
 $E68E DJNZ $E686    ;
 $E690 DEC A         ;
 $E691 LD C,A        ;
 $E692 LD A,($E662)  ;
 $E695 CP $C8        ;
 $E697 RET C         ;
 $E698 BIT 1,A       ;
 $E69A JR NZ,$E6A0   ;
 $E69C LD A,$45      ;
 $E69E JR $E6A4      ;
*$E6A0 LD A,C        ;
 $E6A1 RLCA          ;
 $E6A2 RLCA          ;
 $E6A3 RLCA          ;
*$E6A4 CALL $ECA4    ;
 $E6A7 LD C,A        ;
 $E6A8 RRCA          ;
 $E6A9 CALL $DB01    ;
 $E6AC LD DE,($C872) ;
 $E6B0 CALL $E909    ;
 $E6B3 EX DE,HL      ;
 $E6B4 LD DE,$0040   ;
 $E6B7 ADD HL,DE     ;
 $E6B8 INC L         ;
 $E6B9 LD A,($E662)  ;
 $E6BC CP $FF        ;
 $E6BE RET NZ        ;
 $E6BF LD A,(HL)     ;
 $E6C0 CP C          ;
 $E6C1 LD A,$45      ;
 $E6C3 JP NZ,$ECA4   ;
; The teleporter has flashed and Dan is standing under it
 $E6C6 LD A,(IY+$04) ;
 $E6C9 LD ($C872),A  ;
 $E6CC LD A,(IY+$05) ;
 $E6CF LD ($C873),A  ;
 $E6D2 LD A,(IY+$03) ;
 $E6D5 CALL $CBBD    ;
 $E6D8 RET           ;

; Tick counters for lasers.
;
; This counter increments by 1 for every run round the main loop. When it
; reaches $80, the laser fires.
g$E6D9 DEFB $00

; Current colour to draw the laser bolt with
g$E6DA DEFB $00

; Current width of the laser
g$E6DB DEFB $00

; See if there is a laser in this room, and if so, update it
;
; Used by the routine at #R$C800.
c$E6DC LD IY,$EDF8   ;
 $E6E0 LD B,$0F      ;
 $E6E2 LD A,($CFCA)  ;
*$E6E5 CP (IY+$00)   ;
 $E6E8 JR Z,$E6F6    ;
 $E6EA LD DE,$0004   ;
 $E6ED ADD IY,DE     ;
 $E6EF DJNZ $E6E5    ;
 $E6F1 LD C,$14      ;
 $E6F3 JP $E7D7      ;

; Update any lasers in the room
;
; Used by the routines at #R$CA5B, #R$CDD3, #R$DD8D and #R$E6DC.
;
; IY Pointer to laser data
c$E6F6 LD C,(IY+$03) ;
 $E6F9 LD HL,$E6D9   ;
 $E6FC INC (HL)      ;
 $E6FD BIT 7,(HL)    ;
 $E6FF JP Z,$E7D7    ;
 $E702 LD A,(HL)     ;
 $E703 AND $03       ;
 $E705 LD B,A        ;
 $E706 ADD A,A       ;
 $E707 ADD A,A       ;
 $E708 ADD A,A       ;
 $E709 LD E,A        ;
 $E70A LD D,$00      ;
 $E70C LD HL,$ECBD   ;
 $E70F ADD HL,DE     ;
 $E710 EX DE,HL      ;
 $E711 LD A,B        ;
 $E712 ADD A,$03     ;
 $E714 LD ($E6DB),A  ;
 $E717 LD HL,$E6DA   ;
 $E71A BIT 7,(HL)    ;
 $E71C JR Z,$E742    ;
 $E71E DEC (HL)      ;
 $E71F CALL $ECF4    ;
 $E722 CALL $E775    ;
 $E725 LD A,(HL)     ;
 $E726 AND $3F       ;
 $E728 JR NZ,$E73A   ;
 $E72A XOR A         ;
 $E72B LD (HL),A     ;
 $E72C DEC HL        ;
 $E72D LD (HL),A     ;
 $E72E LD L,(IY+$01) ;
 $E731 LD H,(IY+$02) ;
 $E734 CALL $E76C    ;
 $E737 JP $E7D7      ;
*$E73A CALL $E756    ;
 $E73D CALL $E76C    ;
 $E740 JR $E782      ;
*$E742 INC (HL)      ;
 $E743 CALL $ECF4    ;
 $E746 CALL $E775    ;
 $E749 LD A,(HL)     ;
 $E74A AND $3F       ;
 $E74C CP C          ;
 $E74D JR NZ,$E751   ;
 $E74F SET 7,(HL)    ;
*$E751 CALL $E756    ;
 $E754 JR $E782      ;
*$E756 LD B,A        ;
 $E757 LD A,C        ;
 $E758 SUB B         ;
 $E759 LD C,A        ;
 $E75A LD L,(IY+$01) ;
 $E75D LD H,(IY+$02) ;
*$E760 PUSH BC       ;
 $E761 LD A,($E6DB)  ;
 $E764 CALL $ECDD    ;
 $E767 INC L         ;
 $E768 POP BC        ;
 $E769 DJNZ $E760    ;
 $E76B RET           ;

; Clear a section of laser when it is retreating
;
; Used by the routine at #R$E6F6.
c$E76C LD A,$45      ;
 $E76E LD DE,$3D00   ;
 $E771 CALL $ECDD    ;
 $E774 RET           ;

; Play a laser sound effect
;
; Used by the routine at #R$E6F6.
c$E775 LD A,($E6DB)  ;
 $E778 ADD A,A       ;
 $E779 ADD A,(HL)    ;
 $E77A RES 7,A       ;
 $E77C PUSH HL       ;
 $E77D CALL $DB01    ;
 $E780 POP HL        ;
 $E781 RET           ;

; Move the laser bolt one frame
;
; Used by the routine at #R$E6F6.
;
; IY Current room data
c$E782 LD A,($C87F)  ;
 $E785 BIT 7,A       ;
 $E787 RET NZ        ;
 $E788 LD A,(IY+$01) ;
 $E78B AND $1F       ;
 $E78D DEC A         ;
 $E78E LD B,A        ;
 $E78F LD A,($E6DA)  ;
 $E792 AND $3F       ;
 $E794 ADD A,B       ;
 $E795 LD L,A        ;
 $E796 LD A,($C873)  ;
 $E799 LD H,A        ;
 $E79A CP L          ;
 $E79B JR Z,$E7D7    ;
 $E79D LD A,B        ;
 $E79E DEC A         ;
 $E79F CP H          ;
 $E7A0 JR NC,$E7D7   ;
 $E7A2 LD A,L        ;
 $E7A3 CP H          ;
 $E7A4 JR C,$E7D7    ;
 $E7A6 LD A,C        ;
 $E7A7 CP H          ;
 $E7A8 JR Z,$E7D7    ;
 $E7AA LD A,(IY+$02) ;
 $E7AD AND $03       ;
 $E7AF RRCA          ;
 $E7B0 RRCA          ;
 $E7B1 LD B,A        ;
 $E7B2 LD A,(IY+$01) ;
 $E7B5 AND $E0       ;
 $E7B7 RRCA          ;
 $E7B8 RRCA          ;
 $E7B9 ADD A,B       ;
 $E7BA LD B,A        ;
 $E7BB LD A,($C872)  ;
 $E7BE ADD A,$1A     ;
 $E7C0 CP B          ;
 $E7C1 JR C,$E7D7    ;
 $E7C3 SUB $20       ;
 $E7C5 CP B          ;
 $E7C6 JR NC,$E7D7   ;
 $E7C8 LD HL,$C874   ;
 $E7CB BIT 5,(HL)    ;
 $E7CD JR NZ,$E7D7   ;
 $E7CF CALL $CD8A    ;
 $E7D2 LD HL,$E6DA   ;
 $E7D5 SET 7,(HL)    ;
; Pause for a short interval. This entry point is also used by the routine at
; #R$E6DC.
*$E7D7 LD A,C        ;
 $E7D8 AND A         ;
 $E7D9 RET Z         ;
 $E7DA LD B,$1F      ;
*$E7DC DJNZ $E7DC    ;
 $E7DE DEC C         ;
 $E7DF JR NZ,$E7D7   ;
 $E7E1 RET           ;

i$E7E2

; Last read state of port #N$FE
;
; Used to set the border colour, and to play sound.
;
; .
;
; Used by the routines at #R$CDD3, #R$DBA2, #R$DE52 and #R$E801.
g$E800 DEFB $00

; Clear the screen
;
; Used by the routines at #R$C881, #R$CA5B, #R$DB63, #R$DCF6, #R$E62F and
; #R$F2F4.
c$E801 LD HL,$4000   ; { Start copying from the top of the screen,
 $E804 LD BC,$1800   ; and for the length of it. }
 $E807 LD (HL),L     ; Set the first byte to 0.
 $E808 LD D,H        ; { Start copying to the second byte in the screen.
 $E809 LD E,$01      ; }
 $E80B LDIR          ; Do the copy, which will fill the screen with 0.
; At this point, #REGhl is pointing to the attributes.
 $E80D LD A,$45      ; Use bright cyan on black.
 $E80F LD (HL),A     ; Set the first cell.
 $E810 LD BC,$02FF   ; { Fill the rest of the attributes.
 $E813 LDIR          ; }
; Set the border to black.
 $E815 LD A,($E800)  ; Get the last read to port #N$FE. (#R$E800)
 $E818 AND $F8       ; Ignore the border bits, it is always black.
 $E81A OUT ($FE),A   ; Set the port values.
 $E81C LD ($E800),A  ; Remember this for later.
 $E81F RET           ; Return.

; Clear the screen to cyan ink / black paper
;
; Used by the routines at #R$CBBD and #R$CDD3.
c$E820 LD HL,$4000   ; { Clear the screen from #N$4000 - #N$5000.
 $E823 LD BC,$1000   ; 
 $E826 LD (HL),L     ; 
 $E827 LD D,H        ; 
 $E828 LD E,$01      ; 
 $E82A LDIR          ;
 $E82C XOR A         ;
 $E82D LD B,$08      ;
*$E82F PUSH BC       ;
 $E830 PUSH HL       ;
 $E831 PUSH DE       ;
 $E832 LD (HL),A     ;
 $E833 LD BC,$007F   ;
 $E836 LDIR          ;
 $E838 POP DE        ;
 $E839 POP HL        ;
 $E83A INC D         ;
 $E83B INC H         ;
 $E83C POP BC        ;
 $E83D DJNZ $E82F    ;
 $E83F LD HL,$5800   ; { Fill the attributes to cyan on black.
 $E842 LD D,H        ;
 $E843 LD E,$01      ;
 $E845 LD A,$45      ;
 $E847 LD (HL),A     ;
 $E848 LD BC,$027F   ;
 $E84B LDIR          ; }
 $E84D RET           ; Return.

; Draw a UDG
;
; Used by the routines at #R$62A3, #R$CDD3, #R$CE76, #R$DCC1, #R$DCF6, #R$ED00,
; #R$EF7C and #R$F3EC.
;
; HL Pointer to data containing information about what to draw and where.
; DE Co-ordinates to print the graphic.
c$E84E LD B,(HL)     ; { Get the height.
 $E84F INC HL        ; }
 $E850 LD C,(HL)     ; { Get the width.
 $E851 INC HL        ; }
 $E852 PUSH BC       ; { Remember #REGbc and #REGde.
 $E853 PUSH DE       ; }
 $E854 CALL $E87A    ; Copy the graphic data.
; Put the pixel data on screen.
 $E857 POP DE        ; { Restore #REGbc and #REGde.
 $E858 POP BC        ; }
 $E859 LD A,(HL)     ; { Is this a "fill" command?
 $E85A AND A         ; }
 $E85B JR NZ,$E862   ; Jump forward if it isn't.
; There is a "fill" command here.
 $E85D INC HL        ; { Put the attribute in #REGa.
 $E85E LD A,(HL)     ; }
 $E85F JP $E8BA      ; Move forward to do the fill.
; Print the attribute for the graphic.
*$E862 CALL $E8E3    ; Convert the screen address to an attribute address.
 $E865 EX DE,HL      ; Put the attribute address in #REGhl.
*$E866 PUSH BC       ; { Remember #REGbc and #REGhl.
 $E867 PUSH HL       ; }
*$E868 LD A,(DE)     ; Get the attribute data.
 $E869 LD (HL),A     ; Put it on screen.
 $E86A INC L         ; Move to the next column.
 $E86B INC DE        ; Move to the next data cell.
 $E86C DJNZ $E868    ; Loop while there are more columns.
 $E86E POP HL        ; Restore #REGhl.
 $E86F LD BC,$0020   ; { Move to the next row.
 $E872 AND A         ;
 $E873 SBC HL,BC     ; }
 $E875 POP BC        ; Restore #REGbc.
 $E876 DEC C         ; { Loop back if there are more rows to draw.
 $E877 JR NZ,$E866   ; }
 $E879 RET           ; Otherwise return.

; Copy a graphic onto screen
;
; Used by the routines at #R$DBEE, #R$DE87, #R$E84E and #R$F021.
;
; HL Address of the graphic
; DE Co-ordinates to place the graphic
; B Width
; C Height
c$E87A LD A,C        ; { Put the height in #REGa and store it in the shadow register.
*$E87B EX AF,AF'     ; }
 $E87C LD C,$08      ; 8 rows to draw per UDG cell.
 $E87E PUSH DE       ; Remember the co-ordinates.
 $E87F CALL $E8F1    ; Convert this to a screen address in #REGde.
*$E882 PUSH BC       ; { Remember the screen address and dimensions.
 $E883 PUSH DE       ; }
*$E884 LD A,(HL)     ; { Copy the graphic byte.
 $E885 LD (DE),A     ; }
 $E886 INC E         ; Move forward a cell.
 $E887 INC HL        ; Move forward a column in the data.
 $E888 DJNZ $E884    ; Loop back if there are more columns to draw.
 $E88A POP DE        ; Restore the screen address.
 $E88B INC D         ; Move to the next column.
 $E88C POP BC        ; Restore the dimensions.
 $E88D DEC C         ; Move to the next UDG cell.
 $E88E JR NZ,$E882   ; Loop back if there is more to draw.
 $E890 POP DE        ; Restore the co-ordinates.
 $E891 DEC E         ; Move to the next row.
 $E892 EX AF,AF'     ; { Restore height left to draw and move down a row.
 $E893 DEC A         ; }
 $E894 JR NZ,$E87B   ; { Loop back unti all rows are done.
 $E896 RET           ; }

; Remove an object from screen
;
; Used by the routines at #R$62A3, #R$D1CE, #R$DBB8, #R$DDF4, #R$DE28 and
; #R$DE87.
;
; DE Position of the object
; BC Size of the object
c$E897 PUSH DE       ; { Remember the input values.
 $E898 PUSH BC       ; }
 $E899 LD H,C        ;
*$E89A PUSH DE       ; Remember #REGde.
 $E89B CALL $E8F1    ; Convert the co-ordinates to a screen address.
 $E89E LD C,$08      ; 8 rows to update.
 $E8A0 XOR A         ; Set #REGa to 0.
*$E8A1 PUSH BC       ; { Remember #REGbc and #REGde.
 $E8A2 PUSH DE       ; }
*$E8A3 LD (DE),A     ; Set the byte.
 $E8A4 INC E         ; Move to the next column.
 $E8A5 DJNZ $E8A3    ; Loop while there are more columns.
 $E8A7 POP DE        ; Restore #REGde.
 $E8A8 INC D         ; Move to the next row.
 $E8A9 POP BC        ; Restore #REGbc.
 $E8AA DEC C         ; { Loop until all rows are done.
 $E8AB JR NZ,$E8A1   ; }
 $E8AD POP DE        ; Restore #REGde.
 $E8AE DEC E         ; 
 $E8AF DEC H         ;
 $E8B0 JR NZ,$E89A   ;
 $E8B2 POP BC        ; { Restore the input values.
 $E8B3 POP DE        ; }
 $E8B4 LD A,$45      ; { Fill the area with bright cyan on black.
 $E8B6 CALL $E8BA    ; }
 $E8B9 RET           ; Return.

; Fill a number of lines with an attribute
;
; Used by the routines at #R$62A3, #R$CA5B, #R$D378, #R$DD8D, #R$E5E8, #R$E84E,
; #R$E897 and #R$F470.
;
; A Attribute to fill in
; DE co-ordinate to start
; B Number of columns to fill
; C Number of rows to fill
c$E8BA LD L,A        ; Store the attribute.
 $E8BB CALL $E8E3    ; Get the attribute address from the co-ordinate in #REGde.
 $E8BE LD A,L        ; Restore the attribute.
 $E8BF EX DE,HL      ; Swap #REGde and #REGhl.
 $E8C0 LD DE,$0020   ; Set #N$20 as the offset to move between rows.
*$E8C3 PUSH BC       ; { Remember the size and attribute address.
 $E8C4 PUSH HL       ; }
*$E8C5 LD (HL),A     ; Fill this attribute with the value specified.
 $E8C6 INC L         ; Move to the next column.
 $E8C7 DJNZ $E8C5    ; Repeat until all columns are done.
 $E8C9 POP HL        ; Restore the attribute address.
 $E8CA AND A         ; Clear the carry flag.
 $E8CB SBC HL,DE     ; Move up a row.
                     ; Note, this could have been done by setting #REGde to #N$FFE0
                     ; and calling ADD HL,DE which saves a byte.
 $E8CD POP BC        ; Restore the size.
 $E8CE DEC C         ; { Loop back if there are more rows to do.
 $E8CF JR NZ,$E8C3   ; }
 $E8D1 RET           ; Otherwise return.

; Convert a room co-ordinate to a screen address rounded to the nearest 8x8
; cell
;
; Used by the routines at #R$C8FF, #R$CD24, #R$D1CE, #R$D550, #R$D655 and
; #R$E909.
;
; DE On entry, holds the x and y co-ordinates. On return, holds the screen
; .  address.
c$E8D2 LD A,E        ; Get the Y co-ordinate.
 $E8D3 AND $07       ; { Put the bottom 3 bits in #REGb.
 $E8D5 LD B,A        ; }
 $E8D6 SRL E         ; { Divide the Y co-ordinate by 8
 $E8D8 SRL E         ; to get an appropriate offset for screen data.
 $E8DA SRL E         ; }
 $E8DC CALL $E8F1    ; Convert this to an attribute address in #REGde.
 $E8DF LD A,B        ; { Add the low 3 bits to the X co-ordinate to get
 $E8E0 ADD A,D       ; the appropriate screen address.
 $E8E1 LD D,A        ; }
 $E8E2 RET           ; Return with a screen address in #REGde.

; Convert a room co-ordinate to an attribute address
;
; Used by the routines at #R$CA5B, #R$CB8D, #R$D7A2, #R$D7D6, #R$E84E, #R$E8BA,
; #R$E93F and #R$E96B.
;
; DE On entry, holds the x and y co-ordinates. On return, holds the attribute
; .  address.
c$E8E3 LD A,E        ; Get the Y co-ordinate.
 $E8E4 AND $18       ; Keep bits 3 and 4, which hold the correct third of the screen to use.
 $E8E6 SRA A         ; { Divide by 8 to get an appropriate offset for this line.
 $E8E8 SRA A         ;
 $E8EA SRA A         ; }
 $E8EC ADD A,$58     ; Add the base address for the attribute buffer.
 $E8EE PUSH AF       ; Store #REGa and ensure the stack is correct for the next instruction.
 $E8EF JR $E8F7      ; Jump forward to set the low byte, which is the same as the screen.

; Convert a room co-ordinate to a screen address
;
; Used by the routines at #R$E87A, #R$E897, #R$E8D2, #R$E96B and #R$EEF1.
;
; DE On entry, holds the x and y co-ordinates. On return, holds the screen
; .  address.
c$E8F1 LD A,E        ; Get the Y co-ordinate.
 $E8F2 AND $18       ; Keep bits 3 and 4, which hold the correct third of the screen to use.
 $E8F4 ADD A,$40     ; Add a base address of #N$40 to the the high byte of a screen address.
 $E8F6 PUSH AF       ; Remember this.
; This entry point is used by the routine at #R$E8E3.
*$E8F7 LD A,E        ; Get the X co-ordinate.
 $E8F8 AND $07       ; { Take the bottom 3 bits and multiply them by 32
 $E8FA SLA A         ; to get the correct offset for this line
 $E8FC SLA A         ; (ie: #N$20, #N$40, #N$60, #N$80, #N$A0, #N$E0)
 $E8FE SLA A         ;
 $E900 SLA A         ;
 $E902 SLA A         ; }
 $E904 ADD A,D       ; { Add the Y co-ordinate to get the right low byte of a screen address.
 $E905 LD E,A        ; }
 $E906 POP AF        ; { Restore the high byte into #REGd.
 $E907 LD D,A        ; }
 $E908 RET           ; Return.

; Convert a screen address to an attribute address
;
; Used by the routines at #R$CD5C, #R$D567, #R$D895, #R$D951 and #R$E663.
;
; DE On entry, holds the screen address. On return, holds the attribute address
c$E909 CALL $E8D2    ; Round the screen address to the nearest whole cell.
; This entry point is used by the routine at #R$D1CE.
*$E90C LD A,D        ; { Divide the high byte by 8 to give an offset of
 $E90D RRCA          ; 08, 09 or #N$A.
 $E90E RRCA          ;
 $E90F RRCA          ; }
 $E910 AND $03       ; Keep only the bottom 3 bits, to give an offset of 0, 1 or 2.
 $E912 OR $58        ; Add the base address of the attribute buffer, to give #N$58, #N$59 or #N$5A.
 $E914 LD D,A        ; Store this as the new high byte. The low byte is unchanged.
 $E915 RET           ; Return.

; Launch the blimp having got the plans
;
; Used by the routine at #R$E644.
c$E916 LD DE,$4000   ; Point #REGde to the start of screen.
 $E919 LD B,$08      ; 8 8x8 blocks to update.
*$E91B PUSH BC       ; { Remember #REGbc and #REGde.
 $E91C PUSH DE       ; }
 $E91D LD B,$07      ; 7 rows to update.
*$E91F LD L,E        ; { Copy #REGde to #REGhl.
 $E920 LD H,D        ; }
 $E921 INC H         ; Move down a row.
 $E922 PUSH HL       ; { Remember #REGhl and #REGbc.
 $E923 PUSH BC       ; }
 $E924 LD BC,$0020   ; { Copy a line from #REGhl to a row above in #REGde.
 $E927 LDIR          ; }
 $E929 EX DE,HL      ; Swap #REGde and #REGhl.
 $E92A POP BC        ; Restore #REGbc.
 $E92B POP DE        ; Restore #REGhl into #REGde.
 $E92C DJNZ $E91F    ; Loop back while there are more rows to update.
 $E92E POP HL        ; { Restore #REGhl and #REGbc.
 $E92F POP BC        ; }
 $E930 DEC B         ; { Reduce the number of blocks to update by 1,
 $E931 RET Z         ; and return if it is zero. }
 $E932 PUSH BC       ; Remember #REGbc.
 $E933 LD BC,$0020   ; { Move down a 8x8 block.
 $E936 ADD HL,BC     ; }
 $E937 PUSH HL       ; Remember #REGhl.
 $E938 LDIR          ; Do the copy.
 $E93A POP DE        ; Restore #REGhl as #REGde.
 $E93B POP BC        ; Restore #REGbc.
 $E93C JR $E91B      ; Loop back to update more.
 $E93E RET           ; This is never executed, the function executes at #R$E931.

; Toggle the colours on any test tubes or dynamite so they glow
;
; Used by the routines at #R$C800 and #R$DD8D.
;
; IX Pointer to the current room's static object data
c$E93F BIT 5,(IX+$04) ;
 $E943 JR Z,$E952     ;
 $E945 LD E,(IX+$09)  ;
 $E948 LD D,(IX+$0A)  ;
 $E94B CALL $E8E3     ;
 $E94E XOR A          ;
 $E94F LD (DE),A      ;
 $E950 INC E          ;
 $E951 LD (DE),A      ;
*$E952 BIT 4,(IX+$04) ;
 $E956 RET Z          ;
 $E957 LD E,(IX+$02)  ;
 $E95A LD D,(IX+$03)  ;
 $E95D CALL $E8E3     ;
 $E960 EX DE,HL       ;
 $E961 XOR A          ;
 $E962 LD (HL),A      ;
 $E963 LD BC,$0020    ;
 $E966 AND A          ;
 $E967 SBC HL,BC      ;
 $E969 LD (HL),A      ;
 $E96A RET            ;

; Draw a moving sprite
;
; Used by the routines at #R$D7B7 and #R$D7E7.
;
; DE Position to draw the sprite
; HL Pointer to the current sprite data
; B Number of frames for the sprite
; IY Pointer to current room data
c$E96B PUSH BC        ;
 $E96C BIT 6,(IY+$04) ;
 $E970 JR Z,$E977     ;
 $E972 LD BC,$777E    ;
 $E975 JR $E97A       ;
*$E977 LD BC,$1277    ;
*$E97A LD A,B         ;
 $E97B LD ($E990),A   ;
 $E97E LD A,C         ;
 $E97F LD ($E9AF),A   ;
 $E982 POP BC         ;
 $E983 PUSH DE        ;
 $E984 PUSH BC        ;
 $E985 LD A,C         ;
*$E986 EX AF,AF'      ;
 $E987 PUSH DE        ;
 $E988 CALL $E8F1     ;
 $E98B LD C,$08       ;
*$E98D PUSH BC        ;
 $E98E PUSH DE        ;
*$E98F LD A,(HL)      ;
 $E990 LD (DE),A      ;
 $E991 INC E          ;
 $E992 INC HL         ;
 $E993 DJNZ $E98F     ;
 $E995 POP DE         ;
 $E996 INC D          ;
 $E997 POP BC         ;
 $E998 DEC C          ;
 $E999 JR NZ,$E98D    ;
 $E99B POP DE         ;
 $E99C INC E          ;
 $E99D EX AF,AF'      ;
 $E99E DEC A          ;
 $E99F JR NZ,$E986    ;
 $E9A1 POP BC         ;
 $E9A2 POP DE         ;
 $E9A3 CALL $E8E3     ;
 $E9A6 EX DE,HL       ;
 $E9A7 LD DE,$0020    ;
 $E9AA LD A,(IY+$05)  ;
*$E9AD PUSH HL        ;
 $E9AE PUSH BC        ;
*$E9AF LD (HL),A      ;
 $E9B0 INC L          ;
 $E9B1 DJNZ $E9AF     ;
 $E9B3 POP BC         ;
 $E9B4 POP HL         ;
 $E9B5 ADD HL,DE      ;
 $E9B6 DEC C          ;
 $E9B7 JR NZ,$E9AD    ;
 $E9B9 RET            ;

; Current input routine
w$E9BA DEFW $F271

; Execute the current input routine
;
; Used by the routines at #R$CFD9 and #R$D2F0.
;
; C On return holds the appropriate action : 0 - jump right, 1 - move right, 2
; . - jump left, 3 - move left, 4 - jump, 5 - no action
c$E9BC LD HL,($E9BA) ; Get the movement routine. (#R$E9BA)
 $E9BF JP (HL)       ; Jump to it.

; Kempston joystick input routine
;
; .
;
; C On return holds the appropriate action : 0 - jump right, 1 - move right, 2
; . - jump left, 3 - move left, 4 - jump, 5 - no action
c$E9C0 IN A,($1F)    ;
 $E9C2 AND $13       ;
 $E9C4 LD C,$00      ;
 $E9C6 CP $11        ;
 $E9C8 RET Z         ;
 $E9C9 INC C         ;
 $E9CA CP $01        ;
 $E9CC RET Z         ;
 $E9CD INC C         ;
 $E9CE CP $12        ;
 $E9D0 RET Z         ;
 $E9D1 INC C         ;
 $E9D2 CP $02        ;
 $E9D4 RET Z         ;
 $E9D5 INC C         ;
 $E9D6 CP $10        ;
 $E9D8 RET Z         ;
 $E9D9 INC C         ;
 $E9DA RET           ;

; Sinclair joystick input routine
;
; .
;
; C On return holds the appropriate action : 0 - jump right, 1 - move right, 2
; . - jump left, 3 - move left, 4 - jump, 5 - no action
c$E9DB LD A,$EF      ;
 $E9DD IN A,($FE)    ;
 $E9DF AND $1F       ;
 $E9E1 LD C,$00      ;
 $E9E3 CP $16        ;
 $E9E5 RET Z         ;
 $E9E6 INC C         ;
 $E9E7 CP $17        ;
 $E9E9 RET Z         ;
 $E9EA INC C         ;
 $E9EB CP $0E        ;
 $E9ED RET Z         ;
 $E9EE INC C         ;
 $E9EF CP $0F        ;
 $E9F1 RET Z         ;
 $E9F2 INC C         ;
 $E9F3 CP $1E        ;
 $E9F5 RET Z         ;
 $E9F6 INC C         ;
 $E9F7 RET           ;

; Split a byte in two parts
;
; Used by the routines at #R$E544 and #R$EEF1.
;
; A The byte to convert
; B On return, holds the lowest 4 bits
; C On return, holds the highest 4 bits
c$E9F8 LD C,A        ; Copy #REGa to #REGc as a temporary copy.
 $E9F9 AND $07       ; { Put the bottom 3 bits of #REGa in #REGb.
 $E9FB LD B,A        ; Note : This should be AND #N$0F, otherwise bit 3 is lost!}
 $E9FC LD A,C        ; { Take the top 4 bytes to convert.
 $E9FD AND $F0       ; } 
 $E9FF RRCA          ; { Shift these down to bits 0 - 3
 $EA00 RRCA          ; and put it in C.
 $EA01 RRCA          ;
 $EA02 RRCA          ; 
 $EA03 LD C,A        ; }
 $EA04 RET           ; Return.

; Arrangement / sequence of theme tune parts
w$EA05 DEFW $EA29
 $EA07 DEFW $EA6A
 $EA09 DEFW $EA29
 $EA0B DEFW $EA6A
 $EA0D DEFW $EAAB
 $EA0F DEFW $EAAB
 $EA11 DEFW $EACC
 $EA13 DEFW $EACC
 $EA15 DEFW $EA29
 $EA17 DEFW $EAED
 $EA19 DEFW $EB2E
 $EA1B DEFW $EB57
 $EA1D DEFW $EB2E
 $EA1F DEFW $EB70
 $EA21 DEFW $EB2E
 $EA23 DEFW $EB57
 $EA25 DEFW $EB2E
 $EA27 DEFW $EB70

; Theme tune 1
b$EA29 DEFB $04,$00,$02,$00,$01,$00,$02,$00
 $EA31 DEFB $05,$11,$05,$11,$05,$11,$05,$11
 $EA39 DEFB $07,$00,$05,$00,$04,$00,$05,$00
 $EA41 DEFB $09,$15,$09,$15,$09,$15,$09,$15
 $EA49 DEFB $0A,$00,$09,$00,$08,$00,$09,$00
 $EA51 DEFB $10,$00,$0E,$00,$0D,$00,$0E,$00
 $EA59 DEFB $10,$00,$0E,$00,$0D,$00,$0E,$00
 $EA61 DEFB $11,$1D,$11,$1D,$11,$1D,$11,$1D
 $EA69 DEFB $FF

; Theme tune 2
b$EA6A DEFB $0E,$00,$00,$00,$11,$00,$00,$00
 $EA72 DEFB $10,$0C,$10,$0C,$10,$0C,$0E,$00
 $EA7A DEFB $0C,$09,$0C,$00,$0E,$0C,$0E,$00
 $EA82 DEFB $10,$0C,$10,$0C,$0E,$0B,$0E,$00
 $EA8A DEFB $0C,$09,$0C,$00,$0E,$0C,$0E,$00
 $EA92 DEFB $10,$0C,$10,$00,$0E,$0B,$0E,$00
 $EA9A DEFB $0C,$09,$0C,$00,$0B,$08,$0B,$00
 $EAA2 DEFB $09,$15,$09,$0C,$10,$14,$15,$00
 $EAAA DEFB $FF

; Theme tune 3
b$EAAB DEFB $15,$11,$15,$11,$16,$13,$16,$13
 $EAB3 DEFB $18,$15,$18,$00,$18,$15,$18,$00
 $EABB DEFB $1A,$16,$18,$15,$16,$13,$15,$11
 $EAC3 DEFB $13,$10,$13,$10,$13,$10,$13,$10
 $EACB DEFB $FF

; Theme tune 4
b$EACC DEFB $11,$0E,$11,$0E,$13,$10,$13,$10
 $EAD4 DEFB $15,$11,$15,$00,$15,$11,$15,$00
 $EADC DEFB $16,$13,$15,$11,$13,$10,$11,$0E
 $EAE4 DEFB $10,$0D,$10,$0D,$10,$0D,$10,$0D
 $EAEC DEFB $FF

; Theme tune 5
b$EAED DEFB $1A,$0E,$1A,$0E,$1C,$10,$1C,$10
 $EAF5 DEFB $1D,$11,$1D,$11,$1C,$10,$1C,$10
 $EAFD DEFB $1A,$0E,$1A,$0E,$19,$0D,$19,$0D
 $EB05 DEFB $1A,$0E,$1A,$0E,$15,$09,$15,$09
 $EB0D DEFB $16,$0A,$16,$0A,$13,$07,$13,$07
 $EB15 DEFB $11,$1D,$1A,$15,$11,$1D,$1A,$15
 $EB1D DEFB $10,$1C,$19,$13,$10,$1C,$19,$13
 $EB25 DEFB $0E,$1A,$15,$11,$0E,$00,$00,$00
 $EB2D DEFB $FF

; Theme tune 6
b$EB2E DEFB $1A,$0E,$1A,$0E,$1C,$10,$1C,$10
 $EB36 DEFB $1E,$1A,$15,$12,$0E,$09,$06,$02
 $EB3E DEFB $1A,$0E,$1A,$0E,$1C,$10,$1C,$10
 $EB46 DEFB $1E,$12,$1E,$12,$1E,$12,$1C,$10
 $EB4E DEFB $1A,$0E,$1A,$0E,$19,$0D,$19,$0D
 $EB56 DEFB $FF

; Theme tune 7
b$EB57 DEFB $17,$0B,$17,$0B,$19,$0D,$19,$0D
 $EB5F DEFB $1A,$0E,$1A,$0E,$1C,$10,$1C,$10
 $EB67 DEFB $19,$0D,$19,$0D,$15,$09,$15,$09
 $EB6F DEFB $FF

; Theme tune 8
b$EB70 DEFB $17,$0B,$17,$0B,$1C,$10,$1C,$10
 $EB78 DEFB $19,$0D,$19,$0D,$15,$09,$15,$09
 $EB80 DEFB $1A,$15,$12,$0E,$09,$06,$02,$00
 $EB88 DEFB $FF

; Graphics for the plans
;
; #CALL:print_udg(#PC,plans)
b$EB89 DEFB $03,$03,$FF,$FF,$FF,$C9,$B3,$23
 $EB91 DEFB $DB,$55,$77,$C9,$73,$37,$EB,$55
 $EB99 DEFB $77,$C9,$B5,$37,$FF,$FF,$FF,$FF
 $EBA1 DEFB $FF,$FF,$00,$18,$00,$FF,$E7,$FF
 $EBA9 DEFB $FF,$FF,$FF,$FC,$6C,$FF,$FE,$D5
 $EBB1 DEFB $7F,$FE,$D4,$FF,$FE,$ED,$FF,$FF
 $EBB9 DEFB $FF,$FF,$00,$00,$00,$00,$7E,$00
 $EBC1 DEFB $00,$FF,$00,$00,$81,$00,$00,$00
 $EBC9 DEFB $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $EBD1 DEFB $E7,$FF,$B1,$B1,$B1,$B1,$B1,$B1
 $EBD9 DEFB $02,$02,$02

; Graphics for the safe door
;
; #CALL:print_udg(#PC,safedoor)
b$EBDC DEFB $02,$04,$F2,$00,$EA,$00,$F2,$00
 $EBE4 DEFB $EA,$00,$F2,$00,$0A,$00,$02,$00
 $EBEC DEFB $00,$00,$F2,$EE,$EA,$E0,$F2,$84
 $EBF4 DEFB $EA,$04,$F2,$04,$EA,$00,$F2,$00
 $EBFC DEFB $EA,$00,$F2,$00,$EA,$00,$F2,$00
 $EC04 DEFB $EA,$04,$F2,$04,$EA,$84,$F2,$64
 $EC0C DEFB $EA,$8A,$00,$00,$02,$00,$02,$00
 $EC14 DEFB $EA,$00,$F2,$00,$EA,$00,$F2,$00
 $EC1C DEFB $EA,$00,$07,$45,$07,$07,$07,$07
 $EC24 DEFB $07,$45

; Intro text
;
; #CALL:print_multi_string( #PC, 0, intro0 )
; #CALL:print_multi_string( #PC, 1, intro1 )
; #CALL:print_multi_string( #PC, 2, intro2 )
; #CALL:print_multi_string( #PC, 3, intro3 )
; #CALL:print_multi_string( #PC, 4, intro4 )
; #CALL:print_multi_string( #PC, 5, intro5 )
; #CALL:print_multi_string( #PC, 6, intro6 )
; #CALL:print_multi_string( #PC, 7, intro7 )
b$EC26 DEFB $03,$07,$27,$27,$27,$0D,$21,$17
 $EC2E DEFB $0A,$16,$12,$1C,$0E,$27,$0D,$0A
 $EC36 DEFB $17,$27,$27,$27,$27,$FE,$05,$0A
 $EC3E DEFB $0D,$27,$0D,$0E,$0F,$12,$17,$0E
 $EC46 DEFB $27,$14,$0E,$21,$1B,$27,$FE,$07
 $EC4E DEFB $0A,$14,$27,$14,$0E,$21,$0B,$00
 $EC56 DEFB $0A,$1A,$0D,$FE,$09,$0A,$13,$27
 $EC5E DEFB $14,$0E,$16,$18,$1B,$1C,$00,$17
 $EC66 DEFB $FE,$0B,$0A,$1B,$27,$1B,$12,$17
 $EC6E DEFB $0C,$15,$0A,$12,$1A,$FE,$0D,$0A
 $EC76 DEFB $12,$27,$12,$17,$1B,$1C,$1A,$1D
 $EC7E DEFB $0C,$1C,$12,$00,$17,$1B,$FE,$0F
 $EC86 DEFB $0A,$18,$27,$18,$0A,$1D,$1B,$0E
 $EC8E DEFB $FE,$12,$07,$0E,$17,$1C,$0E,$1A
 $EC96 DEFB $2D,$0F,$12,$1A,$0E,$27,$1C,$00
 $EC9E DEFB $27,$18,$15,$0A,$21,$FF

; Flash the teleporter
;
; Used by the routine at #R$E663.
;
; IY Pointer to current teleporter's data
c$ECA4 LD L,(IY+$01) ;
 $ECA7 LD H,(IY+$02) ;
 $ECAA LD DE,$0020   ;
 $ECAD ADD HL,DE     ;
 $ECAE LD C,$04      ;
*$ECB0 PUSH HL       ;
 $ECB1 LD B,$04      ;
*$ECB3 LD (HL),A     ;
 $ECB4 INC L         ;
 $ECB5 DJNZ $ECB3    ;
 $ECB7 POP HL        ;
 $ECB8 ADD HL,DE     ;
 $ECB9 DEC C         ;
 $ECBA JR NZ,$ECB0   ;
 $ECBC RET           ;

; Laser graphics
b$ECBD DEFB $00,$02,$05,$88,$88,$50,$20,$00
 $ECC5 DEFB $00,$00,$00,$11,$AA,$44,$00,$00
 $ECCD DEFB $20,$50,$50,$88,$88,$05,$05,$02
 $ECD5 DEFB $00,$00,$20,$50,$88,$05,$02,$00

; Advance the laser by one frame
;
; Used by the routines at #R$E6F6 and #R$E76C.
;
; HL Current screen position of laser
; DE Current laser bolt graphic
; A Colour to draw the laser with
c$ECDD PUSH HL       ;
 $ECDE PUSH DE       ;
 $ECDF LD (HL),A     ;
 $ECE0 LD A,H        ;
 $ECE1 AND $03       ;
 $ECE3 RLCA          ;
 $ECE4 RLCA          ;
 $ECE5 RLCA          ;
 $ECE6 OR $40        ;
 $ECE8 LD H,A        ;
 $ECE9 LD B,$08      ;
*$ECEB LD A,(DE)     ;
 $ECEC LD (HL),A     ;
 $ECED INC H         ;
 $ECEE INC DE        ;
 $ECEF DJNZ $ECEB    ;
 $ECF1 POP DE        ;
 $ECF2 POP HL        ;
 $ECF3 RET           ;

; Change colour of the laser being drawn across screen
;
; Used by the routine at #R$E6F6.
;
; HL Pointer to entry containing current laser colour
c$ECF4 LD A,(HL)     ;
 $ECF5 AND $3F       ;
 $ECF7 LD B,A        ;
 $ECF8 LD A,C        ;
 $ECF9 CP B          ;
 $ECFA RET NC        ;
 $ECFB DEC A         ;
 $ECFC SET 7,A       ;
 $ECFE LD (HL),A     ;
 $ECFF RET           ;

; Print a set of UDGs indirectly
;
; Used by the routine at #R$CBBD.
;
; IX Pointer to address of UDGs to print.
c$ED00 LD L,(IX+$00) ; { Put the address in #REGhl and move forward to 
 $ED03 LD H,(IX+$01) ; #R$ED06 to print them. }

; Print a set of UDGs
;
; Used by the routines at #R$CA5B, #R$CDD3, #R$D378,
; #R$DCF6, #R$DD8D and #R$ED00.
;
; HL Pointer of UDGs to print, terminated with FF
c$ED06 LD A,(HL)     ; Get the width.
 $ED07 CP $FF        ; { Return if this is a terminator symbol instead.
 $ED09 RET Z         ; }
 $ED0A LD E,A        ; { Get the height and put the sizes in #REGde.
 $ED0B INC HL        ;
 $ED0C LD D,(HL)     ; }
 $ED0D INC HL        ; { Move to the next position and remember it.
 $ED0E PUSH HL       ; }
 $ED0F LD L,(HL)     ; { Get the offset to the graphic buffer in #REGhl.
 $ED10 LD H,$00      ; }
 $ED12 ADD HL,HL     ; Double it to get an appropriate word offset.
 $ED13 LD BC,$6C46   ; { Add the base offset address at #R$6C46.
 $ED16 ADD HL,BC     ; }
 $ED17 LD C,(HL)     ; { Put the actual address of the graphic in #REGbc.
 $ED18 INC HL        ;
 $ED19 LD B,(HL)     ; }
 $ED1A POP HL        ; Restore the graphic buffer position.
 $ED1B INC HL        ; Move to the byte after it.
 $ED1C LD A,(HL)     ; Get the next command.
 $ED1D CP $FE        ; { Jump forward if this is "draw right".
 $ED1F JR Z,$ED36    ; }
 $ED21 CP $FD        ; { Jump forward if this is "draw left".
 $ED23 JR Z,$ED50    ; }
 $ED25 CP $FC        ; { Jump forward if this is "draw up".
 $ED27 JR Z,$ED6A    ; }
 $ED29 CP $FB        ; { Jump forward if this is "draw down".
 $ED2B JR Z,$ED85    ; }
; No special command here, so print the graphic.
 $ED2D PUSH HL       ; Remember the current position.
 $ED2E LD L,C        ; { Put the graphic address in #REGhl.
 $ED2F LD H,B        ; }
 $ED30 CALL $E84E    ; Print the graphic.
 $ED33 POP HL        ; { Restore #REGhl and print another character.
 $ED34 JR $ED06      ; }
; Draw a string of UDGs to the right.
*$ED36 INC HL        ; Move to the next position.
 $ED37 PUSH HL       ;
 $ED38 PUSH BC       ;
 $ED39 LD C,(HL)     ; 
 $ED3A INC HL        ;
 $ED3B LD B,(HL)     ;
 $ED3C POP HL        ;
*$ED3D PUSH BC       ; { Remember the main registers used.
 $ED3E PUSH DE       ;
 $ED3F PUSH HL       ; }
 $ED40 CALL $E84E    ; Print the graphic.
 $ED43 POP HL        ; { Restore the registers.
 $ED44 POP DE        ;
 $ED45 POP BC        ; }
 $ED46 LD A,D        ; { Increase the X position.
 $ED47 ADD A,C       ;
 $ED48 LD D,A        ; }
 $ED49 DJNZ $ED3D    ;
 $ED4B POP HL        ;
 $ED4C INC HL        ;
 $ED4D INC HL        ;
 $ED4E JR $ED06      ;
; Draw a string of UDGs to the left.
*$ED50 INC HL        ; Move to the next position.
 $ED51 PUSH HL       ;
 $ED52 PUSH BC       ;
 $ED53 LD C,(HL)     ; { Put }
 $ED54 INC HL        ;
 $ED55 LD B,(HL)     ;
 $ED56 POP HL        ;
*$ED57 PUSH BC       ; { Remember the main registers used.
 $ED58 PUSH DE       ;
 $ED59 PUSH HL       ; }
 $ED5A CALL $E84E    ; Print the graphic.
 $ED5D POP HL        ; { Restore the registers.
 $ED5E POP DE        ;
 $ED5F POP BC        ; }
 $ED60 LD A,E        ; { Decrease the X position.
 $ED61 SUB C         ;
 $ED62 LD E,A        ; }
 $ED63 DJNZ $ED57    ;
 $ED65 POP HL        ;
 $ED66 INC HL        ;
 $ED67 INC HL        ;
 $ED68 JR $ED06      ;
; Draw a string of UDGS up.
*$ED6A INC HL        ; Move to the next position.
 $ED6B PUSH HL       ; 
 $ED6C PUSH BC       ;
 $ED6D LD C,(HL)     ;
 $ED6E INC HL        ;
 $ED6F LD B,(HL)     ;
 $ED70 POP HL        ;
*$ED71 PUSH BC       ;
 $ED72 PUSH DE       ;
 $ED73 PUSH HL       ;
 $ED74 CALL $E84E    ; Print the graphic.
 $ED77 POP HL        ;
 $ED78 POP DE        ;
 $ED79 POP BC        ;
 $ED7A LD A,D        ;
 $ED7B ADD A,C       ;
 $ED7C LD D,A        ;
 $ED7D INC E         ; Increase the Y position.
 $ED7E DJNZ $ED71    ;
 $ED80 POP HL        ;
 $ED81 INC HL        ;
 $ED82 INC HL        ;
 $ED83 JR $ED06      ;
; Draw a string of UDGS down.
*$ED85 INC HL        ; Move to the next position.
 $ED86 PUSH HL       ;
 $ED87 PUSH BC       ;
 $ED88 LD C,(HL)     ;
 $ED89 INC HL        ;
 $ED8A LD B,(HL)     ;
 $ED8B POP HL        ;
*$ED8C PUSH BC       ;
 $ED8D PUSH DE       ;
 $ED8E PUSH HL       ;
 $ED8F CALL $E84E    ; Print the graphic.
 $ED92 POP HL        ;
 $ED93 POP DE        ;
 $ED94 POP BC        ;
 $ED95 LD A,D        ;
 $ED96 ADD A,C       ;
 $ED97 LD D,A        ;
 $ED98 DEC E         ; Decrease the Y position.
 $ED99 DJNZ $ED8C    ;
 $ED9B POP HL        ;
 $ED9C INC HL        ;
 $ED9D INC HL        ;
 $ED9E JP $ED06      ;

; Current colour to set for the next letter on the main title
;
; Used by the routine at #R$EDA2
b$EDA1 DEFB $00

; Rotate the colours on the title screen's main message
;
; Used by the routine at #R$CA5B.
c$EDA2 LD HL,$EDA1   ;
 $EDA5 INC (HL)      ;
 $EDA6 LD A,(HL)     ;
 $EDA7 AND $03       ;
 $EDA9 CP $03        ;
 $EDAB RET NZ        ;
 $EDAC LD A,($5878)  ;
 $EDAF LD C,A        ;
 $EDB0 LD B,$13      ;
 $EDB2 LD HL,$5867   ;
*$EDB5 LD A,(HL)     ;
 $EDB6 LD (HL),C     ;
 $EDB7 LD C,A        ;
 $EDB8 INC L         ;
 $EDB9 DJNZ $EDB5    ;
 $EDBB RET           ;

; List of teleporters
;
; Used by the routine at #R$E663
; .
; Format is room number, position (2 bytes), new room, new Y position, new X
; position
b$EDBC DEFB $14,$D8,$59,$25,$1E,$08
 $EDC2 DEFB $25,$47,$58,$14,$7E,$19
 $EDC8 DEFB $1F,$93,$58,$1A,$76,$03
 $EDCE DEFB $08,$F2,$58,$19,$4E,$10
 $EDD4 DEFB $1A,$A2,$59,$1F,$2E,$14
 $EDDA DEFB $19,$0F,$59,$08,$46,$13
 $EDE0 DEFB $1D,$89,$58,$24,$1E,$0F
 $EDE6 DEFB $2B,$9A,$59,$16,$76,$1B
 $EDEC DEFB $16,$BA,$59,$2B,$6E,$1B
 $EDF2 DEFB $24,$4E,$58,$1D,$2E,$0A

; Data for lasers
;
; Used by the routine at #R$E6DC
; .
; Format is room number, position (2 bytes), width
b$EDF8 DEFB $1E,$24,$59,$16
 $EDFC DEFB $1B,$87,$59,$0B
 $EE00 DEFB $12,$E4,$59,$14
 $EE04 DEFB $14,$AC,$59,$08
 $EE08 DEFB $2E,$44,$5A,$18
 $EE0C DEFB $0A,$C4,$59,$0E
 $EE10 DEFB $26,$24,$58,$18
 $EE14 DEFB $09,$C4,$58,$0C
 $EE18 DEFB $02,$62,$58,$08
 $EE1C DEFB $16,$4A,$5A,$0E
 $EE20 DEFB $0E,$2A,$58,$0E
 $EE24 DEFB $22,$E4,$58,$18
 $EE28 DEFB $0D,$56,$5A,$06
 $EE2C DEFB $05,$36,$58,$06
 $EE30 DEFB $13,$E2,$59,$1A

; "Life lost" sound effect data
b$EE34 DEFB $0A,$1B,$0F,$13,$17,$0C,$22,$08
 $EE3C DEFB $30,$06,$46,$04,$64,$03,$8E,$02
 $EE44 DEFB $CA,$01

; "Picked up food" tune
b$EE46 DEFB $09,$0A,$0B,$0C,$0C,$0C,$0C,$0C
 $EE4E DEFB $0C,$10,$10,$10,$10,$13,$13,$18
 $EE56 DEFB $18,$18,$18,$18,$18,$16,$16,$16
 $EE5E DEFB $16,$16,$16,$16,$FF

; "Drowned" tune
b$EE63 DEFB $26,$24,$24,$23,$23,$24,$00,$00
 $EE6B DEFB $00,$18,$00,$00,$00,$18,$18,$18
 $EE73 DEFB $00,$1F,$1F,$1D,$1D,$1C,$1C,$1F
 $EE7B DEFB $1F,$24,$24,$00,$00,$24,$25,$24
 $EE83 DEFB $25,$24,$25,$24,$FF

; "Life lost" tune
b$EE88 DEFB $26,$23,$FF

; "Picked up dynamite" tune
b$EE8B DEFB $30,$2E,$2B,$29,$2E,$2B,$29,$27
 $EE93 DEFB $2B,$29,$27,$24,$29,$27,$24,$22
 $EE9B DEFB $27,$24,$22,$1F,$24,$22,$1F,$1D
 $EEA3 DEFB $22,$1F,$1D,$1B,$1F,$1D,$1B,$18
 $EEAB DEFB $1D,$1B,$18,$16,$1B,$18,$16,$13
 $EEB3 DEFB $18,$16,$13,$11,$16,$13,$11,$0F
 $EEBB DEFB $0C,$FF

; "Picked up test tube" tune
b$EEBD DEFB $27,$24,$27,$24,$27,$24,$27,$24
 $EEC5 DEFB $00,$00,$00,$1C,$1C,$1C,$1C,$00
 $EECD DEFB $1C,$1C,$00,$1C,$1C,$1C,$1C,$00
 $EED5 DEFB $1C,$1C,$00,$1C,$1C,$1C,$1C,$00
 $EEDD DEFB $19,$19,$00,$1C,$1C,$1C,$1B,$1A
 $EEE5 DEFB $19,$19,$19,$19,$19,$19,$19,$19
 $EEED DEFB $19,$19,$19,$FF

; Print a string at a location
;
; Used by the routines at #R$CA5B, #R$D378, #R$DB63, #R$DCF6, #R$DD8D, #R$DDE0,
; #R$E62F and #R$F2BE.
;
; HL Pointer to a buffer containing x,y,string
c$EEF1 LD E,(HL)     ; Get the x co-ordinate.
 $EEF2 INC HL        ; Increment the pointer to the buffer.
 $EEF3 LD D,(HL)     ; Get the y co-ordinate.
 $EEF4 CALL $E8F1    ; Convert this into a screen address in #REGde.
 $EEF7 INC D         ; Move down a row.
*$EEF8 INC HL        ; Increment the pointer to the buffer.
; The screen address is now in #REGde, so draw the string.
; This entry point is used by the routines at #R$C92A and #R$D378.
*$EEF9 LD A,(HL)     ; Get the next character.
 $EEFA CP $FF        ; Is it #N$FF?
 $EEFC RET Z         ; If so, that's the end of the string, so return.
 $EEFD CP $FE        ; Is it #N$FE?
 $EEFF JR Z,$EF1B    ; If so, it's the end of the line, so handle that.
 $EF01 PUSH HL       ; { Store #REGhl and #REGde.
 $EF02 PUSH DE       ; }
 $EF03 LD B,A        ; { Multiply the character ID by 4.
 $EF04 ADD A,A       ;
 $EF05 ADD A,B       ; }
 $EF06 LD L,A        ; { Put this in #REGhl.
 $EF07 LD H,$00      ; }
 $EF09 ADD HL,HL     ; Double it to get an appropriate offset.
 $EF0A LD BC,$677F   ; { Add the base offset for the character set. (#R$677F)
 $EF0D ADD HL,BC     ; }
 $EF0E LD B,$06      ; Draw 6 rows.
*$EF10 LD A,(HL)     ; Get the next graphic data.
 $EF11 LD (DE),A     ; Write it to screen.
 $EF12 INC HL        ; Move to the next position in the buffer.
 $EF13 INC D         ; Move to the next row.
 $EF14 DJNZ $EF10    ; Loop while there are more rows.
 $EF16 POP DE        ; { Restore #REGhl and #REGde.
 $EF17 POP HL        ; }
 $EF18 INC E         ; Move forward a column.
 $EF19 JR $EEF8      ; Loop back to print more.
; A newline character was found, so handle it.
*$EF1B INC HL        ; Move forward in the buffer.
 $EF1C JR $EEF1      ; Jump back to get the next co-ordinates and line.

; Initialize moving objects in all rooms
;
; Used by the routine at #R$C881.
;
; . 
;
; This routine loops through every moving object's movement table, and sets its
; visible flag, so that everything is in play when the game begins.
c$EF1E LD HL,($69ED) ; Point #REGhl at the moving objects buffer. (#R$69E6 + 7 / 8)
 $EF21 INC HL        ; { Skip the first four bytes
 $EF22 INC HL        ; which hold the object IDs.
 $EF23 INC HL        ;
 $EF24 INC HL        ; }
 $EF25 LD B,$30      ; #N$30 rooms to check.
*$EF27 PUSH BC       ; Remember #REGbc.
 $EF28 LD A,(HL)     ; Get the first byte with the number of objects.
 $EF29 CALL $E9F8    ; Split the two 4-bit numbers into #REGb and #REGc.
 $EF2C LD A,B        ; { Put the combined total in #REGd.
 $EF2D ADD A,C       ;
 $EF2E LD D,A        ; }
 $EF2F INC HL        ; { Get the second byte with the number of objects.
 $EF30 LD A,(HL)     ; }
 $EF31 CALL $E9F8    ; Split the two 4-bit numbers into #REGb and #REGc.
 $EF34 LD A,B        ; { Put the combined total, plus the earlier total
 $EF35 ADD A,C       ; in #REGb as the number of moving objects in
 $EF36 ADD A,D       ; this room.
 $EF37 LD B,A        ; }
 $EF38 LD DE,$0005   ; { Move to the start of the movement table.
 $EF3B ADD HL,DE     ; }
*$EF3C RES 6,(HL)    ; Set the sprite to be drawn.
 $EF3E LD DE,$0008   ; { Move to the next movement entry. 
 $EF41 ADD HL,DE     ; }
 $EF42 DJNZ $EF3C    ; Loop while there are more objects to look at it.
 $EF44 POP BC        ; Restore #REGbc.
 $EF45 DJNZ $EF27    ; { Loop back until all rooms have been checked.
 $EF47 RET           ; }

; Counter to make glowing objects alternate between colour and black
b$EF48 DEFB $00

; UDG - Dynamite
;
; #UDGARRAY2,7,,2($EF4B-$EF4C)(dynamite)
b$EF49 DEFB $02,$01,$00,$00,$00,$00,$00,$00
 $EF51 DEFB $DF,$D9,$DF,$DA,$DF,$D8,$00,$00
 $EF59 DEFB $00,$00,$00

; Current attribute for dynamite
b$EF5C DEFB $00

; UDG - Test tube
;
; #UDGARRAY1,7($EF67;$EF5F)(testtube)
b$EF5D DEFB $01,$02,$2C,$2C,$2C,$2C,$2C,$2C
 $EF65 DEFB $18,$00,$00,$7E,$24,$24,$24,$2C
 $EF6D DEFB $2C,$2C,$00

; Current attribute for test tube
b$EF70 DEFB $00

; List of attributes for each state of a glowing object
;
; Used by the routine at #R$EF7C.
b$EF71 DEFB $06,$06,$05,$05,$04,$04,$03,$02
 $EF79 DEFB $07

; Pointer to current attribute state of glowing objects
;
; Used by the routine at #R$EF7C.
w$EF7A DEFW $EF71

; Draw any glowing objects (dynamite or test tubes)
;
; Used by the routines at #R$C800 and #R$DD8D.
c$EF7C LD HL,$EF48    ;
 $EF7F INC (HL)       ;
 $EF80 BIT 0,(HL)     ;
 $EF82 RET Z          ;
 $EF83 LD HL,($EF7A)  ;
 $EF86 INC HL         ;
 $EF87 LD A,(HL)      ;
 $EF88 CP $07         ;
 $EF8A JR NZ,$EF8F    ;
 $EF8C LD HL,$EF71    ;
*$EF8F LD ($EF7A),HL  ;
 $EF92 LD ($EF5C),A   ;
 $EF95 LD ($EF70),A   ;
 $EF98 BIT 5,(IX+$04) ;
 $EF9C JR Z,$EFAA     ;
 $EF9E LD E,(IX+$09)  ;
 $EFA1 LD D,(IX+$0A)  ;
 $EFA4 LD HL,$EF49    ;
 $EFA7 CALL $E84E     ;
*$EFAA BIT 4,(IX+$04) ;
 $EFAE RET Z          ;
 $EFAF LD E,(IX+$02)  ;
 $EFB2 LD D,(IX+$03)  ;
 $EFB5 LD HL,$EF5D    ;
 $EFB8 CALL $E84E     ;
 $EFBB RET            ;

; Intro screen UDGs
b$EFBC DEFB $00,$00,$66,$01,$01,$2F,$FE,$01
 $EFC4 DEFB $1E,$01,$0A,$C3,$00,$1F,$67,$03
 $EFCC DEFB $02,$4F,$03,$1A,$4F,$03,$04,$4E
 $EFD4 DEFB $03,$1C,$4E,$0D,$03,$69,$0D,$1B
 $EFDC DEFB $69,$08,$03,$3C,$08,$1B,$3C,$04
 $EFE4 DEFB $03,$06,$04,$1B,$06,$17,$00,$51
 $EFEC DEFB $FE,$05,$06,$16,$02,$5C,$FE,$04
 $EFF4 DEFB $07,$16,$01,$59,$15,$02,$58,$15
 $EFFC DEFB $03,$57,$FE,$01,$19,$17,$1C,$12
 $F004 DEFB $14,$07,$4C,$FE,$05,$04,$12,$04
 $F00C DEFB $A4,$12,$1A,$A5,$14,$03,$50,$FD
 $F014 DEFB $01,$07,$14,$1B,$50,$FD,$01,$07
 $F01C DEFB $16,$0A,$C5,$FF

; Current animation index for Dan dying
;
; Used by the routine at #R$F021
g$F020 DEFB $00

; Animate Dan dying having been shot on the "game over" screen
;
; Used by the routine at #R$CDD3.
c$F021 LD HL,$F020   ; Get the current animation flag.
 $F024 AND A         ; Is it zero?
 $F025 JR NZ,$F02B   ; Jump forward if not.
 $F027 LD A,$08      ; Start at index 8.
 $F029 JR $F03B      ; Jump foward.
*$F02B BIT 7,A       ; Is the index #N$80 or above?
 $F02D JR NZ,$F033   ; Jump forward if it isn't.
 $F02F XOR A         ; { Otherwise reset the index to 0.
 $F030 LD (HL),A     ;
 $F031 JR $F03B      ; }
; Go to the next index.
*$F033 INC (HL)      ; Increment the index.
 $F034 LD A,(HL)     ; { Is it above 9?
 $F035 CP $09        ; }
 $F037 JR C,$F03B    ; Jump forward if it is.
 $F039 LD A,$08      ; Otherwise initialise it to 8.
; Now draw the graphic
*$F03B ADD A,A       ; Double the index to get a word offset.
 $F03C LD C,A        ; { Put the address in #REGbc.
 $F03D LD B,$00      ; }
 $F03F LD HL,$F052   ; { Add the base offset to the dying graphic table.
 $F042 ADD HL,BC     ; }
 $F043 LD A,(HL)     ; { Put the actual address in #REGhl.
 $F044 INC HL        ;
 $F045 LD H,(HL)     ;
 $F046 LD L,A        ; }
 $F047 LD B,(HL)     ; { Put the width in #REGb.
 $F048 INC HL        ; }
 $F049 LD C,(HL)     ; { Put the depth in #REGc.
 $F04A INC HL        ; }
 $F04B LD DE,$1B0B   ; Position is always #N$0B , #N$1B.
 $F04E CALL $E87A    ; { Put the graphic on screen and return.
 $F051 RET           ; }

; Dan dying offsets
;
; Used by the routine at #R$F021.
w$F052 DEFW $F064
 $F054 DEFW $F096
 $F056 DEFW $F0C8
 $F058 DEFW $F0FA
 $F05A DEFW $F12C
 $F05C DEFW $F176
 $F05E DEFW $F1C0
 $F060 DEFW $F20A
 $F062 DEFW $F23C

; Dan dying 1
;
; #UDGARRAY2,5,,2($F086-$F087;$F076-$F077;$F066-$F067)(dandeada)
b$F064 DEFB $02,$03,$1E,$C0,$1E,$00,$0E,$C0
 $F06C DEFB $07,$00,$03,$00,$03,$00,$03,$00
 $F074 DEFB $0F,$00,$1D,$80,$03,$C0,$07,$C0
 $F07C DEFB $0E,$C0,$0E,$C0,$1C,$C0,$1C,$C0
 $F084 DEFB $00,$C0,$1C,$00,$47,$80,$BD,$C0
 $F08C DEFB $3E,$40,$16,$80,$3F,$80,$1F,$00
 $F094 DEFB $0F,$00

; Dan dying 2
;
; #UDGARRAY2,5,,2($F0B8-$F0B9;$F0A8-$F0A9;$F098-$F099)(dandeadb)
b$F096 DEFB $02,$03,$07,$00,$07,$60,$03,$80
 $F09E DEFB $01,$C0,$01,$80,$03,$80,$0F,$00
 $F0A6 DEFB $03,$00,$0F,$60,$00,$F0,$01,$F0
 $F0AE DEFB $03,$B0,$03,$B0,$07,$70,$07,$60
 $F0B6 DEFB $00,$60,$0E,$00,$23,$C0,$5E,$E0
 $F0BE DEFB $1F,$20,$0B,$40,$1F,$C0,$0F,$80
 $F0C6 DEFB $07,$80

; Dan dying 3
;
; #UDGARRAY2,5,,2($F0EA-$F0EB;$F0DA-$F0DB;$F0CA-$F0CB)(dandeadc)
b$F0C8 DEFB $02,$03,$03,$60,$03,$40,$01,$80
 $F0D0 DEFB $01,$C0,$03,$80,$13,$00,$0F,$00
 $F0D8 DEFB $06,$00,$01,$C0,$03,$98,$00,$3C
 $F0E0 DEFB $00,$EC,$01,$EC,$01,$DC,$03,$98
 $F0E8 DEFB $00,$10,$00,$00,$03,$80,$08,$F0
 $F0F0 DEFB $17,$B8,$07,$C8,$02,$D0,$07,$F0
 $F0F8 DEFB $03,$E0

; Dan dying 4
;
; #UDGARRAY2,5,,2($F11C-$F11D;$F10C-$F10D;$F0FA-$F0FB)(dandeadd)
b$F0FA DEFB $02,$03,$01,$90,$01,$60,$01,$40
 $F102 DEFB $01,$80,$01,$C0,$13,$80,$0F,$00
 $F10A DEFB $06,$00,$00,$F8,$00,$70,$00,$EC
 $F112 DEFB $00,$1E,$00,$7E,$00,$EC,$00,$DC
 $F11A DEFB $00,$38,$00,$00,$00,$00,$00,$E0
 $F122 DEFB $02,$3C,$05,$EE,$01,$F8,$00,$B4
 $F12A DEFB $01,$FC

; Dan dying 5
;
; #UDGARRAY3,5,,3($F15E-$F160;$F146-$F148;$F12E-$F130)(dandeade)
b$F12C DEFB $03,$03,$00,$8E,$00,$01,$DC,$00
 $F134 DEFB $01,$88,$00,$01,$60,$00,$01,$40
 $F13C DEFB $00,$13,$00,$00,$1F,$00,$00,$0C
 $F144 DEFB $00,$00,$00,$7F,$00,$00,$3F,$00
 $F14C DEFB $00,$1E,$00,$00,$38,$00,$00,$06
 $F154 DEFB $00,$00,$1F,$00,$00,$77,$00,$00
 $F15C DEFB $27,$00,$00,$00,$00,$00,$00,$00
 $F164 DEFB $00,$00,$00,$00,$1C,$00,$00,$47
 $F16C DEFB $00,$00,$BD,$C0,$00,$3E,$40,$00
 $F174 DEFB $16,$80

; Dan dying 6
;
; #UDGARRAY3,5,,3($F1A8-$F1AA;$F190-$F193;$F178-$F17A)(dandeade)
b$F176 DEFB $03,$03,$00,$33,$E0,$00,$87,$80
 $F17E DEFB $00,$CE,$00,$01,$8C,$00,$01,$60
 $F186 DEFB $00,$27,$40,$00,$3F,$00,$00,$1C
 $F18E DEFB $00,$00,$00,$06,$E4,$00,$03,$E8
 $F196 DEFB $00,$01,$F0,$00,$05,$F0,$00,$03
 $F19E DEFB $C0,$00,$00,$00,$00,$1F,$C0,$00
 $F1A6 DEFB $7D,$E0,$00,$00,$00,$00,$00,$00
 $F1AE DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $F1B6 DEFB $C0,$00,$0C,$E0,$00,$03,$B0,$00
 $F1BE DEFB $03,$DC

; Dan dying 7
;
; #UDGARRAY3,5,,3($F1F2-$F1F4;$F1DA-$F1DC;$F1C2-$F1C4)(dandeadf)
b$F1C0 DEFB $03,$03,$00,$9E,$FF,$00,$C3,$FA
 $F1C8 DEFB $01,$C7,$E6,$03,$1F,$36,$47,$5C
 $F1D0 DEFB $0C,$4E,$50,$00,$7E,$00,$00,$78
 $F1D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F1E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F1E8 DEFB $04,$00,$00,$22,$00,$01,$7D,$00
 $F1F0 DEFB $39,$ED,$00,$00,$00,$00,$00,$00
 $F1F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F200 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F208 DEFB $00,$00

; Dan dying 8
;
; #UDGARRAY3,5,,3($F224-$F226;$F20C-$F20E)(dandeadg)
b$F20A DEFB $03,$02,$00,$01,$ED,$01,$79,$FF
 $F212 DEFB $03,$7E,$FA,$07,$07,$E6,$8C,$1F
 $F21A DEFB $36,$9A,$FE,$0C,$FA,$E0,$00,$F0
 $F222 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F22A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F232 DEFB $00,$00,$00,$04,$00,$00,$22,$00
 $F23A DEFB $01,$7D

; Dan dying 9
;
; #UDGARRAY3,5,,3($F256-$F258;$F23E-$F240)(dandeadh)
b$F23C DEFB $03,$02,$00,$00,$2D,$01,$61,$7D
 $F244 DEFB $03,$79,$ED,$87,$7D,$FF,$8F,$1E
 $F24C DEFB $FA,$FC,$07,$E6,$FA,$FF,$36,$02
 $F254 DEFB $FE,$0C,$00,$00,$00,$00,$00,$00
 $F25C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F264 DEFB $00,$00,$00,$00,$00,$00,$04,$00
 $F26C DEFB $00,$02

; Key for left
g$F26E DEFB $26

; Key for right
g$F26F DEFB $1E

; Key for jump
g$F270 DEFB $20

; Keyboard input routine
;
; .
;
; C On return holds the appropriate action : 0 - jump right, 1 - move right, 2
; . - jump left, 3 - move left, 4 - jump, 5 - no action
c$F271 LD HL,$F26E   ; Point #REGhl at the key for left.
 $F274 LD E,$00      ; Initialize #REGe to no keys pressed.
 $F276 LD D,$03      ; Number of keys to check.
*$F278 LD A,(HL)     ; Get the key to press.
 $F279 CALL $F32A    ; See if it was pressed.
 $F27C CCF           ; { Invert the carry flag, then rotate #REGe, putting
 $F27D RL E          ; the flag in as bit 0. This allows the various key presses
                     ; to be built up as the keys are checked. }
 $F27F INC HL        ; Move to the next key.
 $F280 DEC D         ; { Loop until all keys checked.
 $F281 JR NZ,$F278   ; }
; All keys have been scanned, now check the values.
 $F283 LD A,E        ; Get the matrix of keys pressed.
 $F284 AND $06       ; Only consider bits 1 - 2.
 $F286 CP $06        ; Is the value 6?
 $F288 JR NZ,$F28E   ; Jump forward if not.
 $F28A LD A,E        ; { Clear all bits except 1.
 $F28B AND $01       ; 
 $F28D LD E,A        ; }
; Now decide what action to take.
*$F28E LD C,$05      ; Default to value 5 (no action).
 $F290 LD A,E        ; Get the matrix of keys.
 $F291 AND A         ; { Return if it is zero (nothing pressed).
 $F292 RET Z         ; }
 $F293 DEC C         ; Select option 4 (jump).
 $F294 CP $01        ; Is only the jump bit set?
 $F296 RET Z         ; Return if it is.
 $F297 DEC C         ; Select option 3 (left).
 $F298 CP $04        ; Is left pressed but not jump?
 $F29A RET Z         ; Return if it is.
 $F29B DEC C         ; Select option 2 (jump + left).
 $F29C CP $05        ; Are left and jump pressed?
 $F29E RET Z         ; Return if they are.
 $F29F DEC C         ; Selecti option 1 (right).
 $F2A0 CP $02        ; Is right pressed but not jump?
 $F2A2 RET Z         ; Return if is.
 $F2A3 DEC C         ; { Only option left is right and jump pressed,
 $F2A4 RET           ; select option 0 (jump right) and return. }

; "LEFT"
;
; #CALL:print_string( #PC, left )
b$F2A5 DEFB $0C,$09,$15,$0E,$0F,$1C,$2C,$FF

; "RIGHT"
;
; #CALL:print_string( #PC, right )
b$F2AD DEFB $0C,$09,$1A,$12,$10,$11,$1C,$2C
 $F2B5 DEFB $FF

; "JUMP"
;
; #CALL:print_string( #PC, jump )
b$F2B6 DEFB $0C,$09,$13,$1D,$16,$18,$2C,$FF

; Redfine keys
;
; Used by the routine at #R$DB63.
c$F2BE CALL $F2F4    ; Clear the screen and wait for a keypress.
 $F2C1 LD HL,$F2A5   ; { Print "left". (#R$F2A5)
 $F2C4 CALL $EEF1    ; }
 $F2C7 CALL $F300    ; Wait for a keypress.
 $F2CA LD A,D        ; { Store the key for "left". (#R$F26E)
 $F2CB LD ($F26E),A  ; }
 $F2CE CALL $F2F4    ; Clear the screen and wait for a keypress.
 $F2D1 LD HL,$F2AD   ; { Print "right". (#R$F2AD)
 $F2D4 CALL $EEF1    ; }
 $F2D7 CALL $F300    ; Wait for a keypress.
 $F2DA LD A,D        ; { Store the key for "right". (#R$F26F)
 $F2DB LD ($F26F),A  ; }
 $F2DE CALL $F2F4    ; Clear the screen and wait for a keypress.
 $F2E1 LD HL,$F2B6   ; { Print "jump". (#R$F2B6)
 $F2E4 CALL $EEF1    ; }
 $F2E7 CALL $F300    ; Wait for a keypress.
 $F2EA LD A,D        ; { Store the key for "jump". (#R$F270)
 $F2EB LD ($F270),A  ; }
 $F2EE CALL $F2F4    ; Clear the screen and wait for a keypress.
 $F2F1 JP $CA56      ; Should be JP #R$CA5B, as this address is in a buffer (#R$CA3D),
                     ; however, the instructions are harmless and the bug has no effect!

; Clear the screen and wait for all keys to be released
;
; Used by the routine at #R$F2BE.
c$F2F4 CALL $E801    ; Clear the screen.
*$F2F7 XOR A         ; Set #REGa to 0.
 $F2F8 IN A,($FE)    ; Read the keyboard.
 $F2FA CPL           ; Invert the bits, so keys pressed will be set bits.
 $F2FB AND $1F       ; Keep only bits 1 - 5, as that's all the keyboard uses.
 $F2FD JR NZ,$F2F7   ; Loop back while keys are being pressed.
 $F2FF RET           ; Otherwise return.

; Wait for a key to be pressed
;
; Used by the routine at #R$F2BE.
;
; D Returns the key value
c$F300 CALL $F30A    ; { Get a key pressed.
 $F303 JR NZ,$F300   ; }
 $F305 INC D         ; { Loop back if nothing was pressed.
 $F306 JR Z,$F300    ; }
 $F308 DEC D         ; { Restore #REGd and return.
 $F309 RET           ; }

; Check all keys and return the first one found pressed
;
; Used by the routine at #R$F300.
;
; D Returns the key value, or FF if nothing pressed
c$F30A LD DE,$FF2F   ; Start with no key pressed and checking key #N$2F.
 $F30D LD BC,$FEFE   ; Start by checking SHIFT-V.
*$F310 IN A,(C)      ; Read the keyboard.
 $F312 CPL           ; Invert the bits so keys pressed have bits set.
 $F313 AND $1F       ; Keep only bits 1-5 as the others aren't used.
 $F315 JR Z,$F323    ; Jump forward if no keys were pressed.
; A key was pressed.
 $F317 INC D         ;
 $F318 RET NZ        ;
 $F319 LD H,A        ;
 $F31A LD A,E        ;
*$F31B SUB $08       ;
 $F31D SRL H         ;
 $F31F JR NC,$F31B   ;
 $F321 RET NZ        ;
 $F322 LD D,A        ;
; Scan another part of the keyboard.
*$F323 DEC E         ; Move to the next key.
 $F324 RLC B         ; Move to the next section of keyboard, so it
                     ; cyles from #N$FE - #N$FD - #N$FB - #N$F7 - #N$EF - #N$DF - #N$BF - #N$7F 
 $F326 JR C,$F310    ; Loop round for another read if we didn't scan anything. This stops
                     ; once port #N$7FFE is checked, as that the only one that doesn't carry
                     ; when shifting left.
 $F328 CP A          ;
 $F329 RET Z         ;
; Check that a particular key in #REGa was pressed.
; This entry point is used by the routine at #R$F271.
*$F32A LD C,A        ;
 $F32B AND $07       ;
 $F32D INC A         ;
 $F32E LD B,A        ;
 $F32F SRL C         ;
 $F331 SRL C         ;
 $F333 SRL C         ;
 $F335 LD A,$05      ;
 $F337 SUB C         ;
 $F338 LD C,A        ;
 $F339 LD A,$FE      ;
*$F33B RRCA          ;
 $F33C DJNZ $F33B    ;
 $F33E IN A,($FE)    ; Read the keyboard.
*$F340 RRA           ; Put the bit in the carry flag.
 $F341 DEC C         ; 
 $F342 JR NZ,$F340   ;
 $F344 RET           ;

; Initialize game data and make all objects visible
;
; Used by the routine at #R$C881.
c$F345 LD HL,$69EA   ; Point #REGhl to the flags in the first room.
 $F348 LD DE,$0007   ; Increment by 7 bytes from the start of an entry to a moving object list.
 $F34B LD BC,$0005   ; Increment by 5 bytes from the moving object list to the start of an entry.
 $F34E LD A,$30      ; Number of rooms to check.
*$F350 RES 5,(HL)    ;
 $F352 RES 4,(HL)    ;
 $F354 ADD HL,DE     ; Move to the moving object list in this room.
 $F355 LD (HL),$00   ; Set it to empty.
 $F357 ADD HL,BC     ; Move to the next room data.
 $F358 DEC A         ; { Loop back while there are more rooms to look at.
 $F359 JR NZ,$F350   ; }
 $F35B LD HL,$F3A0   ; Get the flags for what to set on initialisation. 
 $F35E LD (HL),$20   ; 
 $F360 INC HL        ;
 $F361 LD (HL),$30   ;
 $F363 LD HL,$69EA   ; { Set the object data pointer to the first room.
 $F366 LD ($F3A2),HL ; }
 $F369 LD B,$08      ;
 $F36B CALL $F3A4    ;
 $F36E LD A,$10      ;
 $F370 LD ($F3A0),A  ;
 $F373 LD B,$0F      ;
 $F375 CALL $F3A4    ;
 $F378 LD HL,$F3A0   ;
 $F37B LD (HL),$01   ;
 $F37D INC HL        ;
 $F37E LD (HL),$07   ;
 $F380 LD HL,$69F1   ; { Set the object data pointer to more flags in the first room.
 $F383 LD ($F3A2),HL ; }
 $F386 LD B,$02      ;
 $F388 CALL $F3A4    ;
 $F38B LD A,$02      ;
 $F38D LD ($F3A0),A  ;
 $F390 LD B,$08      ;
 $F392 CALL $F3A4    ;
 $F395 LD A,$04      ;
 $F397 LD ($F3A0),A  ;
 $F39A LD B,$04      ;
 $F39C CALL $F3A4    ;
 $F39F RET           ;

; Bitmask for what objects to select in initialisation
;
; Used by the routines in #R$F345 and #R$F3A4
b$F3A0 DEFB $00,$00

; Pointer to object data in current room being looked at
;
; Used by the routine in #R$F345
w$F3A2 DEFW $69EA

; Put special objects randomly in a room
;
; Used by the routine at #R$F345.
;
; B Number of objects to add.
c$F3A4 LD A,R        ; Load #REGa with the memory refresh register #REGr, which is pseudo-random.
 $F3A6 AND $3F       ; Store only the lower 6 bits.
 $F3A8 CP $30        ; { Loop until the value is less than or equal to #N$30,
 $F3AA JR NC,$F3A4   ; which is the number of rooms}
 $F3AC LD C,A        ; Put this value in #REGc.
*$F3AD LD A,C        ; Get the randomly generated value.
 $F3AE ADD A,$11     ; Add #N11.
 $F3B0 CP $30        ; { If the value is now greater than #N$30,
 $F3B2 JR C,$F3B6    ; subtract 30 so the it cycles round from 00 - #N$30
 $F3B4 SUB $30       ; and always holds a valid room.}
*$F3B6 LD C,A        ; Store the new value.
 $F3B7 ADD A,A       ; { Multiply the value by 4.
 $F3B8 ADD A,A       ; and put it in #REGhl.
 $F3B9 LD L,A        ; 
 $F3BA LD H,$00      ; }
 $F3BC LD E,L        ; { Multiply this by 4 to get an appropriate offset for a room.
 $F3BD LD D,H        ;
 $F3BE ADD HL,HL     ;
 $F3BF ADD HL,DE     ; }
 $F3C0 LD DE,($F3A2) ; Get the base rooms object data pointer in #REGde. (#R$F3A2)
 $F3C4 ADD HL,DE     ; Add the offset to get to the desired room.
 $F3C5 LD DE,($F3A0) ; Get the base room's flags in #REGde. (#R$F3A0)
 $F3C9 LD A,(HL)     ; Get the object flags.
 $F3CA AND D         ; { If the room can't support this object type, discard this
 $F3CB JR NZ,$F3AD   ; and pick another one. }
 $F3CD LD A,(HL)     ; { Get the object flags, and do a logical or against
 $F3CE OR E          ; the allowed flags.
 $F3CF LD (HL),A     ; }
 $F3D0 DJNZ $F3AD    ; { Loop until all the objects are done.
 $F3D2 RET           ; }

; Convert a UDG ID to the address of its data
;
; Used by the routines at #R$62A3, #R$CDD3 and #R$F3EC.
;
; A UDG ID to look up
; HL On return, points to the UDG data
c$F3D3 LD L,A        ; { Put the ID in #REGhl.
 $F3D4 LD H,$00      ; }
 $F3D6 ADD HL,HL     ; Double this to get an appropriate word offset.
 $F3D7 LD BC,$6C46   ; { Add the base address of the graphic lookup table at #R$6C46.
 $F3DA ADD HL,BC     ; }
 $F3DB LD A,(HL)     ; { Put the address of the graphic in #REGhl.
 $F3DC INC HL        ;
 $F3DD LD H,(HL)     ;
 $F3DE LD L,A        ; }
 $F3DF RET           ; Return.

; Given a room number, return the location of a bank card
;
; Used by the routines at #R$DE28 and #R$F3EC.
;
; A Room number
; DE On exit, holds the co-ordinates of the card
c$F3E0 ADD A,A       ; Double the room number to get a word offset.
 $F3E1 LD E,A        ; { Put this in #REGde.
 $F3E2 LD D,$00      ; }
 $F3E4 LD HL,$F410   ; { Add the base address of the bank card locations. (#R$F410)
 $F3E7 ADD HL,DE     ; }
 $F3E8 LD E,(HL)     ; { Put the value found in #REGde and return.
 $F3E9 INC HL        ; }
 $F3EA LD D,(HL)     ;
 $F3EB RET           ;

; Draw any bank cards in the room
;
; Used by the routine at #R$CBBD.
;
; B Room number to check
; IX Pointer to room data
c$F3EC LD A,(IX+$0B) ; Get bit flags for this room.
; Check type 1.
 $F3EF BIT 0,A       ; Is bit 0 set?
 $F3F1 JR Z,$F3F7    ; No, so skip this.
 $F3F3 LD C,$CD      ; { Draw bank card #N$CD.
 $F3F5 JR $F404      ; }
; Check type 2.
*$F3F7 BIT 1,A       ; Is bit 1 set?
 $F3F9 JR Z,$F3FF    ; No, so skip this.
 $F3FB LD C,$CB      ; { Draw bank card #N$CB.
 $F3FD JR $F404      ; }
; Check type 3.
*$F3FF BIT 2,A       ; Is bit 2 set?
 $F401 RET Z         ; Return if not, there are no bank cards here.
 $F402 LD C,$CC      ; Otherwise draw bank card #N$CC.
; Now draw the card.
*$F404 LD A,B        ; { Get the bank card location for this room.
 $F405 CALL $F3E0    ; }
 $F408 LD A,C        ; { Convert the UDG type to a graphic address.
 $F409 CALL $F3D3    ; }
 $F40C CALL $E84E    ; { Draw the card and return.
 $F40F RET           ; }

; Bank card locations
;
; Used by the routine at #R$F3E0
b$F410 DEFB $0F,$06,$0D,$17,$07,$17,$0A,$07
 $F418 DEFB $06,$08,$08,$0D,$03,$05,$03,$03
 $F420 DEFB $11,$02,$0B,$07,$0A,$07,$0B,$02
 $F428 DEFB $0E,$1A,$03,$04,$06,$1A,$0B,$07
 $F430 DEFB $06,$08,$11,$1B,$12,$02,$12,$13
 $F438 DEFB $05,$14,$10,$03,$11,$06,$05,$0A
 $F440 DEFB $10,$03,$06,$10,$0A,$06,$0E,$0A
 $F448 DEFB $04,$02,$10,$0D,$08,$1C,$10,$03
 $F450 DEFB $08,$17,$05,$16,$0E,$05,$06,$06
 $F458 DEFB $10,$09,$09,$02,$0A,$17,$0F,$0F
 $F460 DEFB $0A,$12,$0A,$11,$09,$1B,$10,$08
 $F468 DEFB $10,$1B,$06,$06,$0F,$02,$10,$06

; Fill lines with an attribute using data
;
; Used by the routines at #R$DB63 and #R$DCF6.
;
; HL pointer to data containing what to draw and where
c$F470 LD B,(HL)     ; Get the number of times to repeat.
*$F471 PUSH BC       ; Remember #REGbc.
 $F472 INC HL        ; { Get the attribute.
 $F473 LD A,(HL)     ; }
 $F474 INC HL        ; { Get the number of columns.
 $F475 LD B,(HL)     ; }
 $F476 INC HL        ; { Get the number of rows.
 $F477 LD C,(HL)     ; }
 $F478 INC HL        ; { Get the X co-ordinate.
 $F479 LD E,(HL)     ; }
 $F47A INC HL        ; { Get the Y co-ordinate.
 $F47B LD D,(HL)     ; }
 $F47C PUSH HL       ; Remember #REGhl.
 $F47D CALL $E8BA    ; Fill the lines with the attribute.
 $F480 POP HL        ; Restore #REGhl.
 $F481 POP BC        ; Restore #REGbc.
 $F482 DJNZ $F471    ; { Loop round until the fill is complete.
 $F484 RET           ; }

; Dan drowning graphic
b$F485 DEFB $00,$00,$00,$00,$00,$24,$10,$00
 $F48D DEFB $00,$00,$00,$00,$24,$24,$08,$00
 $F495 DEFB $00,$00,$04,$40,$14,$08,$20,$02
 $F49D DEFB $00,$00,$04,$02,$08,$20,$04,$22
 $F4A5 DEFB $00,$40,$04,$10,$4A,$00,$14,$28
 $F4AD DEFB $10,$00,$42,$10,$00,$89,$04,$10
 $F4B5 DEFB $00,$04,$10,$00,$04,$22,$08,$00
 $F4BD DEFB $00,$00,$10,$02,$10,$08,$40,$22
 $F4C5 DEFB $00,$00,$00,$04,$10,$24,$02,$10
 $F4CD DEFB $00,$00,$00,$00,$00,$04,$10,$22
 $F4D5 DEFB $00,$00,$00,$00,$00,$20,$04,$08
 $F4DD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4E5 DEFB $17,$05,$0E,$17,$1C,$0E,$1A,$2D
 $F4ED DEFB $0F,$12,$1A,$0E,$27,$1C,$00,$27
 $F4F5 DEFB $0C,$00,$17,$1C,$12,$17,$1D,$0E
 $F4FD DEFB $FF,$17,$00,$A4,$17,$1E,$A5,$FF

; Screen positions for instructions page 3 UDGs
b$F505 DEFB $00,$00,$00,$00,$00,$04,$02,$09
 $F50D DEFB $01,$0E,$00,$13,$00,$04,$11,$09
 $F515 DEFB $11,$0E,$11,$13,$10

; Screen positions for instructions page 4 UDGs
b$F51A DEFB $00,$00,$0A,$07,$30,$00,$00,$00
 $F522 DEFB $00,$10,$07

; Instructions page 1 attributes
b$F525 DEFB $0C,$03,$20,$0A,$09,$00,$07,$20
 $F52D DEFB $05,$0E,$00,$02,$20,$06,$14,$00
 $F535 DEFB $0E,$0A,$01,$00,$0E,$16,$05,$01
 $F53D DEFB $01,$1B,$38,$08,$01,$03,$08,$05
 $F545 DEFB $03,$01,$05,$00,$04,$09,$01,$04
 $F54D DEFB $17,$06,$03,$01,$0A,$09,$03,$03
 $F555 DEFB $01,$11,$11,$06,$08,$01,$0F,$11
 $F55D DEFB $04,$05,$01,$12,$1B

; Instructions page 2 attributes
b$F562 DEFB $04,$4F,$11,$01,$00,$07,$04,$19
 $F56A DEFB $02,$09,$03,$03,$1C,$03,$0D,$03
 $F572 DEFB $02,$1B,$03,$11,$03

; Instructions page 3 attributes
b$F577 DEFB $03,$0F,$04,$01,$00,$0E,$03,$02
 $F57F DEFB $10,$13,$0D,$03,$02,$10,$13,$1E

; Instructions page 4 attributes
b$F587 DEFB $02,$0F,$0B,$01,$00,$0B,$03,$03
 $F58F DEFB $10,$13,$17

; Instructions page 4 UDGs to add
b$F592 DEFB $07,$07,$CC,$04,$07,$CB,$0D,$07
 $F59A DEFB $CD,$FF

; Data for laser on start and instructions page
b$F59C DEFB $00,$E2,$5A,$1C

; Instructions page 1 end message
;
; #CALL:print_string( #PC, instructend1 )
b$F5A0 DEFB $17,$0B
; "N0 CHANCE!"
 $F5A2 DEFB $17,$00,$27,$0C,$11,$0A,$17,$0C
 $F5AA DEFB $0E,$28,$FF

; Instructions page 2 end message
;
; #CALL:print_string( #PC, instructend2 )
b$F5AD DEFB $17,$03
; "THAT MEANS DAN CAN'T SWIM"
 $F5AF DEFB $1C,$11,$0A,$1C,$27,$16,$0E,$0A
 $F5B7 DEFB $17,$1B,$27,$0D,$0A,$17,$27,$0C
 $F5BF DEFB $0A,$17,$2A,$1C,$27,$1B,$1F,$12
 $F5C7 DEFB $16,$FF

; Instructions page 3 end message
;
; #CALL:print_string( #PC, instructend3 )
b$F5C9 DEFB $17,$0C
; "EAT THAT!"
 $F5CB DEFB $0E,$0A,$1C,$27,$1C,$11,$0A,$1C
 $F5D3 DEFB $28,$FF

; Instructions page 4 end message
;
; #CALL:print_string( #PC, instructend4 )
b$F5D5 DEFB $17,$09
; "GET THAT LIFE!"
 $F5D7 DEFB $10,$0E,$1C,$27,$1C,$11,$0A,$1C
 $F5DF DEFB $27,$15,$12,$0F,$0E,$28,$FF

; UDG C5
;
; #CALL:print_udg(#PC,UDG_C5)
b$F5E6 DEFB $0C,$02,$A1,$7A,$DD,$FF,$EE,$AD
 $F5EE DEFB $6B,$5B,$B6,$BD,$F7,$6B,$99,$7A
 $F5F6 DEFB $D5,$00,$2E,$AD,$6B,$5A,$D6,$BD
 $F5FE DEFB $17,$6A,$C3,$7B,$3B,$FF,$EE,$AD
 $F606 DEFB $6C,$DB,$39,$BD,$F1,$67,$FF,$FF
 $F60E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F616 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$EF,$FF
 $F61E DEFB $FF,$FF,$FD,$FF,$FF,$FF,$FE,$DD
 $F626 DEFB $FE,$FE,$F6,$DF,$FE,$FF,$DE,$DB
 $F62E DEFB $DB,$DE,$F5,$B7,$75,$75,$B5,$B7
 $F636 DEFB $F5,$DE,$B6,$B6,$B6,$B6,$EA,$AB
 $F63E DEFB $AA,$AA,$AA,$AE,$EA,$BB,$55,$55
 $F646 DEFB $55,$55,$FF,$FF,$FF,$FF,$FF,$FF
 $F64E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00
 $F656 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F65E DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$FF
 $F666 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F66E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F676 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F67E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$C3,$63
 $F686 DEFB $31,$FF,$F5,$A3,$1C,$C7,$39,$88
 $F68E DEFB $F6,$27,$99,$5A,$D7,$AA,$AA,$AD
 $F696 DEFB $6B,$5A,$D6,$BD,$B7,$6A,$A1,$63
 $F69E DEFB $33,$00,$2A,$A3,$1B,$47,$76,$9D
 $F6A6 DEFB $17,$6A,$00,$07

; UDG 42
;
; #CALL:print_udg(#PC,UDG_42)
b$F6AA DEFB $08,$02,$65,$09,$18,$8A,$22,$16
 $F6B2 DEFB $60,$00,$11,$A8,$92,$60,$86,$63
 $F6BA DEFB $13,$28,$80,$02,$00,$42,$10,$08
 $F6C2 DEFB $04,$62,$62,$94,$4C,$35,$22,$CD
 $F6CA DEFB $42,$34,$46,$20,$64,$C2,$31,$02
 $F6D2 DEFB $E6,$80,$10,$0C,$12,$18,$80,$30
 $F6DA DEFB $50,$D9,$2B,$45,$20,$08,$45,$24
 $F6E2 DEFB $02,$14,$82,$00,$01,$22,$11,$91
 $F6EA DEFB $48,$40,$14,$92,$8A,$04,$98,$22
 $F6F2 DEFB $44,$32,$30,$20,$20,$91,$82,$88
 $F6FA DEFB $96,$24,$02,$12,$08,$20,$2C,$62
 $F702 DEFB $00,$81,$66,$46,$9D,$67,$41,$21
 $F70A DEFB $22,$52,$20,$00,$48,$02,$03,$08
 $F712 DEFB $6B,$26,$92,$12,$04,$90,$B0,$B1
 $F71A DEFB $08,$92,$30,$D9,$30,$24,$24,$44
 $F722 DEFB $22,$38,$04,$00,$23,$00,$D0,$80
 $F72A DEFB $D1,$13,$00,$04

; UDG B4
;
; #CALL:print_udg(#PC,UDG_B4)
b$F72E DEFB $07,$03,$2C,$22,$80,$64,$18,$12
 $F736 DEFB $5B,$72,$87,$62,$D5,$22,$B1,$B8
 $F73E DEFB $E2,$11,$58,$85,$CE,$96,$92,$B5
 $F746 DEFB $36,$EC,$42,$D4,$6A,$94,$C0,$04
 $F74E DEFB $60,$C2,$95,$41,$20,$18,$00,$30
 $F756 DEFB $50,$81,$10,$0C,$00,$00,$00,$00
 $F75E DEFB $06,$00,$05,$00,$00,$00,$00,$00
 $F766 DEFB $00,$00,$41,$02,$00,$10,$30,$00
 $F76E DEFB $27,$EA,$43,$11,$31,$65,$50,$4A
 $F776 DEFB $66,$6A,$81,$09,$92,$9A,$10,$12
 $F77E DEFB $D1,$2A,$22,$A8,$30,$85,$4E,$86
 $F786 DEFB $41,$46,$10,$A5,$0A,$54,$A8,$14
 $F78E DEFB $61,$04,$01,$50,$22,$F6,$40,$CA
 $F796 DEFB $28,$5A,$00,$90,$71,$24,$A2,$01
 $F79E DEFB $18,$02,$02,$A8,$92,$04,$00,$00
 $F7A6 DEFB $44,$57,$15,$54,$95,$44,$94,$92
 $F7AE DEFB $BA,$DD,$AE,$5A,$29,$2B,$5B,$55
 $F7B6 DEFB $AA,$B3,$BD,$56,$DE,$E5,$91,$53
 $F7BE DEFB $56,$D5,$B9,$AB,$56,$42,$A9,$2B
 $F7C6 DEFB $22,$52,$55,$68,$AA,$4A,$94,$94
 $F7CE DEFB $A4,$AA,$A1,$08,$10,$52,$84,$04
 $F7D6 DEFB $92,$00,$07,$07,$07,$07,$07,$07
 $F7DE DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $F7E6 DEFB $04,$04,$04,$04,$04,$04,$04

; UDG C3
;
; #CALL:print_udg(#PC,UDG_C3)
b$F7ED DEFB $0C,$02,$61,$A4,$94,$52,$29,$28
 $F7F5 DEFB $94,$94,$14,$4A,$05,$06,$61,$A4
 $F7FD DEFB $94,$5C,$2E,$28,$97,$0F,$94,$4B
 $F805 DEFB $85,$06,$61,$A4,$94,$52,$29,$28
 $F80D DEFB $94,$82,$54,$4A,$05,$06,$61,$A4
 $F815 DEFB $94,$52,$29,$28,$94,$92,$54,$4A
 $F81D DEFB $05,$06,$63,$F4,$BE,$F9,$7C,$9F
 $F825 DEFB $3E,$4F,$8F,$9F,$0F,$86,$60,$00
 $F82D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F835 DEFB $00,$06,$70,$00,$00,$00,$00,$00
 $F83D DEFB $00,$00,$00,$00,$00,$0E,$BF,$FF
 $F845 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F84D DEFB $FF,$FD,$FF,$FF,$FF,$FF,$FF,$FF
 $F855 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00
 $F85D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F865 DEFB $00,$00,$80,$00,$00,$00,$00,$00
 $F86D DEFB $00,$00,$00,$00,$00,$01,$3F,$FF
 $F875 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F87D DEFB $FF,$FC,$70,$00,$00,$00,$00,$00
 $F885 DEFB $00,$00,$00,$00,$00,$0E,$60,$00
 $F88D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F895 DEFB $00,$06,$63,$FB,$3E,$FC,$7E,$1F
 $F89D DEFB $3F,$0F,$0F,$9F,$DF,$C6,$61,$A4
 $F8A5 DEFB $94,$52,$29,$28,$94,$94,$94,$4A
 $F8AD DEFB $05,$06,$04,$04,$04,$04,$04,$04
 $F8B5 DEFB $04,$04,$04,$04,$04,$04,$07,$07
 $F8BD DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $F8C5 DEFB $07,$07

; Instructions page 1 text
;
; #CALL:print_multi_string( #PC, 0, instructions1a )
; #CALL:print_multi_string( #PC, 1, instructions1b )
; #CALL:print_multi_string( #PC, 2, instructions1c )
; #CALL:print_multi_string( #PC, 3, instructions1d )
; #CALL:print_multi_string( #PC, 4, instructions1e )
; #CALL:print_multi_string( #PC, 5, instructions1f )
; #CALL:print_multi_string( #PC, 6, instructions1g )
; #CALL:print_multi_string( #PC, 7, instructions1h )
; #CALL:print_multi_string( #PC, 8, instructions1i )
; #CALL:print_multi_string( #PC, 9, instructions1j )
; #CALL:print_multi_string( #PC, 10, instructions1k )
; #CALL:print_multi_string( #PC, 11, instructions1l )
; #CALL:print_multi_string( #PC, 12, instructions1m )
; #CALL:print_multi_string( #PC, 13, instructions1n )
; #CALL:print_multi_string( #PC, 14, instructions1o )
; #CALL:print_multi_string( #PC, 15, instructions1p )
; #CALL:print_multi_string( #PC, 16, instructions1q )
; #CALL:print_multi_string( #PC, 17, instructions1r )
; #CALL:print_multi_string( #PC, 18, instructions1s )
; #CALL:print_multi_string( #PC, 19, instructions1t )
; #CALL:print_multi_string( #PC, 20, instructions1u )
b$F8C7 DEFB $00,$00,$1C,$11,$0E,$27,$0D,$0A
 $F8CF DEFB $1B,$1C,$0A,$1A,$0D,$15,$21,$27
 $F8D7 DEFB $0D,$1A,$26,$0B,$15,$12,$1C,$22
 $F8DF DEFB $0E,$17,$27,$0A,$12,$0D,$0E,$0D
 $F8E7 DEFB $FE,$01,$00,$0B,$21,$27,$11,$12
 $F8EF DEFB $1B,$27,$10,$15,$0A,$16,$00,$1A
 $F8F7 DEFB $00,$1D,$1B,$27,$0A,$1B,$1B,$12
 $F8FF DEFB $1B,$1C,$0A,$17,$1C,$27,$0D,$00
 $F907 DEFB $17,$17,$0A,$FE,$02,$00,$11,$0A
 $F90F DEFB $1B,$27,$0D,$0E,$1E,$12,$1B,$0E
 $F917 DEFB $0D,$27,$18,$15,$0A,$17,$1B,$27
 $F91F DEFB $0F,$00,$1A,$27,$0A,$27,$1B,$1D
 $F927 DEFB $18,$0E,$1A,$FE,$03,$00,$18,$1B
 $F92F DEFB $21,$0C,$11,$00,$17,$27,$16,$0E
 $F937 DEFB $10,$0A,$2E,$1A,$0A,$21,$26,$1C
 $F93F DEFB $11,$0E,$12,$1A,$27,$0A,$0D,$1E
 $F947 DEFB $0E,$1A,$1B,$0A,$1A,$21,$FE,$04
 $F94F DEFB $00,$0A,$17,$0D,$27,$00,$1D,$1A
 $F957 DEFB $27,$11,$0E,$1A,$00,$2B,$1C,$00
 $F95F DEFB $18,$27,$0A,$10,$0E,$17,$1C,$27
 $F967 DEFB $0D,$21,$17,$0A,$16,$12,$1C,$0E
 $F96F DEFB $FE,$05,$00,$0D,$0A,$17,$2B,$11
 $F977 DEFB $0A,$1B,$27,$0B,$0E,$0E,$17,$27
 $F97F DEFB $0A,$1B,$1B,$12,$10,$17,$0E,$0D
 $F987 DEFB $27,$1C,$00,$27,$1C,$11,$1F,$0A
 $F98F DEFB $1A,$1C,$FE,$06,$00,$1C,$11,$0E
 $F997 DEFB $12,$1A,$27,$1B,$0C,$11,$0E,$16
 $F99F DEFB $0E,$27,$0F,$00,$1A,$27,$1F,$00
 $F9A7 DEFB $1A,$15,$0D,$27,$0D,$00,$16,$12
 $F9AF DEFB $17,$0A,$1C,$2E,$FE,$07,$00,$12
 $F9B7 DEFB $00,$17,$27,$0B,$21,$27,$1B,$1C
 $F9BF DEFB $0E,$0A,$15,$12,$17,$10,$27,$1C
 $F9C7 DEFB $11,$0E,$27,$18,$15,$0A,$17,$1B
 $F9CF DEFB $27,$12,$17,$27,$0A,$17,$FE,$08
 $F9D7 DEFB $00,$0A,$1D,$0D,$0A,$0C,$12,$00
 $F9DF DEFB $1D,$1B,$27,$1B,$1F,$00,$00,$18
 $F9E7 DEFB $27,$00,$17,$27,$1C,$11,$0E,$27
 $F9EF DEFB $0D,$00,$0C,$1C,$00,$1A,$2A,$1B
 $F9F7 DEFB $FE,$09,$00,$1A,$0E,$16,$00,$1C
 $F9FF DEFB $0E,$27,$0C,$15,$12,$0F,$0F,$1C
 $FA07 DEFB $00,$18,$27,$1A,$0E,$1C,$1A,$0E
 $FA0F DEFB $0A,$1C,$26,$FE,$0A,$01,$0A,$15
 $FA17 DEFB $1A,$0E,$0A,$0D,$21,$27,$0D,$0A
 $FA1F DEFB $17,$27,$11,$0A,$1B,$27,$0C,$00
 $FA27 DEFB $16,$18,$15,$0E,$1C,$0E,$0D,$27
 $FA2F DEFB $1B,$1C,$0A,$10,$0E,$FE,$0B,$00
 $FA37 DEFB $00,$17,$0E,$27,$00,$0F,$27,$11
 $FA3F DEFB $12,$1B,$27,$16,$12,$1B,$1B,$12
 $FA47 DEFB $00,$17,$27,$0B,$21,$27,$15,$0A
 $FA4F DEFB $17,$0D,$12,$17,$10,$FE,$0C,$00
 $FA57 DEFB $11,$12,$1B,$27,$22,$0E,$18,$18
 $FA5F DEFB $0E,$15,$12,$17,$27,$00,$17,$27
 $FA67 DEFB $1C,$11,$0E,$27,$0D,$00,$0C,$2A
 $FA6F DEFB $1B,$27,$1A,$00,$00,$0F,$2E,$FE
 $FA77 DEFB $0D,$00,$17,$00,$1F,$27,$11,$0E
 $FA7F DEFB $27,$16,$1D,$1B,$1C,$27,$15,$00
 $FA87 DEFB $0C,$0A,$1C,$0E,$27,$1C,$11,$0E
 $FA8F DEFB $27,$18,$15,$0A,$17,$1B,$FE,$0E
 $FA97 DEFB $00,$11,$12,$0D,$0D,$0E,$17,$27
 $FA9F DEFB $12,$17,$27,$0B,$15,$12,$1C,$22
 $FAA7 DEFB $0E,$17,$2A,$1B,$27,$1B,$0A,$0F
 $FAAF DEFB $0E,$26,$FE,$0F,$01,$1C,$11,$0E
 $FAB7 DEFB $27,$08,$27,$1B,$1C,$12,$0C,$14
 $FABF DEFB $1B,$27,$00,$0F,$27,$0D,$21,$17
 $FAC7 DEFB $0A,$16,$12,$1C,$0E,$27,$17,$0E
 $FACF DEFB $0E,$0D,$0E,$0D,$FE,$10,$00,$1C
 $FAD7 DEFB $00,$27,$0B,$15,$00,$1F,$27,$1C
 $FADF DEFB $11,$0E,$27,$1B,$0A,$0F,$0E,$27
 $FAE7 DEFB $0A,$1A,$0E,$27,$0C,$00,$17,$0C
 $FAEF DEFB $0E,$0A,$15,$0E,$0D,$FE,$11,$00
 $FAF7 DEFB $0A,$1A,$00,$1D,$17,$0D,$27,$1C
 $FAFF DEFB $11,$0E,$27,$11,$00,$1D,$1B,$0E
 $FB07 DEFB $26,$0D,$0A,$17,$27,$16,$1D,$1B
 $FB0F DEFB $1C,$27,$0F,$12,$17,$0D,$FE,$12
 $FB17 DEFB $00,$1C,$11,$0E,$16,$2B,$0B,$15
 $FB1F DEFB $00,$1F,$27,$1C,$11,$0E,$27,$1B
 $FB27 DEFB $0A,$0F,$0E,$2B,$10,$0E,$1C,$27
 $FB2F DEFB $1C,$11,$0E,$27,$18,$15,$0A,$17
 $FB37 DEFB $1B,$FE,$13,$00,$0A,$17,$0D,$27
 $FB3F DEFB $16,$0A,$14,$0E,$27,$11,$12,$1B
 $FB47 DEFB $27,$0E,$1B,$0C,$0A,$18,$0E,$27
 $FB4F DEFB $12,$17,$27,$11,$12,$1B,$FE,$14
 $FB57 DEFB $00,$1C,$1A,$1D,$1B,$1C,$21,$27
 $FB5F DEFB $0B,$15,$12,$16,$18,$26,$FF

; Instructions page 2 text
;
; #CALL:print_multi_string( #PC, 0, instructions2a )
; #CALL:print_multi_string( #PC, 1, instructions2b )
; #CALL:print_multi_string( #PC, 2, instructions2c )
; #CALL:print_multi_string( #PC, 3, instructions2d )
; #CALL:print_multi_string( #PC, 4, instructions2e )
; #CALL:print_multi_string( #PC, 5, instructions2f )
; #CALL:print_multi_string( #PC, 6, instructions2g )
; #CALL:print_multi_string( #PC, 7, instructions2h )
; #CALL:print_multi_string( #PC, 8, instructions2i )
; #CALL:print_multi_string( #PC, 9, instructions2j )
; #CALL:print_multi_string( #PC, 10, instructions2k )
; #CALL:print_multi_string( #PC, 11, instructions2l )
; #CALL:print_multi_string( #PC, 12, instructions2m )
; #CALL:print_multi_string( #PC, 13, instructions2n )
b$FB66 DEFB $00,$07,$14,$0E,$21,$0B,$00,$0A
 $FB6E DEFB $1A,$0D,$27,$0C,$00,$17,$1C,$1A
 $FB76 DEFB $00,$15,$1B,$FE,$02,$08,$25,$0A
 $FB7E DEFB $24,$2C,$1F,$0A,$15,$14,$27,$15
 $FB86 DEFB $0E,$0F,$1C,$FE,$04,$08,$25,$1B
 $FB8E DEFB $24,$2C,$1F,$0A,$15,$14,$27,$1A
 $FB96 DEFB $12,$10,$11,$1C,$FE,$06,$08,$25
 $FB9E DEFB $1B,$18,$0A,$0C,$0E,$24,$2C,$13
 $FBA6 DEFB $1D,$16,$18,$FE,$08,$03,$1C,$00
 $FBAE DEFB $27,$0C,$15,$12,$16,$0B,$27,$1B
 $FBB6 DEFB $1C,$0A,$12,$1A,$1B,$27,$11,$00
 $FBBE DEFB $15,$0D,$27,$1F,$0A,$15,$14,$FE
 $FBC6 DEFB $09,$03,$0A,$17,$0D,$27,$13,$1D
 $FBCE DEFB $16,$18,$26,$FE,$0B,$03,$14,$0E
 $FBD6 DEFB $0E,$18,$27,$0A,$17,$27,$0E,$21
 $FBDE DEFB $0E,$27,$00,$17,$27,$0E,$17,$0E
 $FBE6 DEFB $1A,$10,$21,$27,$15,$0E,$1E,$0E
 $FBEE DEFB $15,$2E,$FE,$0C,$03,$1F,$0A,$1A
 $FBF6 DEFB $17,$12,$17,$10,$27,$0B,$0E,$0E
 $FBFE DEFB $18,$1B,$27,$12,$17,$0D,$12,$0C
 $FC06 DEFB $0A,$1C,$0E,$FE,$0D,$03,$12,$16
 $FC0E DEFB $16,$12,$17,$0E,$17,$1C,$27,$1B
 $FC16 DEFB $1C,$0A,$1A,$1E,$0A,$1C,$12,$00
 $FC1E DEFB $17,$26,$FE,$0F,$03,$0C,$11,$0A
 $FC26 DEFB $17,$10,$0E,$27,$0D,$12,$1A,$0E
 $FC2E DEFB $0C,$1C,$12,$00,$17,$27,$00,$17
 $FC36 DEFB $27,$0C,$00,$17,$1C,$0A,$0C,$1C
 $FC3E DEFB $FE,$10,$03,$1F,$12,$1C,$11,$27
 $FC46 DEFB $1C,$1A,$0A,$16,$18,$00,$15,$12
 $FC4E DEFB $17,$0E,$1B,$27,$00,$1A,$27,$1B
 $FC56 DEFB $18,$1A,$12,$17,$10,$2E,$FE,$11
 $FC5E DEFB $03,$0B,$00,$0A,$1A,$0D,$1B,$27
 $FC66 DEFB $1C,$00,$27,$14,$12,$15,$15,$27
 $FC6E DEFB $0B,$00,$1D,$17,$0C,$0E,$26,$FE
 $FC76 DEFB $13,$03,$0B,$0E,$1F,$0A,$1A,$0E
 $FC7E DEFB $27,$00,$0F,$27,$16,$00,$1E,$12
 $FC86 DEFB $17,$10,$27,$00,$0B,$13,$0E,$0C
 $FC8E DEFB $1C,$1B,$FE,$14,$03,$0A,$17,$0D
 $FC96 DEFB $27,$17,$0E,$10,$0A,$1C,$12,$1E
 $FC9E DEFB $0E,$27,$0B,$1D,$00,$21,$0A,$17
 $FCA6 DEFB $0C,$21,$28,$FF

; Instructions page 3 text
;
; #CALL:print_multi_string( #PC, 0, instructions3a )
; #CALL:print_multi_string( #PC, 1, instructions3b )
; #CALL:print_multi_string( #PC, 2, instructions3c )
; #CALL:print_multi_string( #PC, 3, instructions3d )
; #CALL:print_multi_string( #PC, 4, instructions3e )
; #CALL:print_multi_string( #PC, 5, instructions3f )
; #CALL:print_multi_string( #PC, 6, instructions3g )
; #CALL:print_multi_string( #PC, 7, instructions3h )
; #CALL:print_multi_string( #PC, 8, instructions3i )
; #CALL:print_multi_string( #PC, 9, instructions3j )
; #CALL:print_multi_string( #PC, 10, instructions3k )
; #CALL:print_multi_string( #PC, 11, instructions3l )
; #CALL:print_multi_string( #PC, 12, instructions3m )
; #CALL:print_multi_string( #PC, 13, instructions3n )
b$FCAA DEFB $00,$0E,$0F,$00,$00,$0D,$FE,$04
 $FCB2 DEFB $04,$0E,$10,$10,$FE,$04,$0C,$2C
 $FCBA DEFB $27,$05,$FE,$09,$04,$0C,$00,$0C
 $FCC2 DEFB $14,$1C,$0A,$12,$15,$2C,$01,$00
 $FCCA DEFB $FE,$0E,$04,$0F,$1A,$1D,$12,$1C
 $FCD2 DEFB $FE,$0E,$0C,$2C,$01,$05,$FE,$13
 $FCDA DEFB $04,$0C,$11,$0E,$0E,$1B,$0E,$FE
 $FCE2 DEFB $13,$0C,$2C,$02,$00,$FE,$04,$14
 $FCEA DEFB $0C,$0A,$14,$0E,$FE,$04,$1D,$2C
 $FCF2 DEFB $02,$05,$FE,$09,$14,$12,$0C,$0E
 $FCFA DEFB $27,$0C,$1A,$0E,$0A,$16,$2C,$03
 $FD02 DEFB $00,$FE,$0E,$14,$1C,$0E,$0A,$FE
 $FD0A DEFB $0E,$1D,$2C,$03,$05,$FE,$13,$14
 $FD12 DEFB $1B,$00,$1D,$18,$FE,$13,$1D,$2C
 $FD1A DEFB $04,$00,$FF

; Instructions page 4 text
;
; #CALL:print_multi_string( #PC, 0, instructions4a )
; #CALL:print_multi_string( #PC, 1, instructions4b )
; #CALL:print_multi_string( #PC, 2, instructions4c )
; #CALL:print_multi_string( #PC, 3, instructions4d )
; #CALL:print_multi_string( #PC, 4, instructions4e )
; #CALL:print_multi_string( #PC, 5, instructions4f )
; #CALL:print_multi_string( #PC, 6, instructions4g )
; #CALL:print_multi_string( #PC, 7, instructions4h )
; #CALL:print_multi_string( #PC, 8, instructions4i )
; #CALL:print_multi_string( #PC, 9, instructions4j )
; #CALL:print_multi_string( #PC, 10, instructions4k )
; #CALL:print_multi_string( #PC, 11, instructions4l )
b$FD1D DEFB $00,$0B,$00,$1C,$11,$0E,$1A,$27
 $FD25 DEFB $12,$1C,$0E,$16,$1B,$FE,$04,$0B
 $FD2D DEFB $0C,$1A,$0E,$0D,$12,$1C,$27,$0C
 $FD35 DEFB $0A,$1A,$0D,$2C,$27,$29,$FE,$0D
 $FD3D DEFB $0B,$00,$20,$21,$10,$0E,$17,$FE
 $FD45 DEFB $07,$16,$2C,$27,$02,$05,$FE,$07
 $FD4D DEFB $0B,$0D,$0E,$00,$0D,$00,$1A,$0A
 $FD55 DEFB $17,$1C,$FE,$0A,$16,$2C,$27,$05
 $FD5D DEFB $00,$FE,$0A,$0B,$1C,$0E,$1B,$1C
 $FD65 DEFB $27,$1C,$1D,$0B,$0E,$FE,$0D,$16
 $FD6D DEFB $2C,$27,$07,$05,$FE,$10,$0B,$0D
 $FD75 DEFB $21,$17,$0A,$16,$12,$1C,$0E,$FE
 $FD7D DEFB $10,$16,$2C,$01,$00,$00,$FE,$13
 $FD85 DEFB $0B,$18,$15,$0A,$17,$1B,$FE,$13
 $FD8D DEFB $16,$2C,$02,$00,$00,$FF

; Redefine keys instructions text
;
; #CALL:print_multi_string( #PC, 0, redefinea )
; #CALL:print_multi_string( #PC, 1, redefineb )
; #CALL:print_multi_string( #PC, 2, redefinec )
; #CALL:print_multi_string( #PC, 3, redefined )
; #CALL:print_multi_string( #PC, 4, redefinee )
; #CALL:print_multi_string( #PC, 5, redefinef )
b$FD93 DEFB $00,$0A,$0D,$0E,$0F,$12,$17,$0E
 $FD9B DEFB $27,$14,$0E,$21,$1B,$FE,$04,$03
 $FDA3 DEFB $0C,$11,$00,$00,$1B,$0E,$27,$03
 $FDAB DEFB $27,$0D,$12,$0F,$0F,$0E,$1A,$0E
 $FDB3 DEFB $17,$1C,$27,$14,$0E,$21,$1B,$26
 $FDBB DEFB $FE,$07,$03,$0D,$00,$17,$2A,$1C
 $FDC3 DEFB $27,$1D,$1B,$0E,$27,$19,$2C,$19
 $FDCB DEFB $1D,$12,$1C,$27,$00,$1A,$27,$18
 $FDD3 DEFB $2C,$18,$0A,$1D,$1B,$0E,$26,$FE
 $FDDB DEFB $0A,$03,$12,$0F,$27,$1D,$1B,$12
 $FDE3 DEFB $17,$10,$27,$1B,$18,$0E,$0C,$1C
 $FDEB DEFB $1A,$1D,$16,$27,$18,$15,$1D,$1B
 $FDF3 DEFB $27,$0D,$00,$17,$2A,$1C,$FE,$0B
 $FDFB DEFB $03,$1D,$1B,$0E,$27,$1B,$11,$12
 $FE03 DEFB $0F,$1C,$0E,$0D,$27,$14,$0E,$21
 $FE0B DEFB $27,$0F,$1D,$17,$0C,$1C,$12,$00
 $FE13 DEFB $17,$1B,$2E,$FE,$0C,$03,$0E,$26
 $FE1B DEFB $10,$26,$27,$0C,$1D,$1A,$1B,$00
 $FE23 DEFB $1A,$27,$14,$0E,$21,$1B,$26,$FF

; Picked up oxygen tank tune
b$FE2B DEFB $09,$09,$09,$09,$00,$00,$00,$00
 $FE33 DEFB $00,$00,$0C,$0C,$10,$10,$10,$00
 $FE3B DEFB $0C,$0C,$00,$00,$00,$00,$15,$15
 $FE43 DEFB $15,$FF

; Picked up bank card tune
b$FE45 DEFB $05,$05,$00,$05,$05,$05,$05,$05
 $FE4D DEFB $00,$04,$04,$00,$05,$05,$05,$07
 $FE55 DEFB $07,$00,$08,$08,$00,$0A,$0A,$00
 $FE5D DEFB $0C,$0D,$0C,$0D,$0D,$0E,$0D,$FF

; Picked up aerosol tune
b$FE65 DEFB $12,$15,$18,$1B,$18,$15,$12,$0F
 $FE6D DEFB $0C,$09,$06,$FF

; Fought moving object while aerosol active tune
b$FE71 DEFB $0C,$11,$16,$1B,$20,$FF

; Game won text
;
; Used by the routine at #R$E62F
;
; .
;
; #CALL:print_multi_string( #PC, 0, wona )
; #CALL:print_multi_string( #PC, 1, wonb )
; #CALL:print_multi_string( #PC, 2, wonc )
; #CALL:print_multi_string( #PC, 3, wond )
; #CALL:print_multi_string( #PC, 4, wone )
; #CALL:print_multi_string( #PC, 5, wonf )
; #CALL:print_multi_string( #PC, 6, wong )
; #CALL:print_multi_string( #PC, 7, wonh )
b$FE77 DEFB $04,$06,$0C,$00,$17,$10,$1A,$0A
 $FE7F DEFB $1C,$1D,$15,$0A,$1C,$12,$00,$17
 $FE87 DEFB $1B,$28,$FE,$06,$06,$21,$00,$1D
 $FE8F DEFB $1A,$27,$16,$12,$1B,$1B,$12,$00
 $FE97 DEFB $17,$27,$12,$1B,$27,$FE,$07,$06
 $FE9F DEFB $0C,$00,$16,$18,$15,$0E,$1C,$0E
 $FEA7 DEFB $26,$FE,$09,$06,$1D,$17,$1A,$0A
 $FEAF DEFB $1E,$0E,$15,$27,$1C,$11,$12,$1B
 $FEB7 DEFB $27,$0C,$00,$0D,$0E,$0D,$27,$FE
 $FEBF DEFB $0A,$06,$16,$0E,$1B,$1B,$0A,$10
 $FEC7 DEFB $0E,$23,$2E,$FE,$0C,$06,$17,$1A
 $FECF DEFB $12,$12,$15,$12,$11,$15,$1D,$10
 $FED7 DEFB $27,$12,$0F,$00,$1E,$11,$27,$15
 $FEDF DEFB $18,$FE,$0E,$06,$1C,$11,$0E,$17
 $FEE7 DEFB $27,$18,$11,$00,$17,$0E,$23,$00
 $FEEF DEFB $01,$2E,$03,$07,$07,$2E,$04,$06
 $FEF7 DEFB $00,$00,$FE,$0F,$06,$1C,$00,$27
 $FEFF DEFB $0C,$15,$0A,$12,$16,$27,$21,$00
 $FF07 DEFB $1D,$1A,$27,$18,$1A,$12,$22,$0E
 $FF0F DEFB $26,$FF

; End
i$FF11
